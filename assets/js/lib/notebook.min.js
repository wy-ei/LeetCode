// ansi_up.js
// version : 1.1.0
// author : Dru Nelson
// license : MIT
// http://github.com/drudru/ansi_up
(function(a,b){function g(){this.fg=this.bg=null,this.bright=0}var c,d="1.1.0",e=typeof module!="undefined",f=[[{color:"0, 0, 0","class":"ansi-black"},{color:"187, 0, 0","class":"ansi-red"},{color:"0, 187, 0","class":"ansi-green"},{color:"187, 187, 0","class":"ansi-yellow"},{color:"0, 0, 187","class":"ansi-blue"},{color:"187, 0, 187","class":"ansi-magenta"},{color:"0, 187, 187","class":"ansi-cyan"},{color:"255,255,255","class":"ansi-white"}],[{color:"85, 85, 85","class":"ansi-bright-black"},{color:"255, 85, 85","class":"ansi-bright-red"},{color:"0, 255, 0","class":"ansi-bright-green"},{color:"255, 255, 85","class":"ansi-bright-yellow"},{color:"85, 85, 255","class":"ansi-bright-blue"},{color:"255, 85, 255","class":"ansi-bright-magenta"},{color:"85, 255, 255","class":"ansi-bright-cyan"},{color:"255, 255, 255","class":"ansi-bright-white"}]];g.prototype.escape_for_html=function(a){return a.replace(/[&<>]/gm,function(a){if(a=="&")return"&amp;";if(a=="<")return"&lt;";if(a==">")return"&gt;"})},g.prototype.linkify=function(a){return a.replace(/(https?:\/\/[^\s]+)/gm,function(a){return'<a href="'+a+'">'+a+"</a>"})},g.prototype.ansi_to_html=function(a,b){var c=a.split(/\033\[/),d=c.shift(),e=this,f=c.map(function(a){return e.process_chunk(a,b)});f.unshift(d);var g=f.reduce(function(a,b){return Array.isArray(b)?a.concat(b):(a.push(b),a)},[]),h=g.join("");return h},g.prototype.process_chunk=function(a,b){b=typeof b=="undefined"?{}:b;var c=typeof b.use_classes!="undefined"&&b.use_classes,d=c?"class":"color",e=a.match(/([\d;]*)m([^]*)/m);if(!e)return a;var g=e[2],h=e[1].split(";"),i=this;h.map(function(a){var b=parseInt(a);isNaN(b)||b===0?(i.fg=i.bg=null,i.bright=0):b===1?i.bright=1:b>=30&&b<38?i.fg=f[i.bright][b%10][d]:b>=40&&b<48&&(i.bg=f[0][b%10][d])});if(i.fg===null&&i.bg===null)return g;var j=classes=[];return i.fg&&(c?classes.push(i.fg+"-fg"):j.push("color:rgb("+i.fg+")")),i.bg&&(c?classes.push(i.bg+"-bg"):j.push("background-color:rgb("+i.bg+")")),c?['<span class="'+classes.join(" ")+'">',g,"</span>"]:['<span style="'+j.join(";")+'">',g,"</span>"]},c={escape_for_html:function(a){var b=new g;return b.escape_for_html(a)},linkify:function(a){var b=new g;return b.linkify(a)},ansi_to_html:function(a,b){var c=new g;return c.ansi_to_html(a,b)},ansi_to_html_obj:function(){return new g}},e&&(module.exports=c),typeof window!="undefined"&&typeof ender=="undefined"&&(window.ansi_up=c),typeof define=="function"&&define.amd&&define("ansi_up",[],function(){return c})})(Date);

(function () {
    var root = this;
    var VERSION = "0.4.2";
    var doc = root.document;
    if (!doc) {
        var jsdom = require("jsdom");
        doc = (new jsdom.JSDOM).window.document
    }
    var ident = function (x) {
        return x
    };
    var makeElement = function (tag, classNames) {
        var el = doc.createElement(tag);
        el.className = (classNames || []).map(function (cn) {
            return nb.prefix + cn
        }).join(" ");
        return el
    };
    var escapeHTML = function (raw) {
        var replaced = raw.replace(/</g, "&lt;").replace(/>/g, "&gt;");
        return replaced
    };
    var joinText = function (text) {
        if (text.join) {
            return text.map(joinText).join("")
        } else {
            return text
        }
    };
    var condRequire = function (module_name) {
        return typeof require === "function" && require(module_name)
    };
    var getMarkdown = function () {
        return root.marked || condRequire("marked")
    };
    var getAnsi = function () {
        var lib = root.ansi_up || condRequire("ansi_up");
        return lib && lib.ansi_to_html
    };
    var nb = {
        prefix: "nb-",
        markdown: getMarkdown() || ident,
        ansi: getAnsi() || ident,
        highlighter: ident,
        VERSION: VERSION
    };
    nb.Input = function (raw, cell) {
        this.raw = raw;
        this.cell = cell
    };
    nb.Input.prototype.render = function () {
        if (!this.raw.length) {
            return makeElement("div")
        }
        var holder = makeElement("div", ["input"]);
        var cell = this.cell;
        if (typeof cell.number === "number") {
            holder.setAttribute("data-prompt-number", this.cell.number)
        }
        var pre_el = makeElement("pre");
        var code_el = makeElement("code");
        var notebook = cell.worksheet.notebook;
        var m = notebook.metadata;
        var lang = this.cell.raw.language || m.language || m.kernelspec && m.kernelspec.language || m.language_info && m.language_info.name;
        code_el.setAttribute("data-language", lang);
        code_el.className = "lang-" + lang;
        code_el.innerHTML = nb.highlighter(escapeHTML(joinText(this.raw)), pre_el, code_el, lang);
        pre_el.appendChild(code_el);
        holder.appendChild(pre_el);
        this.el = holder;
        return holder
    };
    var imageCreator = function (format) {
        return function (data) {
            var el = makeElement("img", ["image-output"]);
            el.src = "data:image/" + format + ";base64," + joinText(data).replace(/\n/g, "");
            return el
        }
    };
    nb.display = {};
    nb.display.text = function (text) {
        var el = makeElement("pre", ["text-output"]);
        el.innerHTML = escapeHTML(joinText(text));
        return el
    };
    nb.display["text/plain"] = nb.display.text;
    nb.display.html = function (html) {
        var el = makeElement("div", ["html-output"]);
        el.innerHTML = joinText(html);
        return el
    };
    nb.display["text/html"] = nb.display.html;
    nb.display.marked = function (md) {
        return nb.display.html(nb.markdown(joinText(md)))
    };
    nb.display["text/markdown"] = nb.display.marked;
    nb.display.svg = function (svg) {
        var el = makeElement("div", ["svg-output"]);
        el.innerHTML = joinText(svg);
        return el
    };
    nb.display["text/svg+xml"] = nb.display.svg;
    nb.display["image/svg+xml"] = nb.display.svg;
    nb.display.latex = function (latex) {
        var el = makeElement("div", ["latex-output"]);
        el.innerHTML = joinText(latex);
        return el
    };
    nb.display["text/latex"] = nb.display.latex;
    nb.display.javascript = function (js) {
        var el = makeElement("script");
        el.innerHTML = joinText(js);
        return el
    };
    nb.display["application/javascript"] = nb.display.javascript;
    nb.display.png = imageCreator("png");
    nb.display["image/png"] = nb.display.png;
    nb.display.jpeg = imageCreator("jpeg");
    nb.display["image/jpeg"] = nb.display.jpeg;
    nb.display_priority = ["png", "image/png", "jpeg", "image/jpeg", "svg", "image/svg+xml", "text/svg+xml", "html", "text/html", "text/markdown", "latex", "text/latex", "javascript", "application/javascript", "text", "text/plain"];
    var render_display_data = function () {
        var o = this;
        var formats = nb.display_priority.filter(function (d) {
            return o.raw.data ? o.raw.data[d] : o.raw[d]
        });
        var format = formats[0];
        if (format) {
            if (nb.display[format]) {
                return nb.display[format](o.raw[format] || o.raw.data[format])
            }
        }
        return makeElement("div", ["empty-output"])
    };
    var render_error = function () {
        var el = makeElement("pre", ["pyerr"]);
        var raw = this.raw.traceback.join("\n");
        el.innerHTML = nb.highlighter(nb.ansi(escapeHTML(raw)), el);
        return el
    };
    nb.Output = function (raw, cell) {
        this.raw = raw;
        this.cell = cell;
        this.type = raw.output_type
    };
    nb.Output.prototype.renderers = {
        display_data: render_display_data,
        execute_result: render_display_data,
        pyout: render_display_data,
        pyerr: render_error,
        error: render_error,
        stream: function () {
            var el = makeElement("pre", [this.raw.stream || this.raw.name]);
            var raw = joinText(this.raw.text);
            el.innerHTML = nb.highlighter(nb.ansi(escapeHTML(raw)), el);
            return el
        }
    };
    nb.Output.prototype.render = function () {
        var outer = makeElement("div", ["output"]);
        if (typeof this.cell.number === "number") {
            outer.setAttribute("data-prompt-number", this.cell.number)
        }
        var inner = this.renderers[this.type].call(this);
        outer.appendChild(inner);
        this.el = outer;
        return outer
    };
    nb.coalesceStreams = function (outputs) {
        if (!outputs.length) {  
            return outputs
        }
        var last = outputs[0];
        var new_outputs = [last];
        outputs.slice(1).forEach(function (o) {
            if (o.raw.output_type === "stream" && last.raw.output_type === "stream" && o.raw.name === last.raw.name) {
                last.raw.text = last.raw.text.concat(o.raw.text)
            } else {
                new_outputs.push(o);
                last = o
            }
        });
        return new_outputs
    };
    nb.Cell = function (raw, worksheet) {
        var cell = this;
        cell.raw = raw;
        cell.worksheet = worksheet;
        cell.type = raw.cell_type;
        if (cell.type === "code") {
            cell.number = raw.prompt_number > -1 ? raw.prompt_number : raw.execution_count;
            var source = raw.input || [raw.source];
            cell.input = new nb.Input(source, cell);
            var raw_outputs = (cell.raw.outputs || []).map(function (o) {
                return new nb.Output(o, cell)
            });
            cell.outputs = nb.coalesceStreams(raw_outputs)
        }
    };
    nb.Cell.prototype.renderers = {
        markdown: function () {
            var el = makeElement("div", ["cell", "markdown-cell"]);
            el.innerHTML = nb.markdown(joinText(this.raw.source));
            return el
        },
        heading: function () {
            var el = makeElement("h" + this.raw.level, ["cell", "heading-cell"]);
            el.innerHTML = joinText(this.raw.source);
            return el
        },
        raw: function () {
            var el = makeElement("div", ["cell", "raw-cell"]);
            el.innerHTML = joinText(this.raw.source);
            return el
        },
        code: function () {
            var cell_el = makeElement("div", ["cell", "code-cell"]);
            cell_el.appendChild(this.input.render());
            var output_els = this.outputs.forEach(function (o) {
                cell_el.appendChild(o.render())
            });
            return cell_el
        }
    };
    nb.Cell.prototype.render = function () {
        var el = this.renderers[this.type].call(this);
        this.el = el;
        return el
    };
    nb.Worksheet = function (raw, notebook) {
        var worksheet = this;
        this.raw = raw;
        this.notebook = notebook;
        this.cells = raw.cells.map(function (c) {
            return new nb.Cell(c, worksheet)
        });
        this.render = function () {
            var worksheet_el = makeElement("div", ["worksheet"]);
            worksheet.cells.forEach(function (c) {
                worksheet_el.appendChild(c.render())
            });
            this.el = worksheet_el;
            return worksheet_el
        }
    };
    nb.Notebook = function (raw, config) {
        var notebook = this;
        this.raw = raw;
        this.config = config;
        var meta = this.metadata = raw.metadata || {};
        this.title = meta.title || meta.name;
        var _worksheets = raw.worksheets || [{
            cells: raw.cells
        }];
        this.worksheets = _worksheets.map(function (ws) {
            return new nb.Worksheet(ws, notebook)
        });
        this.sheet = this.worksheets[0]
    };
    nb.Notebook.prototype.render = function () {
        var notebook_el = makeElement("div", ["notebook"]);
        this.worksheets.forEach(function (w) {
            notebook_el.appendChild(w.render())
        });
        this.el = notebook_el;
        return notebook_el
    };
    nb.parse = function (nbjson, config) {
        return new nb.Notebook(nbjson, config)
    };
    if (typeof define === "function" && define.amd) {
        define(function () {
            return nb
        })
    }
    if (typeof exports !== "undefined") {
        if (typeof module !== "undefined" && module.exports) {
            exports = module.exports = nb
        }
        exports.nb = nb
    } else {
        root.nb = nb
    }
}).call(this);