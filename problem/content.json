{"verifying-an-alien-dictionary":"<p>某种外星语也使用英文小写字母，但可能顺序 <code>order</code> 不同。字母表的顺序（<code>order</code>）是一些小写字母的排列。</p>\n\n<p>给定一组用外星语书写的单词 <code>words</code>，以及其字母表的顺序 <code>order</code>，只有当给定的单词在这种外星语中按字典序排列时，返回 <code>true</code>；否则，返回 <code>false</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>words = [&quot;hello&quot;,&quot;leetcode&quot;], order = &quot;hlabcdefgijkmnopqrstuvwxyz&quot;\n<strong>输出：</strong>true\n<strong>解释：</strong>在该语言的字母表中，&#39;h&#39; 位于 &#39;l&#39; 之前，所以单词序列是按字典序排列的。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>words = [&quot;word&quot;,&quot;world&quot;,&quot;row&quot;], order = &quot;worldabcefghijkmnpqstuvxyz&quot;\n<strong>输出：</strong>false\n<strong>解释：</strong>在该语言的字母表中，&#39;d&#39; 位于 &#39;l&#39; 之后，那么 words[0] &gt; words[1]，因此单词序列不是按字典序排列的。</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>words = [&quot;apple&quot;,&quot;app&quot;], order = &quot;abcdefghijklmnopqrstuvwxyz&quot;\n<strong>输出：</strong>false\n<strong>解释：</strong>当前三个字符 &quot;app&quot; 匹配时，第二个字符串相对短一些，然后根据词典编纂规则 &quot;apple&quot; &gt; &quot;app&quot;，因为 &#39;l&#39; &gt; &#39;&empty;&#39;，其中 &#39;&empty;&#39; 是空白字符，定义为比任何其他字符都小（<a href=\"https://baike.baidu.com/item/%E5%AD%97%E5%85%B8%E5%BA%8F\" target=\"_blank\">更多信息</a>）。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= words.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 20</code></li>\n\t<li><code>order.length == 26</code></li>\n\t<li>在&nbsp;<code>words[i]</code>&nbsp;和&nbsp;<code>order</code>&nbsp;中的所有字符都是英文小写字母。</li>\n</ol>\n","univalued-binary-tree":"<p>如果二叉树每个节点都具有相同的值，那么该二叉树就是<em>单值</em>二叉树。</p>\n\n<p>只有给定的树是单值二叉树时，才返回&nbsp;<code>true</code>；否则返回 <code>false</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/screen-shot-2018-12-25-at-50104-pm.png\" style=\"height: 159px; width: 200px;\"></p>\n\n<pre><strong>输入：</strong>[1,1,1,1,1,null,1]\n<strong>输出：</strong>true\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/screen-shot-2018-12-25-at-50050-pm.png\" style=\"height: 158px; width: 200px;\"></p>\n\n<pre><strong>输入：</strong>[2,2,2,5,2]\n<strong>输出：</strong>false\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>给定树的节点数范围是&nbsp;<code>[1, 100]</code>。</li>\n\t<li>每个节点的值都是整数，范围为&nbsp;<code>[0, 99]</code>&nbsp;。</li>\n</ol>\n","delete-columns-to-make-sorted-ii":"<p>给定由&nbsp;<code>N</code>&nbsp;个小写字母字符串组成的数组&nbsp;<code>A</code>，其中每个字符串长度相等。</p>\n\n<p>选取一个删除索引序列，对于&nbsp;<code>A</code>&nbsp;中的每个字符串，删除对应每个索引处的字符。</p>\n\n<p>比如，有&nbsp;<code>A = [&quot;abcdef&quot;, &quot;uvwxyz&quot;]</code>，删除索引序列&nbsp;<code>{0, 2, 3}</code>，删除后&nbsp;<code>A</code>&nbsp;为<code>[&quot;bef&quot;, &quot;vyz&quot;]</code>。</p>\n\n<p>假设，我们选择了一组删除索引&nbsp;<code>D</code>，那么在执行删除操作之后，最终得到的数组的元素是按 <strong>字典序</strong>（<code>A[0] &lt;= A[1] &lt;= A[2] ... &lt;= A[A.length - 1]</code>）排列的，然后请你返回&nbsp;<code>D.length</code>&nbsp;的最小可能值。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;ca&quot;,&quot;bb&quot;,&quot;ac&quot;]\n<strong>输出：</strong>1\n<strong>解释： </strong>\n删除第一列后，A = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]。\n现在 A 中元素是按字典排列的 (即，A[0] &lt;= A[1] &lt;= A[2])。\n我们至少需要进行 1 次删除，因为最初 A 不是按字典序排列的，所以答案是 1。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;xc&quot;,&quot;yb&quot;,&quot;za&quot;]\n<strong>输出：</strong>0\n<strong>解释：</strong>\nA 的列已经是按字典序排列了，所以我们不需要删除任何东西。\n注意 A 的行不需要按字典序排列。\n也就是说，A[0][0] &lt;= A[0][1] &lt;= ... 不一定成立。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;zyx&quot;,&quot;wvu&quot;,&quot;tsr&quot;]\n<strong>输出：</strong>3\n<strong>解释：</strong>\n我们必须删掉每一列。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= A[i].length &lt;= 100</code></li>\n</ol>\n","delete-columns-to-make-sorted-iii":"<p>给定由&nbsp;<code>N</code>&nbsp;个小写字母字符串组成的数组&nbsp;<code>A</code>，其中每个字符串长度相等。</p>\n\n<p>选取一个删除索引序列，对于&nbsp;<code>A</code>&nbsp;中的每个字符串，删除对应每个索引处的字符。</p>\n\n<p>比如，有&nbsp;<code>A = [&quot;babca&quot;,&quot;bbazb&quot;]</code>，删除索引序列&nbsp;<code>{0, 1, 4}</code>，删除后&nbsp;<code>A</code>&nbsp;为<code>[&quot;bc&quot;,&quot;az&quot;]</code>。</p>\n\n<p>假设，我们选择了一组删除索引&nbsp;<code>D</code>，那么在执行删除操作之后，最终得到的数组的行中的每个元素都是按<strong>字典序</strong>排列的。</p>\n\n<p>清楚起见，<code>A[0]</code>&nbsp;是按字典序排列的（即，<code>A[0][0] &lt;= A[0][1] &lt;= ... &lt;= A[0][A[0].length - 1]</code>），<code>A[1]</code>&nbsp;是按字典序排列的（即，<code>A[1][0] &lt;= A[1][1] &lt;= ... &lt;= A[1][A[1].length - 1]</code>），依此类推。</p>\n\n<p>请你返回&nbsp;<code>D.length</code>&nbsp;的最小可能值。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;babca&quot;,&quot;bbazb&quot;]\n<strong>输出：</strong>3\n<strong>解释：\n</strong>删除 0、1 和 4 这三列后，最终得到的数组是 A = [&quot;bc&quot;, &quot;az&quot;]。\n这两行是分别按字典序排列的（即，A[0][0] &lt;= A[0][1] 且 A[1][0] &lt;= A[1][1]）。\n注意，A[0] &gt; A[1] &mdash;&mdash; 数组 A 不一定是按字典序排列的。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;edcba&quot;]\n<strong>输出：</strong>4\n<strong>解释：</strong>如果删除的列少于 4 列，则剩下的行都不会按字典序排列。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;ghi&quot;,&quot;def&quot;,&quot;abc&quot;]\n<strong>输出：</strong>0\n<strong>解释：</strong>所有行都已按字典序排列。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= A[i].length &lt;= 100</code></li>\n</ol>\n","prison-cells-after-n-days":"<p>8 间牢房排成一排，每间牢房不是有人住就是空着。</p>\n\n<p>每天，无论牢房是被占用或空置，都会根据以下规则进行更改：</p>\n\n<ul>\n\t<li>如果一间牢房的两个相邻的房间都被占用或都是空的，那么该牢房就会被占用。</li>\n\t<li>否则，它就会被空置。</li>\n</ul>\n\n<p>（请注意，由于监狱中的牢房排成一行，所以行中的第一个和最后一个房间无法有两个相邻的房间。）</p>\n\n<p>我们用以下方式描述监狱的当前状态：如果第 <code>i</code> 间牢房被占用，则 <code>cell[i]==1</code>，否则 <code>cell[i]==0</code>。</p>\n\n<p>根据监狱的初始状态，在 <code>N</code> 天后返回监狱的状况（和上述 N 种变化）。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>cells = [0,1,0,1,1,0,0,1], N = 7\n<strong>输出：</strong>[0,0,1,1,0,0,0,0]\n<strong>解释：\n</strong>下表概述了监狱每天的状况：\nDay 0: [0, 1, 0, 1, 1, 0, 0, 1]\nDay 1: [0, 1, 1, 0, 0, 0, 0, 0]\nDay 2: [0, 0, 0, 0, 1, 1, 1, 0]\nDay 3: [0, 1, 1, 0, 0, 1, 0, 0]\nDay 4: [0, 0, 0, 0, 0, 1, 0, 0]\nDay 5: [0, 1, 1, 1, 0, 1, 0, 0]\nDay 6: [0, 0, 1, 0, 1, 1, 0, 0]\nDay 7: [0, 0, 1, 1, 0, 0, 0, 0]\n\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>cells = [1,0,0,1,0,0,1,0], N = 1000000000\n<strong>输出：</strong>[0,0,1,1,1,1,1,0]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>cells.length == 8</code></li>\n\t<li><code>cells[i]</code>&nbsp;的值为 <code>0</code> 或 <code>1</code>&nbsp;</li>\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\n</ol>\n","check-completeness-of-a-binary-tree":"<p>给定一个二叉树，确定它是否是一个<em>完全二叉树</em>。</p>\n\n<p><strong><a href=\"https://baike.baidu.com/item/完全二叉树/7773232?fr=aladdin\" target=\"_blank\">百度百科</a>中对完全二叉树的定义如下：</strong></p>\n\n<p>若设二叉树的深度为 h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h 层所有的结点都连续集中在最左边，这就是完全二叉树。（注：第 h 层可能包含 1~&nbsp;2<sup>h</sup>&nbsp;个节点。）</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/complete-binary-tree-1.png\" style=\"height: 145px; width: 180px;\"></p>\n\n<pre><strong>输入：</strong>[1,2,3,4,5,6]\n<strong>输出：</strong>true\n<strong>解释：</strong>最后一层前的每一层都是满的（即，结点值为 {1} 和 {2,3} 的两层），且最后一层中的所有结点（{4,5,6}）都尽可能地向左。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/complete-binary-tree-2.png\"></strong></p>\n\n<pre><strong>输入：</strong>[1,2,3,4,5,null,7]\n<strong>输出：</strong>false\n<strong>解释：</strong>值为 7 的结点没有尽可能靠向左侧。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>树中将会有 1 到 100 个结点。</li>\n</ol>\n","validate-stack-sequences":"<p>给定&nbsp;<code>pushed</code>&nbsp;和&nbsp;<code>popped</code>&nbsp;两个序列，只有当它们可能是在最初空栈上进行的推入 push 和弹出 pop 操作序列的结果时，返回 <code>true</code>；否则，返回 <code>false</code>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>pushed = [1,2,3,4,5], popped = [4,5,3,2,1]\n<strong>输出：</strong>true\n<strong>解释：</strong>我们可以按以下顺序执行：\npush(1), push(2), push(3), push(4), pop() -&gt; 4,\npush(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>pushed = [1,2,3,4,5], popped = [4,3,5,1,2]\n<strong>输出：</strong>false\n<strong>解释：</strong>1 不能在 2 之前弹出。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= pushed.length == popped.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= pushed[i], popped[i] &lt; 1000</code></li>\n\t<li><code>pushed</code>&nbsp;是&nbsp;<code>popped</code>&nbsp;的排列。</li>\n</ol>\n","three-equal-parts":"<p>给定一个由 <code>0</code> 和 <code>1</code> 组成的数组&nbsp;<code>A</code>，将数组分成 3&nbsp;个非空的部分，使得所有这些部分表示相同的二进制值。</p>\n\n<p>如果可以做到，请返回<strong>任何</strong>&nbsp;<code>[i, j]</code>，其中 <code>i+1 &lt; j</code>，这样一来：</p>\n\n<ul>\n\t<li><code>A[0], A[1], ..., A[i]</code>&nbsp;组成第一部分；</li>\n\t<li><code>A[i+1], A[i+2], ..., A[j-1]</code>&nbsp;作为第二部分；</li>\n\t<li><code>A[j], A[j+1], ..., A[A.length - 1]</code> 是第三部分。</li>\n\t<li>这三个部分所表示的二进制值相等。</li>\n</ul>\n\n<p>如果无法做到，就返回&nbsp;<code>[-1, -1]</code>。</p>\n\n<p>注意，在考虑每个部分所表示的二进制时，应当将其看作一个整体。例如，<code>[1,1,0]</code>&nbsp;表示十进制中的&nbsp;<code>6</code>，而不会是&nbsp;<code>3</code>。此外，前导零也是被允许的，所以&nbsp;<code>[0,1,1]</code> 和&nbsp;<code>[1,1]</code>&nbsp;表示相同的值。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[1,0,1,0,1]\n<strong>输出：</strong>[0,3]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输出：</strong>[1,1,0,1,1]\n<strong>输出：</strong>[-1,-1]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>3 &lt;= A.length &lt;= 30000</code></li>\n\t<li><code>A[i] == 0</code>&nbsp;或&nbsp;<code>A[i] == 1</code></li>\n</ol>\n\n<p>&nbsp;</p>\n","tallest-billboard":"<p>你正在安装一个广告牌，并希望它高度最大。这块广告牌将有两个钢制支架，两边各一个。每个钢支架的高度必须相等。</p>\n\n<p>你有一堆可以焊接在一起的钢筋 <code>rods</code>。举个例子，如果钢筋的长度为 1、2 和 3，则可以将它们焊接在一起形成长度为 6 的支架。</p>\n\n<p>返回广告牌的最大可能安装高度。如果没法安装广告牌，请返回 0。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[1,2,3,6]\n<strong>输出：</strong>6\n<strong>解释：</strong>我们有两个不相交的子集 {1,2,3} 和 {6}，它们具有相同的和 sum = 6。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[1,2,3,4,5,6]\n<strong>输出：</strong>10\n<strong>解释：</strong>我们有两个不相交的子集 {2,3,5} 和 {4,6}，它们具有相同的和 sum = 10。</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>[1,2]\n<strong>输出：</strong>0\n<strong>解释：</strong>没法安装广告牌，所以返回 0。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= rods.length &lt;= 20</code></li>\n\t<li><code>1 &lt;= rods[i] &lt;= 1000</code></li>\n\t<li><code>钢筋的长度总和最多为 5000</code></li>\n</ol>\n","regions-cut-by-slashes":"<p>在由 1 x 1 方格组成的 N x N 网格&nbsp;<code>grid</code> 中，每个 1 x 1&nbsp;方块由 <code>/</code>、<code>\\</code> 或空格构成。这些字符会将方块划分为一些共边的区域。</p>\n\n<p>（请注意，反斜杠字符是转义的，因此 <code>\\</code> 用 <code>&quot;\\\\&quot;</code>&nbsp;表示。）。</p>\n\n<p>返回区域的数目。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：\n</strong>[\n&nbsp; &quot; /&quot;,\n&nbsp; &quot;/ &quot;\n]\n<strong>输出：</strong>2\n<strong>解释：</strong>2x2 网格如下：\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/1.png\"></pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：\n</strong>[\n&nbsp; &quot; /&quot;,\n&nbsp; &quot;  &quot;\n]\n<strong>输出：</strong>1\n<strong>解释：</strong>2x2 网格如下：\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/2.png\"></pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：\n</strong>[\n&nbsp; &quot;\\\\/&quot;,\n&nbsp; &quot;/\\\\&quot;\n]\n<strong>输出：</strong>4\n<strong>解释：</strong>（回想一下，因为 \\ 字符是转义的，所以 &quot;\\\\/&quot; 表示 \\/，而 &quot;/\\\\&quot; 表示 /\\。）\n2x2 网格如下：\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/3.png\"></pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：\n</strong>[\n&nbsp; &quot;/\\\\&quot;,\n&nbsp; &quot;\\\\/&quot;\n]\n<strong>输出：</strong>5\n<strong>解释：</strong>（回想一下，因为 \\ 字符是转义的，所以 &quot;/\\\\&quot; 表示 /\\，而 &quot;\\\\/&quot; 表示 \\/。）\n2x2 网格如下：\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/4.png\"></pre>\n\n<p><strong>示例 5：</strong></p>\n\n<pre><strong>输入：\n</strong>[\n&nbsp; &quot;//&quot;,\n&nbsp; &quot;/ &quot;\n]\n<strong>输出：</strong>3\n<strong>解释：</strong>2x2 网格如下：\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/5.png\">\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= grid.length == grid[0].length &lt;= 30</code></li>\n\t<li><code>grid[i][j]</code> 是&nbsp;<code>&#39;/&#39;</code>、<code>&#39;\\&#39;</code>、或&nbsp;<code>&#39; &#39;</code>。</li>\n</ol>\n","array-of-doubled-pairs":"<p>给定一个长度为偶数的整数数组&nbsp;<code>A</code>，只有对&nbsp;<code>A</code>&nbsp;进行重组后可以满足 &ldquo;对于每个 <code>0 &lt;=&nbsp;i &lt; len(A) / 2</code>，都有 <code>A[2 * i + 1] = 2 * A[2 * i]</code>&rdquo;&nbsp;时，返回 <code>true</code>；否则，返回 <code>false</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[3,1,3,6]\n<strong>输出：</strong>false\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[2,1,2,6]\n<strong>输出：</strong>false\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>[4,-2,2,-4]\n<strong>输出：</strong>true\n<strong>解释：</strong>我们可以用 [-2,-4] 和 [2,4] 这两组组成 [-2,-4,2,4] 或是 [2,4,-2,-4]</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>[1,2,4,16,8,4]\n<strong>输出：</strong>false\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= A.length &lt;= 30000</code></li>\n\t<li><code>A.length</code>&nbsp;为偶数</li>\n\t<li><code>-100000 &lt;= A[i] &lt;= 100000</code></li>\n</ol>\n","minimum-area-rectangle":"<p>给定在 xy 平面上的一组点，确定由这些点组成的矩形的最小面积，其中矩形的边平行于 x 轴和 y 轴。</p>\n\n<p>如果没有任何矩形，就返回 0。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[[1,1],[1,3],[3,1],[3,3],[2,2]]\n<strong>输出：</strong>4\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]\n<strong>输出：</strong>2\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= points.length &lt;= 500</code></li>\n\t<li><code>0 &lt;=&nbsp;points[i][0] &lt;=&nbsp;40000</code></li>\n\t<li><code>0 &lt;=&nbsp;points[i][1] &lt;=&nbsp;40000</code></li>\n\t<li>所有的点都是不同的。</li>\n</ol>\n","number-of-recent-calls":"<p>写一个&nbsp;<code>RecentCounter</code>&nbsp;类来计算最近的请求。</p>\n\n<p>它只有一个方法：<code>ping(int t)</code>，其中&nbsp;<code>t</code>&nbsp;代表以毫秒为单位的某个时间。</p>\n\n<p>返回从 3000 毫秒前到现在的&nbsp;<code>ping</code>&nbsp;数。</p>\n\n<p>任何处于&nbsp;<code>[t - 3000, t]</code>&nbsp;时间范围之内的 <code>ping</code>&nbsp;都将会被计算在内，包括当前（指 <code>t</code>&nbsp;时刻）的 <code>ping</code>。</p>\n\n<p>保证每次对 <code>ping</code> 的调用都使用比之前更大的 <code>t</code> 值。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>inputs = [&quot;RecentCounter&quot;,&quot;ping&quot;,&quot;ping&quot;,&quot;ping&quot;,&quot;ping&quot;], inputs = [[],[1],[100],[3001],[3002]]\n<strong>输出：</strong>[null,1,2,3,3]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>每个测试用例最多调用&nbsp;<code>10000</code>&nbsp;次&nbsp;<code>ping</code>。</li>\n\t<li>每个测试用例会使用严格递增的 <code>t</code> 值来调用&nbsp;<code>ping</code>。</li>\n\t<li>每次调用 <code>ping</code>&nbsp;都有&nbsp;<code>1 &lt;= t &lt;= 10^9</code>。</li>\n</ol>\n\n<p>&nbsp;</p>\n","range-sum-of-bst":"<p>给定二叉搜索树的根结点&nbsp;<code>root</code>，返回 <code>L</code> 和 <code>R</code>（含）之间的所有结点的值的和。</p>\n\n<p>二叉搜索树保证具有唯一的值。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>root = [10,5,15,3,7,null,18], L = 7, R = 15\n<strong>输出：</strong>32\n</pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre><strong>输入：</strong>root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10\n<strong>输出：</strong>23\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>树中的结点数量最多为&nbsp;<code>10000</code>&nbsp;个。</li>\n\t<li>最终的答案保证小于&nbsp;<code>2^31</code>。</li>\n</ol>\n","minimum-increment-to-make-array-unique":"<p>给定整数数组 A，每次 <em>move</em> 操作将会选择任意&nbsp;<code>A[i]</code>，并将其递增&nbsp;<code>1</code>。</p>\n\n<p>返回使 <code>A</code>&nbsp;中的每个值都是唯一的最少操作次数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入：</strong>[1,2,2]\n<strong>输出：</strong>1\n<strong>解释：</strong>经过一次 <em>move</em> 操作，数组将变为 [1, 2, 3]。</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入：</strong>[3,2,1,2,1,7]\n<strong>输出：</strong>6\n<strong>解释：</strong>经过 6 次 <em>move</em> 操作，数组将变为 [3, 4, 1, 2, 5, 7]。\n可以看出 5 次或 5 次以下的 <em>move</em> 操作是不能让数组的每个值唯一的。\n</pre>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= A.length &lt;= 40000</code></li>\n\t<li><code>0 &lt;= A[i] &lt; 40000</code></li>\n</ol>\n","long-pressed-name":"<p>你的朋友正在使用键盘输入他的名字&nbsp;<code>name</code>。偶尔，在键入字符&nbsp;<code>c</code>&nbsp;时，按键可能会被<em>长按</em>，而字符可能被输入 1 次或多次。</p>\n\n<p>你将会检查键盘输入的字符&nbsp;<code>typed</code>。如果它对应的可能是你的朋友的名字（其中一些字符可能被长按），那么就返回&nbsp;<code>True</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>name = &quot;alex&quot;, typed = &quot;aaleex&quot;\n<strong>输出：</strong>true\n<strong>解释：</strong>&#39;alex&#39; 中的 &#39;a&#39; 和 &#39;e&#39; 被长按。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>name = &quot;saeed&quot;, typed = &quot;ssaaedd&quot;\n<strong>输出：</strong>false\n<strong>解释：</strong>&#39;e&#39; 一定需要被键入两次，但在 typed 的输出中不是这样。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>name = &quot;leelee&quot;, typed = &quot;lleeelee&quot;\n<strong>输出：</strong>true\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>name = &quot;laiden&quot;, typed = &quot;laiden&quot;\n<strong>输出：</strong>true\n<strong>解释：</strong>长按名字中的字符并不是必要的。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>name.length &lt;= 1000</code></li>\n\t<li><code>typed.length &lt;= 1000</code></li>\n\t<li><code>name</code> 和&nbsp;<code>typed</code>&nbsp;的字符都是小写字母。</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n","flip-equivalent-binary-trees":"<p>我们可以为二叉树 T 定义一个翻转操作，如下所示：选择任意节点，然后交换它的左子树和右子树。</p>\n\n<p>只要经过一定次数的翻转操作后，能使 X 等于 Y，我们就称二叉树 X <em>翻转等价</em>于二叉树 Y。</p>\n\n<p>编写一个判断两个二叉树是否是<em>翻转等价</em>的函数。这些树由根节点&nbsp;<code>root1</code> 和 <code>root2</code>&nbsp;给出。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]\n<strong>输出：</strong>true\n<strong>解释：</strong>We flipped at nodes with values 1, 3, and 5.\n<img alt=\"Flipped Trees Diagram\" src=\"https://assets.leetcode.com/uploads/2018/11/29/tree_ex.png\" style=\"\">\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>每棵树最多有&nbsp;<code>100</code>&nbsp;个节点。</li>\n\t<li>每棵树中的每个值都是唯一的、在 <code>[0, 99]</code>&nbsp;范围内的整数。</li>\n</ol>\n\n<p>&nbsp;</p>\n","least-operators-to-express-number":"<p>给定一个正整数 <code>x</code>，我们将会写出一个形如&nbsp;<code>x (op1) x (op2) x (op3) x ...</code>&nbsp;的表达式，其中每个运算符&nbsp;<code>op1</code>，<code>op2</code>，&hellip; 可以是加、减、乘、除（<code>+</code>，<code>-</code>，<code>*</code>，或是&nbsp;<code>/</code>）之一。例如，对于&nbsp;<code>x = 3</code>，我们可以写出表达式&nbsp;<code>3 * 3 / 3 + 3 - 3</code>，该式的值为 3 。</p>\n\n<p>在写这样的表达式时，我们需要遵守下面的惯例：</p>\n\n<ol>\n\t<li>除运算符（<code>/</code>）返回有理数。</li>\n\t<li>任何地方都没有括号。</li>\n\t<li>我们使用通常的操作顺序：乘法和除法发生在加法和减法之前。</li>\n\t<li>不允许使用一元否定运算符（<code>-</code>）。例如，&ldquo;<code>x - x</code>&rdquo; 是一个有效的表达式，因为它只使用减法，但是 &ldquo;<code>-x + x</code>&rdquo; 不是，因为它使用了否定运算符。&nbsp;</li>\n</ol>\n\n<p>我们希望编写一个能使表达式等于给定的目标值 <code>target</code> 且运算符最少的表达式。返回所用运算符的最少数量。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>x = 3, target = 19\n<strong>输出：</strong>5\n<strong>解释：</strong>3 * 3 + 3 * 3 + 3 / 3 。表达式包含 5 个运算符。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>x = 5, target = 501\n<strong>输出：</strong>8\n<strong>解释：</strong>5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5 。表达式包含 8 个运算符。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>x = 100, target = 100000000\n<strong>输出：</strong>3\n<strong>解释：</strong>100 * 100 * 100 * 100 。表达式包含 3 个运算符。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= x &lt;= 100</code></li>\n\t<li><code>1 &lt;= target &lt;= 2 * 10^8</code></li>\n</ul>\n\n<p>&nbsp;</p>\n","minimum-area-rectangle-ii":"<p>给定在 xy 平面上的一组点，确定由这些点组成的任何矩形的最小面积，其中矩形的边<strong>不一定平行于</strong> x 轴和 y 轴。</p>\n\n<p>如果没有任何矩形，就返回 0。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/22/1a.png\" style=\"height: 151px; width: 150px;\"></strong></p>\n\n<pre><strong>输入：</strong>[[1,2],[2,1],[1,0],[0,1]]\n<strong>输出：</strong>2.00000\n<strong>解释：</strong>最小面积的矩形出现在 [1,2],[2,1],[1,0],[0,1] 处，面积为 2。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/23/2.png\" style=\"height: 94px; width: 150px;\"></p>\n\n<pre><strong>输入：</strong>[[0,1],[2,1],[1,1],[1,0],[2,0]]\n<strong>输出：</strong>1.00000\n<strong>解释：</strong>最小面积的矩形出现在 [1,0],[1,1],[2,1],[2,0] 处，面积为 1。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/23/3.png\" style=\"height: 94px; width: 150px;\"></p>\n\n<pre><strong>输入：</strong>[[0,3],[1,2],[3,1],[1,3],[2,1]]\n<strong>输出：</strong>0\n<strong>解释：</strong>没法从这些点中组成任何矩形。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/21/4c.png\" style=\"height: 155px; width: 160px;\"></strong></p>\n\n<pre><strong>输入：</strong>[[3,1],[1,1],[0,1],[2,1],[3,3],[3,2],[0,2],[2,3]]\n<strong>输出：</strong>2.00000\n<strong>解释：</strong>最小面积的矩形出现在 [2,1],[2,3],[3,3],[3,1] 处，面积为 2。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= points.length &lt;= 50</code></li>\n\t<li><code>0 &lt;=&nbsp;points[i][0] &lt;=&nbsp;40000</code></li>\n\t<li><code>0 &lt;=&nbsp;points[i][1] &lt;=&nbsp;40000</code></li>\n\t<li>所有的点都是不同的。</li>\n\t<li>与真实值误差不超过 <code>10^-5</code>&nbsp;的答案将视为正确结果。</li>\n</ol>\n","minimize-malware-spread-ii":"<p>(这个问题与&nbsp;<em>尽量减少恶意软件的传播&nbsp;</em>是一样的，不同之处用粗体表示。)</p>\n\n<p>在节点网络中，只有当&nbsp;<code>graph[i][j] = 1</code>&nbsp;时，每个节点&nbsp;<code>i</code>&nbsp;能够直接连接到另一个节点&nbsp;<code>j</code>。</p>\n\n<p>一些节点&nbsp;<code>initial</code>&nbsp;最初被恶意软件感染。只要两个节点直接连接，且其中至少一个节点受到恶意软件的感染，那么两个节点都将被恶意软件感染。这种恶意软件的传播将继续，直到没有更多的节点可以被这种方式感染。</p>\n\n<p>假设&nbsp;<code>M(initial)</code>&nbsp;是在恶意软件停止传播之后，整个网络中感染恶意软件的最终节点数。</p>\n\n<p>我们可以从初始列表中删除一个节点，<strong>并完全移除该节点以及从该节点到任何其他节点的任何连接。</strong>如果移除这一节点将最小化&nbsp;<code>M(initial)</code>，&nbsp;则返回该节点。如果有多个节点满足条件，就返回索引最小的节点。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输出：</strong>graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\n<strong>输入：</strong>0\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]\n<strong>输出：</strong>1\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]\n<strong>输出：</strong>1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt; graph.length = graph[0].length &lt;= 300</code></li>\n\t<li><code>0 &lt;= graph[i][j] == graph[j][i] &lt;= 1</code></li>\n\t<li><code>graph[i][i] = 1</code></li>\n\t<li><code>1 &lt;= initial.length &lt; graph.length</code></li>\n\t<li><code>0 &lt;= initial[i] &lt; graph.length</code></li>\n</ol>\n","valid-mountain-array":"<p>给定一个整数数组&nbsp;<code>A</code>，如果它是有效的山脉数组就返回&nbsp;<code>true</code>，否则返回 <code>false</code>。</p>\n\n<p>让我们回顾一下，如果 A 满足下述条件，那么它是一个山脉数组：</p>\n\n<ul>\n\t<li><code>A.length &gt;= 3</code></li>\n\t<li>在&nbsp;<code>0 &lt; i&nbsp;&lt; A.length - 1</code>&nbsp;条件下，存在&nbsp;<code>i</code>&nbsp;使得：\n\t<ul>\n\t\t<li><code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i] </code></li>\n\t\t<li><code>A[i] &gt; A[i+1] &gt; ... &gt; A[B.length - 1]</code></li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[2,1]\n<strong>输出：</strong>false\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[3,5,5]\n<strong>输出：</strong>false\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>[0,3,2,1]\n<strong>输出：</strong>true</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 10000&nbsp;</code></li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n","delete-columns-to-make-sorted":"<p>给定由&nbsp;<code>N</code>&nbsp;个小写字母字符串组成的数组 <code>A</code>，其中每个字符串长度相等。</p>\n\n<p>选取一个删除索引序列，对于 <code>A</code> 中的每个字符串，删除对应每个索引处的字符。 所余下的字符串行从上往下读形成列。</p>\n\n<p>比如，有&nbsp;<code>A = [&quot;abcdef&quot;, &quot;uvwxyz&quot;]</code>，删除索引序列&nbsp;<code>{0, 2, 3}</code>，删除后 <code>A</code>&nbsp;为<code>[&quot;bef&quot;, &quot;vyz&quot;]</code>， <code>A</code>&nbsp;的列分别为<code>[&quot;b&quot;,&quot;v&quot;], [&quot;e&quot;,&quot;y&quot;], [&quot;f&quot;,&quot;z&quot;]</code>。（形式上，第 n&nbsp;列为&nbsp;<code>[A[0][n], A[1][n], ..., A[A.length-1][n]]</code>）。</p>\n\n<p>假设，我们选择了一组删除索引&nbsp;<code>D</code>，那么在执行删除操作之后，<code>A</code> 中所剩余的每一列都必须是 <strong>非降序</strong>&nbsp;排列的，然后请你返回&nbsp;<code>D.length</code>&nbsp;的最小可能值。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;cba&quot;, &quot;daf&quot;, &quot;ghi&quot;]\n<strong>输出：</strong>1\n<strong>解释：</strong>\n当选择 D = {1}，删除后 A 的列为：[&quot;c&quot;,&quot;d&quot;,&quot;g&quot;] 和 [&quot;a&quot;,&quot;f&quot;,&quot;i&quot;]，均为非降序排列。\n若选择 D = {}，那么 A 的列 [&quot;b&quot;,&quot;a&quot;,&quot;h&quot;] 就不是非降序排列了。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;a&quot;, &quot;b&quot;]\n<strong>输出：</strong>0\n<strong>解释：</strong>D = {}\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;zyx&quot;, &quot;wvu&quot;, &quot;tsr&quot;]\n<strong>输出：</strong>3\n<strong>解释：</strong>D = {0, 1, 2}\n</pre>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= A[i].length &lt;= 1000</code></li>\n</ol>\n","number-of-music-playlists":"<p>你的音乐播放器里有&nbsp;<code>N</code>&nbsp;首不同的歌，在旅途中，你的旅伴想要听 <code>L</code>&nbsp;首歌（不一定不同，即，允许歌曲重复）。请你为她按如下规则创建一个播放列表：</p>\n\n<ul>\n\t<li>每首歌至少播放一次。</li>\n\t<li>一首歌只有在其他 <code>K</code> 首歌播放完之后才能再次播放。</li>\n</ul>\n\n<p>返回可以满足要求的播放列表的数量。<strong>由于答案可能非常大，请返回它模&nbsp;<code>10^9 + 7</code>&nbsp;的结果。</strong></p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>N = 3, L = 3, K = 1\n<strong>输出：</strong>6\n<strong>解释：</strong>有 6 种可能的播放列表。[1, 2, 3]，[1, 3, 2]，[2, 1, 3]，[2, 3, 1]，[3, 1, 2]，[3, 2, 1].\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>N = 2, L = 3, K = 0\n<strong>输出：</strong>6\n<strong>解释：</strong>有 6 种可能的播放列表。[1, 1, 2]，[1, 2, 1]，[2, 1, 1]，[2, 2, 1]，[2, 1, 2]，[1, 2, 2]\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>N = 2, L = 3, K = 1\n<strong>输出：</strong>2\n<strong>解释：</strong>有 2 种可能的播放列表。[1, 2, 1]，[2, 1, 2]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= K &lt; N &lt;= L &lt;= 100</code></li>\n</ol>\n","reorder-log-files":"<p>你有一个日志数组 <code>logs</code>。每条日志都是以空格分隔的字串。</p>\n\n<p>对于每条日志，其第一个字为字母数字<em>标识符</em>。然后，要么：</p>\n\n<ul>\n\t<li>标识符后面的每个字将仅由小写字母组成，或；</li>\n\t<li>标识符后面的每个字将仅由数字组成。</li>\n</ul>\n\n<p>我们将这两种日志分别称为字母日志和数字日志。保证每个日志在其标识符后面至少有一个字。</p>\n\n<p>将日志重新排序，使得所有字母日志都排在数字日志之前。字母日志按字母顺序排序，忽略标识符，标识符仅用于表示关系。数字日志应该按原来的顺序排列。</p>\n\n<p>返回日志的最终顺序。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 ：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;a1 9 2 3 1&quot;,&quot;g1 act car&quot;,&quot;zo4 4 7&quot;,&quot;ab1 off key dog&quot;,&quot;a8 act zoo&quot;]\n<strong>输出：</strong>[&quot;g1 act car&quot;,&quot;a8 act zoo&quot;,&quot;ab1 off key dog&quot;,&quot;a1 9 2 3 1&quot;,&quot;zo4 4 7&quot;]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= logs.length &lt;= 100</code></li>\n\t<li><code>3 &lt;= logs[i].length &lt;= 100</code></li>\n\t<li><code>logs[i]</code>&nbsp;保证有一个标识符，并且标识符后面有一个字。</li>\n</ol>\n","numbers-with-same-consecutive-differences":"<p>返回所有长度为 <code>N</code> 且满足其每两个连续位上的数字之间的差的绝对值为 <code>K</code>&nbsp;的<strong>非负整数</strong>。</p>\n\n<p>请注意，<strong>除了</strong>数字 <code>0</code> 本身之外，答案中的每个数字都<strong>不能</strong>有前导零。例如，<code>01</code>&nbsp;因为有一个前导零，所以是无效的；但 <code>0</code>&nbsp;是有效的。</p>\n\n<p>你可以按任何顺序返回答案。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>N = 3, K = 7\n<strong>输出：</strong>[181,292,707,818,929]\n<strong>解释：</strong>注意，070 不是一个有效的数字，因为它有前导零。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>N = 2, K = 1\n<strong>输出：</strong>[10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 9</code></li>\n\t<li><code>0 &lt;= K &lt;= 9</code></li>\n</ol>\n","minimum-add-to-make-parentheses-valid":"<p>给定一个由&nbsp;<code>&#39;(&#39;</code>&nbsp;和&nbsp;<code>&#39;)&#39;</code>&nbsp;括号组成的字符串 <code>S</code>，我们需要添加最少的括号（ <code>&#39;(&#39;</code>&nbsp;或是&nbsp;<code>&#39;)&#39;</code>，可以在任何位置），以使得到的括号字符串有效。</p>\n\n<p>从形式上讲，只有满足下面几点之一，括号字符串才是有效的：</p>\n\n<ul>\n\t<li>它是一个空字符串，或者</li>\n\t<li>它可以被写成&nbsp;<code>AB</code>&nbsp;（<code>A</code>&nbsp;与&nbsp;<code>B</code>&nbsp;连接）, 其中&nbsp;<code>A</code> 和&nbsp;<code>B</code>&nbsp;都是有效字符串，或者</li>\n\t<li>它可以被写作&nbsp;<code>(A)</code>，其中&nbsp;<code>A</code>&nbsp;是有效字符串。</li>\n</ul>\n\n<p>给定一个括号字符串，返回为使结果字符串有效而必须添加的最少括号数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>&quot;())&quot;\n<strong>输出：</strong>1\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>&quot;(((&quot;\n<strong>输出：</strong>3\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>&quot;()&quot;\n<strong>输出：</strong>0\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>&quot;()))((&quot;\n<strong>输出：</strong>4</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>S.length &lt;= 1000</code></li>\n\t<li><code>S</code> 只包含&nbsp;<code>&#39;(&#39;</code> 和&nbsp;<code>&#39;)&#39;</code>&nbsp;字符。</li>\n</ol>\n\n<p>&nbsp;</p>\n","beautiful-array":"<p>对于某些固定的&nbsp;<code>N</code>，如果数组&nbsp;<code>A</code>&nbsp;是整数&nbsp;<code>1, 2, ..., N</code>&nbsp;组成的排列，使得：</p>\n\n<p>对于每个&nbsp;<code>i &lt; j</code>，都<strong>不存在</strong>&nbsp;<code>k</code> 满足&nbsp;<code>i &lt; k &lt; j</code>&nbsp;使得&nbsp;<code>A[k] * 2 = A[i] + A[j]</code>。</p>\n\n<p>那么数组 <code>A</code>&nbsp;是漂亮数组。</p>\n\n<p>&nbsp;</p>\n\n<p>给定&nbsp;<code>N</code>，返回<strong>任意</strong>漂亮数组&nbsp;<code>A</code>（保证存在一个）。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>4\n<strong>输出：</strong>[2,1,4,3]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>5\n<strong>输出：</strong>[3,1,2,5,4]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= N &lt;= 1000</code></li>\n</ul>\n\n<p>&nbsp;</p>\n","binary-subarrays-with-sum":"<p>在由若干&nbsp;<code>0</code>&nbsp;和&nbsp;<code>1</code>&nbsp; 组成的数组&nbsp;<code>A</code>&nbsp;中，有多少个和为 <code>S</code>&nbsp;的<strong>非空</strong>子数组。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>A = [1,0,1,0,1], S = 2\n<strong>输出：</strong>4\n<strong>解释：</strong>\n如下面黑体所示，有 4 个满足题目要求的子数组：\n[<strong>1,0,1</strong>,0,1]\n[<strong>1,0,1,0</strong>,1]\n[1,<strong>0,1,0,1</strong>]\n[1,0,<strong>1,0,1</strong>]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>A.length &lt;= 30000</code></li>\n\t<li><code>0 &lt;= S &lt;= A.length</code></li>\n\t<li><code>A[i]</code>&nbsp;为&nbsp;<code>0</code>&nbsp;或&nbsp;<code>1</code></li>\n</ol>\n","shortest-bridge":"<p>在给定的二维二进制数组&nbsp;<code>A</code>&nbsp;中，存在两座岛。（岛是由四面相连的 <code>1</code> 形成的一个最大组。）</p>\n\n<p>现在，我们可以将&nbsp;<code>0</code>&nbsp;变为&nbsp;<code>1</code>，以使两座岛连接起来，变成一座岛。</p>\n\n<p>返回必须翻转的&nbsp;<code>0</code> 的最小数目。（可以保证答案至少是 1。）</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[[0,1],[1,0]]\n<strong>输出：</strong>1\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[[0,1,0],[0,0,0],[0,0,1]]\n<strong>输出：</strong>2\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>[[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]\n<strong>输出：</strong>1</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length =&nbsp;A[0].length &lt;= 100</code></li>\n\t<li><code>A[i][j] == 0</code> 或&nbsp;<code>A[i][j] == 1</code></li>\n</ol>\n\n<p>&nbsp;</p>\n","largest-time-for-given-digits":"<p>给定一个由 4 位数字组成的数组，返回可以设置的符合 24 小时制的最大时间。</p>\n\n<p>最小的 24 小时制时间是&nbsp;00:00，而最大的是&nbsp;23:59。从 00:00 （午夜）开始算起，过得越久，时间越大。</p>\n\n<p>以长度为 5 的字符串返回答案。如果不能确定有效时间，则返回空字符串。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[1,2,3,4]\n<strong>输出：</strong>&quot;23:41&quot;\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[5,5,5,5]\n<strong>输出：</strong>&quot;&quot;\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>A.length == 4</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 9</code></li>\n</ol>\n","complete-binary-tree-inserter":"<p>完全二叉树是每一层（除最后一层外）都是完全填充（即，结点数达到最大）的，并且所有的结点都尽可能地集中在左侧。</p>\n\n<p>设计一个用完全二叉树初始化的数据结构&nbsp;<code>CBTInserter</code>，它支持以下几种操作：</p>\n\n<ul>\n\t<li><code>CBTInserter(TreeNode root)</code>&nbsp;使用头结点为&nbsp;<code>root</code>&nbsp;的给定树初始化该数据结构；</li>\n\t<li><code>CBTInserter.insert(int v)</code> 将&nbsp;<code>TreeNode</code>&nbsp;插入到存在值为&nbsp;<code>node.val =&nbsp;v</code>&nbsp; 的树中以使其保持完全二叉树的状态，<strong>并返回插入的 <code>TreeNode</code>&nbsp;的父结点的值</strong>；</li>\n\t<li><code>CBTInserter.get_root()</code> 将返回树的头结点。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>inputs = [&quot;CBTInserter&quot;,&quot;insert&quot;,&quot;get_root&quot;], inputs = [[[1]],[2],[]]\n<strong>输出：</strong>[null,1,[1,2]]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>inputs = [&quot;CBTInserter&quot;,&quot;insert&quot;,&quot;insert&quot;,&quot;get_root&quot;], inputs = [[[1,2,3,4,5,6]],[7],[8],[]]\n<strong>输出：</strong>[null,3,4,[1,2,3,4,5,6,7,8]]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>最初给定的树是完全二叉树，且包含&nbsp;<code>1</code>&nbsp;到&nbsp;<code>1000</code>&nbsp;个结点。</li>\n\t<li>每个测试用例最多调用&nbsp;<code>CBTInserter.insert</code>&nbsp; 操作&nbsp;<code>10000</code>&nbsp;次。</li>\n\t<li>给定结点或插入结点的每个值都在&nbsp;<code>0</code>&nbsp;到&nbsp;<code>5000</code>&nbsp;之间。</li>\n</ol>\n","bag-of-tokens":"<p>你的初始能量为&nbsp;<code>P</code>，初始分数为&nbsp;<code>0</code>，只有一包令牌。</p>\n\n<p>令牌的值为&nbsp;<code>token[i]</code>，每个令牌最多只能使用一次，可能的两种使用方法如下：</p>\n\n<ul>\n\t<li>如果你至少有&nbsp;<code>token[i]</code>&nbsp;点能量，可以将令牌置为正面朝上，失去&nbsp;<code>token[i]</code>&nbsp;点能量，并得到&nbsp;<code>1</code>&nbsp;分。</li>\n\t<li>如果我们至少有&nbsp;<code>1</code>&nbsp;分，可以将令牌置为反面朝上，获得&nbsp;<code>token[i]</code>&nbsp;点能量，并失去&nbsp;<code>1</code>&nbsp;分。</li>\n</ul>\n\n<p>在使用任意数量的令牌后，返回我们可以得到的最大分数。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>tokens = [100], P = 50\n<strong>输出：</strong>0\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>tokens = [100,200], P = 150\n<strong>输出：</strong>1\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>tokens = [100,200,300,400], P = 200\n<strong>输出：</strong>2\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>tokens.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= tokens[i] &lt; 10000</code></li>\n\t<li><code>0 &lt;= P &lt; 10000</code></li>\n</ol>\n","find-the-shortest-superstring":"<p>给定一个字符串数组 <code>A</code>，找到以&nbsp;<code>A</code>&nbsp;中每个字符串作为子字符串的最短字符串。</p>\n\n<p>我们可以假设 <code>A</code> 中没有字符串是 <code>A</code> 中另一个字符串的子字符串。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;alex&quot;,&quot;loves&quot;,&quot;leetcode&quot;]\n<strong>输出：</strong>&quot;alexlovesleetcode&quot;\n<strong>解释：</strong>&quot;alex&quot;，&quot;loves&quot;，&quot;leetcode&quot; 的所有排列都会被接受。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;catg&quot;,&quot;ctaagt&quot;,&quot;gcta&quot;,&quot;ttca&quot;,&quot;atgcatc&quot;]\n<strong>输出：</strong>&quot;gctaagttcatgcatc&quot;</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 12</code></li>\n\t<li><code>1 &lt;= A[i].length &lt;= 20</code></li>\n</ol>\n\n<p>&nbsp;</p>\n","minimum-falling-path-sum":"<p>给定一个<strong>方形</strong>整数数组&nbsp;<code>A</code>，我们想要得到通过 <code>A</code> 的<em>下降路径</em>的<strong>最小</strong>和。</p>\n\n<p>下降路径可以从第一行中的任何元素开始，并从每一行中选择一个元素。在下一行选择的元素和当前行所选元素最多相隔一列。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>[[1,2,3],[4,5,6],[7,8,9]]\n<strong>输出：</strong>12\n<strong>解释：</strong>\n可能的下降路径有：\n</pre>\n\n<ul>\n\t<li><code>[1,4,7], [1,4,8], [1,5,7], [1,5,8], [1,5,9]</code></li>\n\t<li><code>[2,4,7], [2,4,8], [2,5,7], [2,5,8], [2,5,9], [2,6,8], [2,6,9]</code></li>\n\t<li><code>[3,5,7], [3,5,8], [3,5,9], [3,6,8], [3,6,9]</code></li>\n</ul>\n\n<p>和最小的下降路径是&nbsp;<code>[1,4,7]</code>，所以答案是&nbsp;<code>12</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length == A[0].length &lt;= 100</code></li>\n\t<li><code>-100 &lt;= A[i][j] &lt;= 100</code></li>\n</ol>\n","knight-dialer":"<p>国际象棋中的骑士可以按下图所示进行移动：</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/11/03/knight.png\" style=\"height: 150px; width: 150px;\">&nbsp;.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/11/03/keypad.png\" style=\"height: 150px; width: 134px;\"></p>\n\n<p><br>\n这一次，我们将&nbsp;&ldquo;骑士&rdquo; 放在电话拨号盘的任意数字键（如上图所示）上，接下来，骑士将会跳&nbsp;N-1 步。每一步必须是从一个数字键跳到另一个数字键。</p>\n\n<p>每当它落在一个键上（包括骑士的初始位置），都会拨出键所对应的数字，总共按下&nbsp;<code>N</code> 位数字。</p>\n\n<p>你能用这种方式拨出多少个不同的号码？</p>\n\n<p>因为答案可能很大，<strong>所以输出答案模&nbsp;<code>10^9 + 7</code></strong>。</p>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>1\n<strong>输出：</strong>10\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>2\n<strong>输出：</strong>20\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>3\n<strong>输出：</strong>46\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= N &lt;= 5000</code></li>\n</ul>\n","reveal-cards-in-increasing-order":"<p>牌组中的每张卡牌都对应有一个唯一的整数。你可以按你想要的顺序对这套卡片进行排序。</p>\n\n<p>最初，这些卡牌在牌组里是正面朝下的（即，未显示状态）。</p>\n\n<p>现在，重复执行以下步骤，直到显示所有卡牌为止：</p>\n\n<ol>\n\t<li>从牌组顶部抽一张牌，显示它，然后将其从牌组中移出。</li>\n\t<li>如果牌组中仍有牌，则将下一张处于牌组顶部的牌放在牌组的底部。</li>\n\t<li>如果仍有未显示的牌，那么返回步骤 1。否则，停止行动。</li>\n</ol>\n\n<p>返回能以<strong>递增顺序</strong>显示卡牌的牌组顺序。</p>\n\n<p>答案中的第一张牌被认为处于牌堆顶部。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>[17,13,11,2,3,5,7]\n<strong>输出：</strong>[2,13,3,11,5,17,7]\n<strong>解释：\n</strong>我们得到的牌组顺序为 [17,13,11,2,3,5,7]（这个顺序不重要），然后将其重新排序。\n重新排序后，牌组以 [2,13,3,11,5,17,7] 开始，其中 2 位于牌组的顶部。\n我们显示 2，然后将 13 移到底部。牌组现在是 [3,11,5,17,7,13]。\n我们显示 3，并将 11 移到底部。牌组现在是 [5,17,7,13,11]。\n我们显示 5，然后将 17 移到底部。牌组现在是 [7,13,11,17]。\n我们显示 7，并将 13 移到底部。牌组现在是 [11,17,13]。\n我们显示 11，然后将 17 移到底部。牌组现在是 [13,17]。\n我们展示 13，然后将 17 移到底部。牌组现在是 [17]。\n我们显示 17。\n由于所有卡片都是按递增顺序排列显示的，所以答案是正确的。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= A[i] &lt;= 10^6</code></li>\n\t<li>对于所有的&nbsp;<code>i != j</code>，<code>A[i] != A[j]</code></li>\n</ol>\n","largest-component-size-by-common-factor":"<p>给定一个由不同正整数的组成的非空数组 <code>A</code>，考虑下面的图：</p>\n\n<ul>\n\t<li>有&nbsp;<code>A.length</code>&nbsp;个节点，按从&nbsp;<code>A[0]</code>&nbsp;到&nbsp;<code>A[A.length - 1]</code>&nbsp;标记；</li>\n\t<li>只有当 <code>A[i]</code> 和 <code>A[j]</code> 共用一个大于 1 的公因数时，<code>A[i]</code>&nbsp;和 <code>A[j]</code> 之间才有一条边。</li>\n</ul>\n\n<p>返回图中最大连通组件的大小。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[4,6,15,35]\n<strong>输出：</strong>4\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-uploads/uploads/2018/12/01/ex1.png\" style=\"height: 37px; width: 255px;\"><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/01/ex1.png\" style=\"height: 50px; width: 257px;\">\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[20,50,9,63]\n<strong>输出：</strong>2\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/01/ex2.png\" style=\"height: 50px; width: 293px;\">\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>[2,3,6,7,4,12,21,39]\n<strong>输出：</strong>8\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/01/ex3.png\" style=\"height: 180px; width: 346px;\">\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 20000</code></li>\n\t<li><code>1 &lt;= A[i] &lt;= 100000</code></li>\n</ol>\n","binary-tree-cameras":"<p>给定一个二叉树，我们在树的节点上安装摄像头。</p>\n\n<p>节点上的每个摄影头都可以监视<strong>其父对象、自身及其直接子对象。</strong></p>\n\n<p>计算监控树的所有节点所需的最小摄像头数量。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/bst_cameras_01.png\" style=\"height: 163px; width: 138px;\"></p>\n\n<pre><strong>输入：</strong>[0,0,null,0,0]\n<strong>输出：</strong>1\n<strong>解释：</strong>如图所示，一台摄像头足以监控所有节点。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/bst_cameras_02.png\" style=\"height: 312px; width: 139px;\"></p>\n\n<pre><strong>输入：</strong>[0,0,null,0,null,0,null,null,0]\n<strong>输出：</strong>2\n<strong>解释：</strong>需要至少两个摄像头来监视树的所有节点。 上图显示了摄像头放置的有效位置之一。\n</pre>\n\n<p><br>\n<strong>提示：</strong></p>\n\n<ol>\n\t<li>给定树的节点数的范围是&nbsp;<code>[1, 1000]</code>。</li>\n\t<li>每个节点的值都是 0。</li>\n</ol>\n","sort-array-by-parity-ii":"<p>给定一个非负整数数组&nbsp;<code>A</code>， A 中一半整数是奇数，一半整数是偶数。</p>\n\n<p>对数组进行排序，以便当&nbsp;<code>A[i]</code> 为奇数时，<code>i</code>&nbsp;也是奇数；当&nbsp;<code>A[i]</code>&nbsp;为偶数时， <code>i</code> 也是偶数。</p>\n\n<p>你可以返回任何满足上述条件的数组作为答案。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>[4,2,5,7]\n<strong>输出：</strong>[4,5,2,7]\n<strong>解释：</strong>[4,7,2,5]，[2,5,4,7]，[2,7,4,5] 也会被接受。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= A.length &lt;= 20000</code></li>\n\t<li><code>A.length % 2 == 0</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 1000</code></li>\n</ol>\n\n<p>&nbsp;</p>\n","most-stones-removed-with-same-row-or-column":"<p>在二维平面上，我们将石头放置在一些整数坐标点上。每个坐标点上最多只能有一块石头。<br>\n<br>\n现在，<em>move</em> 操作将会移除与网格上的某一块石头共享一列或一行的一块石头。<br>\n<br>\n我们最多能执行多少次 <em>move</em> 操作？</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]\n<strong>输出：</strong>5\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]\n<strong>输出：</strong>3\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>stones = [[0,0]]\n<strong>输出：</strong>0\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= stones.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= stones[i][j] &lt; 10000</code></li>\n</ol>\n","vowel-spellchecker":"<p>在给定单词列表&nbsp;<code>wordlist</code>&nbsp;的情况下，我们希望实现一个拼写检查器，将查询单词转换为正确的单词。</p>\n\n<p>对于给定的查询单词&nbsp;<code>query</code>，拼写检查器将会处理两类拼写错误：</p>\n\n<ul>\n\t<li>大小写：如果查询匹配单词列表中的某个单词（<strong>不区分大小写</strong>），则返回的正确单词与单词列表中的大小写相同。\n\n\t<ul>\n\t\t<li>例如：<code>wordlist = [&quot;yellow&quot;]</code>, <code>query = &quot;YellOw&quot;</code>: <code>correct = &quot;yellow&quot;</code></li>\n\t\t<li>例如：<code>wordlist = [&quot;Yellow&quot;]</code>, <code>query = &quot;yellow&quot;</code>: <code>correct = &quot;Yellow&quot;</code></li>\n\t\t<li>例如：<code>wordlist = [&quot;yellow&quot;]</code>, <code>query = &quot;yellow&quot;</code>: <code>correct = &quot;yellow&quot;</code></li>\n\t</ul>\n\t</li>\n\t<li>元音错误：如果在将查询单词中的元音（&lsquo;a&rsquo;、&lsquo;e&rsquo;、&lsquo;i&rsquo;、&lsquo;o&rsquo;、&lsquo;u&rsquo;）分别替换为任何元音后，能与单词列表中的单词匹配（<strong>不区分大小写</strong>），则返回的正确单词与单词列表中的匹配项大小写相同。\n\t<ul>\n\t\t<li>例如：<code>wordlist = [&quot;YellOw&quot;]</code>, <code>query = &quot;yollow&quot;</code>: <code>correct = &quot;YellOw&quot;</code></li>\n\t\t<li>例如：<code>wordlist = [&quot;YellOw&quot;]</code>, <code>query = &quot;yeellow&quot;</code>: <code>correct = &quot;&quot;</code> （无匹配项）</li>\n\t\t<li>例如：<code>wordlist = [&quot;YellOw&quot;]</code>, <code>query = &quot;yllw&quot;</code>: <code>correct = &quot;&quot;</code> （无匹配项）</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>此外，拼写检查器还按照以下优先级规则操作：</p>\n\n<ul>\n\t<li>当查询完全匹配单词列表中的某个单词（<strong>区分大小写</strong>）时，应返回相同的单词。</li>\n\t<li>当查询匹配到大小写问题的单词时，您应该返回单词列表中的第一个这样的匹配项。</li>\n\t<li>当查询匹配到元音错误的单词时，您应该返回单词列表中的第一个这样的匹配项。</li>\n\t<li>如果该查询在单词列表中没有匹配项，则应返回空字符串。</li>\n</ul>\n\n<p>给出一些查询 <code>queries</code>，返回一个单词答案列表 <code>answer</code>，其中 <code>answer[i]</code> 是由查询 <code>query = queries[i]</code> 得到的正确单词。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>wordlist = [&quot;KiTe&quot;,&quot;kite&quot;,&quot;hare&quot;,&quot;Hare&quot;], queries = [&quot;kite&quot;,&quot;Kite&quot;,&quot;KiTe&quot;,&quot;Hare&quot;,&quot;HARE&quot;,&quot;Hear&quot;,&quot;hear&quot;,&quot;keti&quot;,&quot;keet&quot;,&quot;keto&quot;]\n<strong>输出：</strong>[&quot;kite&quot;,&quot;KiTe&quot;,&quot;KiTe&quot;,&quot;Hare&quot;,&quot;hare&quot;,&quot;&quot;,&quot;&quot;,&quot;KiTe&quot;,&quot;&quot;,&quot;KiTe&quot;]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= wordlist.length &lt;= 5000</code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 5000</code></li>\n\t<li><code>1 &lt;= wordlist[i].length &lt;= 7</code></li>\n\t<li><code>1 &lt;= queries[i].length &lt;= 7</code></li>\n\t<li><code>wordlist</code> 和&nbsp;<code>queries</code>&nbsp;中的所有字符串仅由<strong>英文</strong>字母组成。</li>\n</ol>\n","di-string-match":"<p>给定只含&nbsp;<code>&quot;I&quot;</code>（增大）或 <code>&quot;D&quot;</code>（减小）的字符串&nbsp;<code>S</code>&nbsp;，令&nbsp;<code>N = S.length</code>。</p>\n\n<p>返回&nbsp;<code>[0, 1, ..., N]</code>&nbsp;的任意排列&nbsp;<code>A</code>&nbsp;使得对于所有&nbsp;<code>i = 0,&nbsp;..., N-1</code>，都有：</p>\n\n<ul>\n\t<li>如果&nbsp;<code>S[i] == &quot;I&quot;</code>，那么&nbsp;<code>A[i] &lt; A[i+1]</code></li>\n\t<li>如果&nbsp;<code>S[i] == &quot;D&quot;</code>，那么&nbsp;<code>A[i] &gt; A[i+1]</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输出：</strong>&quot;IDID&quot;\n<strong>输出：</strong>[0,4,1,3,2]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输出：</strong>&quot;III&quot;\n<strong>输出：</strong>[0,1,2,3]\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输出：</strong>&quot;DDI&quot;\n<strong>输出：</strong>[3,2,0,1]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= S.length &lt;= 1000</code></li>\n\t<li><code>S</code> 只包含字符&nbsp;<code>&quot;I&quot;</code>&nbsp;或&nbsp;<code>&quot;D&quot;</code>。</li>\n</ol>\n","flip-string-to-monotone-increasing":"<p>如果一个由&nbsp;<code>&#39;0&#39;</code> 和 <code>&#39;1&#39;</code>&nbsp;组成的字符串，是以一些 <code>&#39;0&#39;</code>（可能没有 <code>&#39;0&#39;</code>）后面跟着一些 <code>&#39;1&#39;</code>（也可能没有 <code>&#39;1&#39;</code>）的形式组成的，那么该字符串是<em>单调递增</em>的。</p>\n\n<p>我们给出一个由字符 <code>&#39;0&#39;</code> 和 <code>&#39;1&#39;</code>&nbsp;组成的字符串&nbsp;<code>S</code>，我们可以将任何&nbsp;<code>&#39;0&#39;</code> 翻转为&nbsp;<code>&#39;1&#39;</code>&nbsp;或者将&nbsp;<code>&#39;1&#39;</code>&nbsp;翻转为&nbsp;<code>&#39;0&#39;</code>。</p>\n\n<p>返回使 <code>S</code> 单调递增的最小翻转次数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>&quot;00110&quot;\n<strong>输出：</strong>1\n<strong>解释：</strong>我们翻转最后一位得到 00111.\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>&quot;010110&quot;\n<strong>输出：</strong>2\n<strong>解释：</strong>我们翻转得到 011111，或者是 000111。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>&quot;00011000&quot;\n<strong>输出：</strong>2\n<strong>解释：</strong>我们翻转得到 00000000。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= S.length &lt;= 20000</code></li>\n\t<li><code>S</code> 中只包含字符&nbsp;<code>&#39;0&#39;</code>&nbsp;和&nbsp;<code>&#39;1&#39;</code></li>\n</ol>\n","3sum-with-multiplicity":"<p>给定一个整数数组&nbsp;<code>A</code>，以及一个整数&nbsp;<code>target</code>&nbsp;作为目标值，返回满足 <code>i &lt; j &lt; k</code> 且&nbsp;<code>A[i] + A[j] + A[k] == target</code>&nbsp;的元组&nbsp;<code>i, j, k</code>&nbsp;的数量。</p>\n\n<p>由于结果会非常大，请返回 <code>结果除以 10^9 + 7 的余数</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>A = [1,1,2,2,3,3,4,4,5,5], target = 8\n<strong>输出：</strong>20\n<strong>解释：</strong>\n按值枚举（A[i]，A[j]，A[k]）：\n(1, 2, 5) 出现 8 次；\n(1, 3, 4) 出现 8 次；\n(2, 2, 4) 出现 2 次；\n(2, 3, 3) 出现 2 次。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>A = [1,1,2,2,2,2], target = 5\n<strong>输出：</strong>12\n<strong>解释：</strong>\nA[i] = 1，A[j] = A[k] = 2 出现 12 次：\n我们从 [1,1] 中选择一个 1，有 2 种情况，\n从 [2,2,2,2] 中选出两个 2，有 6 种情况。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>3 &lt;= A.length &lt;= 3000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 100</code></li>\n\t<li><code>0 &lt;= target &lt;= 300</code></li>\n</ol>\n","stamping-the-sequence":"<p>你想要用<strong>小写字母</strong>组成一个目标字符串&nbsp;<code>target</code>。&nbsp;</p>\n\n<p>开始的时候，序列由&nbsp;<code>target.length</code>&nbsp;个&nbsp;<code>&#39;?&#39;</code>&nbsp;记号组成。而你有一个小写字母印章&nbsp;<code>stamp</code>。</p>\n\n<p>在每个回合，你可以将印章放在序列上，并将序列中的每个字母替换为印章上的相应字母。你最多可以进行&nbsp;<code>10 * target.length</code>&nbsp; 个回合。</p>\n\n<p>举个例子，如果初始序列为 &quot;?????&quot;，而你的印章 <code>stamp</code>&nbsp;是&nbsp;<code>&quot;abc&quot;</code>，那么在第一回合，你可以得到&nbsp;&quot;abc??&quot;、&quot;?abc?&quot;、&quot;??abc&quot;。（请注意，印章必须完全包含在序列的边界内才能盖下去。）</p>\n\n<p>如果可以印出序列，那么返回一个数组，该数组由每个回合中被印下的最左边字母的索引组成。如果不能印出序列，就返回一个空数组。</p>\n\n<p>例如，如果序列是 &quot;ababc&quot;，印章是 <code>&quot;abc&quot;</code>，那么我们就可以返回与操作&nbsp;&quot;?????&quot; -&gt; &quot;abc??&quot; -&gt; &quot;ababc&quot; 相对应的答案 <code>[0, 2]</code>；</p>\n\n<p>另外，如果可以印出序列，那么需要保证可以在 <code>10 * target.length</code>&nbsp;个回合内完成。任何超过此数字的答案将不被接受。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>stamp = &quot;abc&quot;, target = &quot;ababc&quot;\n<strong>输出：</strong>[0,2]\n（[1,0,2] 以及其他一些可能的结果也将作为答案被接受）\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>stamp = &quot;abca&quot;, target = &quot;aabcaca&quot;\n<strong>输出：</strong>[3,0,1]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= stamp.length &lt;= target.length &lt;= 1000</code></li>\n\t<li><code>stamp</code> 和&nbsp;<code>target</code>&nbsp;只包含小写字母。</li>\n</ol>\n","maximum-width-ramp":"<p>给定一个整数数组&nbsp;<code>A</code>，<em>坡</em>是元组&nbsp;<code>(i, j)</code>，其中&nbsp;&nbsp;<code>i &lt; j</code>&nbsp;且&nbsp;<code>A[i] &lt;= A[j]</code>。这样的坡的宽度为&nbsp;<code>j - i</code>。</p>\n\n<p>找出&nbsp;<code>A</code>&nbsp;中的坡的最大宽度，如果不存在，返回 0 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[6,0,8,2,1,5]\n<strong>输出：</strong>4\n<strong>解释：</strong>\n最大宽度的坡为 (i, j) = (1, 5): A[1] = 0 且 A[5] = 5.\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[9,8,1,0,1,9,4,0,4,1]\n<strong>输出：</strong>7\n<strong>解释：</strong>\n最大宽度的坡为 (i, j) = (2, 9): A[2] = 1 且 A[9] = 1.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= A.length &lt;= 50000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 50000</code></li>\n</ol>\n\n<p>&nbsp;</p>\n","minimize-malware-spread":"<p>在节点网络中，只有当 <code>graph[i][j] = 1</code>&nbsp;时，每个节点&nbsp;<code>i</code>&nbsp;能够直接连接到另一个节点 <code>j</code>。</p>\n\n<p>一些节点&nbsp;<code>initial</code>&nbsp;最初被恶意软件感染。只要两个节点直接连接，且其中至少一个节点受到恶意软件的感染，那么两个节点都将被恶意软件感染。这种恶意软件的传播将继续，直到没有更多的节点可以被这种方式感染。</p>\n\n<p>假设 <code>M(initial)</code> 是在恶意软件停止传播之后，整个网络中感染恶意软件的最终节点数。</p>\n\n<p>我们可以从初始列表中删除一个节点。如果移除这一节点将最小化 <code>M(initial)</code>，&nbsp;则返回该节点。如果有多个节点满足条件，就返回索引最小的节点。</p>\n\n<p>请注意，如果某个节点已从受感染节点的列表 <code>initial</code> 中删除，它以后可能仍然因恶意软件传播而受到感染。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\n<strong>输出：</strong>0\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]\n<strong>输出：</strong>0\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]\n<strong>输出：</strong>1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt; graph.length = graph[0].length &lt;= 300</code></li>\n\t<li><code>0 &lt;= graph[i][j] == graph[j][i] &lt;= 1</code></li>\n\t<li><code>graph[i][i] = 1</code></li>\n\t<li><code>1 &lt;= initial.length &lt; graph.length</code></li>\n\t<li><code>0 &lt;= initial[i] &lt; graph.length</code></li>\n</ol>\n","distinct-subsequences-ii":"<p>给定一个字符串&nbsp;<code>S</code>，计算&nbsp;<code>S</code>&nbsp;的不同非空子序列的个数。</p>\n\n<p>因为结果可能很大，所以<strong>返回答案模</strong><strong> <code>10^9 + 7</code></strong>.</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>&quot;abc&quot;\n<strong>输出：</strong>7\n<strong>解释：</strong>7 个不同的子序列分别是 &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;ab&quot;, &quot;ac&quot;, &quot;bc&quot;, 以及 &quot;abc&quot;。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>&quot;aba&quot;\n<strong>输出：</strong>6\n<strong>解释：</strong>6 个不同的子序列分别是 &quot;a&quot;, &quot;b&quot;, &quot;ab&quot;, &quot;ba&quot;, &quot;aa&quot; 以及 &quot;aba&quot;。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>&quot;aaa&quot;\n<strong>输出：</strong>3\n<strong>解释：</strong>3 个不同的子序列分别是 &quot;a&quot;, &quot;aa&quot; 以及 &quot;aaa&quot;。\n</pre>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>S</code>&nbsp;只包含小写字母。</li>\n\t<li><code>1 &lt;= S.length &lt;= 2000</code></li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n","n-repeated-element-in-size-2n-array":"<p>在大小为 <code>2N</code>&nbsp;的数组 <code>A</code>&nbsp;中有 <code>N+1</code> 个不同的元素，其中有一个元素重复了 <code>N</code> 次。</p>\n\n<p>返回重复了 <code>N</code>&nbsp;次的那个元素。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[1,2,3,3]\n<strong>输出：</strong>3\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[2,1,2,5,3,2]\n<strong>输出：</strong>2\n</pre>\n\n<p><strong>示例&nbsp;3：</strong></p>\n\n<pre><strong>输入：</strong>[5,1,5,2,5,3,5,4]\n<strong>输出：</strong>5\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>4 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= A[i] &lt; 10000</code></li>\n\t<li><code>A.length</code>&nbsp;为偶数</li>\n</ol>\n","unique-email-addresses":"<p>每封电子邮件都由一个本地名称和一个域名组成，以 @ 符号分隔。</p>\n\n<p>例如，在&nbsp;<code>alice@leetcode.com</code>中，&nbsp;<code>alice</code>&nbsp;是本地名称，而&nbsp;<code>leetcode.com</code>&nbsp;是域名。</p>\n\n<p>除了小写字母，这些电子邮件还可能包含 <code>&#39;,&#39;</code> 或 <code>&#39;+&#39;</code>。</p>\n\n<p>如果在电子邮件地址的<strong>本地名称</strong>部分中的某些字符之间添加句点（<code>&#39;.&#39;</code>），则发往那里的邮件将会转发到本地名称中没有点的同一地址。例如，<code>&quot;alice.z@leetcode.com&rdquo;</code> 和 <code>&ldquo;alicez@leetcode.com&rdquo;</code>&nbsp;会转发到同一电子邮件地址。 （请注意，此规则不适用于域名。）</p>\n\n<p>如果在<strong>本地名称</strong>中添加加号（<code>&#39;+&#39;</code>），则会忽略第一个加号后面的所有内容。这允许过滤某些电子邮件，例如 <code>m.y+name@email.com</code> 将转发到 <code>my@email.com</code>。 （同样，此规则不适用于域名。）</p>\n\n<p>可以同时使用这两个规则。</p>\n\n<p>给定电子邮件列表 <code>emails</code>，我们会向列表中的每个地址发送一封电子邮件。实际收到邮件的不同地址有多少？</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;test.email+alex@leetcode.com&quot;,&quot;test.e.mail+bob.cathy@leetcode.com&quot;,&quot;testemail+david@lee.tcode.com&quot;]\n<strong>输出：</strong>2\n<strong>解释：</strong>实际收到邮件的是 &quot;testemail@leetcode.com&quot; 和 &quot;testemail@lee.tcode.com&quot;。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= emails[i].length&nbsp;&lt;= 100</code></li>\n\t<li><code>1 &lt;= emails.length &lt;= 100</code></li>\n\t<li>每封 <code>emails[i]</code> 都包含有且仅有一个 <code>&#39;@&#39;</code> 字符。</li>\n</ul>\n","monotonic-array":"<p>如果数组是单调递增或单调递减的，那么它是<em>单调的</em>。</p>\n\n<p>如果对于所有 <code>i &lt;= j</code>，<code>A[i] &lt;= A[j]</code>，那么数组 <code>A</code> 是单调递增的。 如果对于所有 <code>i &lt;= j</code>，<code>A[i]&gt; = A[j]</code>，那么数组 <code>A</code> 是单调递减的。</p>\n\n<p>当给定的数组 <code>A</code>&nbsp;是单调数组时返回 <code>true</code>，否则返回 <code>false</code>。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[1,2,2,3]\n<strong>输出：</strong>true\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[6,5,4,4]\n<strong>输出：</strong>true\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>[1,3,2]\n<strong>输出：</strong>false\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>[1,2,4,5]\n<strong>输出：</strong>true\n</pre>\n\n<p><strong>示例&nbsp;5：</strong></p>\n\n<pre><strong>输入：</strong>[1,1,1]\n<strong>输出：</strong>true\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 50000</code></li>\n\t<li><code>-100000 &lt;= A[i] &lt;= 100000</code></li>\n</ol>\n","fair-candy-swap":"<p>爱丽丝和鲍勃有不同大小的糖果棒：<code>A[i]</code> 是爱丽丝拥有的第 <code>i</code>&nbsp;块糖的大小，<code>B[j]</code> 是鲍勃拥有的第 <code>j</code>&nbsp;块糖的大小。</p>\n\n<p>因为他们是朋友，所以他们想交换一个糖果棒，这样交换后，他们都有相同的糖果总量。<em>（一个人拥有的糖果总量是他们拥有的糖果棒大小的总和。）</em></p>\n\n<p>返回一个整数数组 <code>ans</code>，其中 <code>ans[0]</code> 是爱丽丝必须交换的糖果棒的大小，<code>ans[1]</code>&nbsp;是 Bob 必须交换的糖果棒的大小。</p>\n\n<p>如果有多个答案，你可以返回其中任何一个。保证答案存在。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>A = [1,1], B = [2,2]\n<strong>输出：</strong>[1,2]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>A = [1,2], B = [2,3]\n<strong>输出：</strong>[1,2]\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>A = [2], B = [1,3]\n<strong>输出：</strong>[2,3]\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>A = [1,2,5], B = [2,4]\n<strong>输出：</strong>[5,4]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>1 &lt;= B.length &lt;= 10000</code></li>\n\t<li><code>1 &lt;= A[i] &lt;= 100000</code></li>\n\t<li><code>1 &lt;= B[i] &lt;= 100000</code></li>\n\t<li>保证爱丽丝与鲍勃的糖果总量不同。</li>\n\t<li>答案肯定存在。</li>\n</ul>\n","rle-iterator":"<p>编写一个遍历游程编码序列的迭代器。</p>\n\n<p>迭代器由 <code>RLEIterator(int[] A)</code> 初始化，其中&nbsp;<code>A</code>&nbsp;是某个序列的游程编码。更具体地，对于所有偶数 <code>i</code>，<code>A[i]</code> 告诉我们在序列中重复非负整数值 <code>A[i + 1]</code> 的次数。</p>\n\n<p>迭代器支持一个函数：<code>next(int n)</code>，它耗尽接下来的&nbsp; <code>n</code> 个元素（<code>n &gt;= 1</code>）并返回以这种方式耗去的最后一个元素。如果没有剩余的元素可供耗尽，则&nbsp; <code>next</code>&nbsp;返回&nbsp;<code>-1</code> 。</p>\n\n<p>例如，我们以&nbsp;<code>A = [3,8,0,9,2,5]</code>&nbsp;开始，这是序列&nbsp;<code>[8,8,8,5,5]</code>&nbsp;的游程编码。这是因为该序列可以读作 &ldquo;三个八，零个九，两个五&rdquo;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;RLEIterator&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;], [[[3,8,0,9,2,5]],[2],[1],[1],[2]]\n<strong>输出：</strong>[null,8,8,5,-1]\n<strong>解释：</strong>\nRLEIterator 由 RLEIterator([3,8,0,9,2,5]) 初始化。\n这映射到序列 [8,8,8,5,5]。\n然后调用 RLEIterator.next 4次。\n\n.next(2) 耗去序列的 2 个项，返回 8。现在剩下的序列是 [8, 5, 5]。\n\n.next(1) 耗去序列的 1 个项，返回 8。现在剩下的序列是 [5, 5]。\n\n.next(1) 耗去序列的 1 个项，返回 5。现在剩下的序列是 [5]。\n\n.next(2) 耗去序列的 2 个项，返回 -1。 这是由于第一个被耗去的项是 5，\n但第二个项并不存在。由于最后一个要耗去的项不存在，我们返回 -1。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= A.length &lt;= 1000</code></li>\n\t<li><code>A.length</code>&nbsp;是偶数。</li>\n\t<li><code>0 &lt;= A[i] &lt;= 10^9</code></li>\n\t<li>每个测试用例最多调用&nbsp;<code>1000</code>&nbsp;次&nbsp;<code>RLEIterator.next(int n)</code>。</li>\n\t<li>每次调用&nbsp;<code>RLEIterator.next(int n)</code>&nbsp;都有&nbsp;<code>1 &lt;= n &lt;= 10^9</code>&nbsp;。</li>\n</ol>\n","super-egg-drop":"<p>你将获得&nbsp;<code>K</code>&nbsp;个鸡蛋，并可以使用一栋从&nbsp;<code>1</code>&nbsp;到&nbsp;<code>N</code>&nbsp;&nbsp;共有 <code>N</code>&nbsp;层楼的建筑。</p>\n\n<p>每个蛋的功能都是一样的，如果一个蛋碎了，你就不能再把它掉下去。</p>\n\n<p>你知道存在楼层&nbsp;<code>F</code> ，满足&nbsp;<code>0 &lt;= F &lt;= N</code> 任何从高于 <code>F</code>&nbsp;的楼层落下的鸡蛋都会碎，从&nbsp;<code>F</code>&nbsp;楼层或比它低的楼层落下的鸡蛋都不会破。</p>\n\n<p>每次<em>移动</em>，你可以取一个鸡蛋（如果你有完整的鸡蛋）并把它从任一楼层&nbsp;<code>X</code>&nbsp;扔下（满足&nbsp;<code>1 &lt;= X &lt;= N</code>）。</p>\n\n<p>你的目标是<strong>确切地</strong>知道 <code>F</code> 的值是多少。</p>\n\n<p>无论 <code>F</code> 的初始值如何，你确定 <code>F</code> 的值的最小移动次数是多少？</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>K = 1, N = 2\n<strong>输出：</strong>2\n<strong>解释：</strong>\n鸡蛋从 1 楼掉落。如果它碎了，我们肯定知道 F = 0 。\n否则，鸡蛋从 2 楼掉落。如果它碎了，我们肯定知道 F = 1 。\n如果它没碎，那么我们肯定知道 F = 2 。\n因此，在最坏的情况下我们需要移动 2 次以确定 F 是多少。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>K = 2, N = 6\n<strong>输出：</strong>3\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>K = 3, N = 14\n<strong>输出：</strong>4\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= K &lt;= 100</code></li>\n\t<li><code>1 &lt;= N &lt;= 10000</code></li>\n</ol>\n","maximum-sum-circular-subarray":"<p>给定一个由整数数组 <code>A</code>&nbsp;表示的<strong>环形数组 <code>C</code></strong>，求 <code><strong>C</strong></code>&nbsp;的非空子数组的最大可能和。</p>\n\n<p>在此处，<em>环形数组</em>意味着数组的末端将会与开头相连呈环状。（形式上，当<code>0 &lt;= i &lt; A.length</code>&nbsp;时&nbsp;<code>C[i] = A[i]</code>，而当&nbsp;<code>i &gt;= 0</code>&nbsp;时&nbsp;<code>C[i+A.length] = C[i]</code>）</p>\n\n<p>此外，子数组最多只能包含固定缓冲区 <code>A</code>&nbsp;中的每个元素一次。（形式上，对于子数组&nbsp;<code>C[i], C[i+1], ..., C[j]</code>，不存在&nbsp;<code>i &lt;= k1, k2 &lt;= j</code>&nbsp;其中&nbsp;<code>k1 % A.length&nbsp;= k2 % A.length</code>）</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[1,-2,3,-2]\n<strong>输出：</strong>3\n<strong>解释：</strong>从子数组 [3] 得到最大和 3\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[5,-3,5]\n<strong>输出：</strong>10\n<strong>解释：</strong>从子数组 [5,5] 得到最大和 5 + 5 = 10\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>[3,-1,2,-1]\n<strong>输出：</strong>4\n<strong>解释：</strong>从子数组 [2,-1,3] 得到最大和 2 + (-1) + 3 = 4\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>[3,-2,2,-3]\n<strong>输出：</strong>3\n<strong>解释：</strong>从子数组 [3] 和 [3,-2,2] 都可以得到最大和 3\n</pre>\n\n<p><strong>示例 5：</strong></p>\n\n<pre><strong>输入：</strong>[-2,-3,-1]\n<strong>输出：</strong>-1\n<strong>解释：</strong>从子数组 [-1] 得到最大和 -1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>-30000 &lt;= A[i] &lt;= 30000</code></li>\n\t<li><code>1 &lt;= A.length &lt;= 30000</code></li>\n</ol>\n","sum-of-subarray-minimums":"<p>给定一个整数数组 <code>A</code>，找到 <code>min(B)</code>&nbsp;的总和，其中 <code>B</code> 的范围为&nbsp;<code>A</code> 的每个（连续）子数组。</p>\n\n<p>由于答案可能很大，因此<strong>返回答案模 <code>10^9 + 7</code></strong>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>[3,1,2,4]\n<strong>输出：</strong>17\n<strong>解释：\n子数组为 </strong>[3]，[1]，[2]，[4]，[3,1]，[1,2]，[2,4]，[3,1,2]，[1,2,4]，[3,1,2,4]。 \n最小值为 3，1，2，4，1，1，2，1，1，1，和为 17。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A &lt;= 30000</code></li>\n\t<li><code>1 &lt;= A[i] &lt;= 30000</code></li>\n</ol>\n\n<p>&nbsp;</p>\n","x-of-a-kind-in-a-deck-of-cards":"<p>给定一副牌，每张牌上都写着一个整数。</p>\n\n<p>此时，你需要选定一个数字 <code>X</code>，使我们可以将整副牌按下述规则分成 1 组或更多组：</p>\n\n<ul>\n\t<li>每组都有&nbsp;<code>X</code>&nbsp;张牌。</li>\n\t<li>组内所有的牌上都写着相同的整数。</li>\n</ul>\n\n<p>仅当你可选的 <code>X &gt;= 2</code> 时返回&nbsp;<code>true</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[1,2,3,4,4,3,2,1]\n<strong>输出：</strong>true\n<strong>解释：</strong>可行的分组是 [1,1]，[2,2]，[3,3]，[4,4]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[1,1,1,2,2,2,3,3]\n<strong>输出：</strong>false\n<strong>解释：</strong>没有满足要求的分组。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>[1]\n<strong>输出：</strong>false\n<strong>解释：</strong>没有满足要求的分组。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>[1,1]\n<strong>输出：</strong>true\n<strong>解释：</strong>可行的分组是 [1,1]\n</pre>\n\n<p><strong>示例 5：</strong></p>\n\n<pre><strong>输入：</strong>[1,1,2,2,2,2]\n<strong>输出：</strong>true\n<strong>解释：</strong>可行的分组是 [1,1]，[2,2]，[2,2]\n</pre>\n\n<p><br>\n<strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= deck.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= deck[i] &lt;&nbsp;10000</code></li>\n</ol>\n\n<p>&nbsp;</p>\n","super-palindromes":"<p>如果一个正整数自身是回文数，而且它也是一个回文数的平方，那么我们称这个数为超级回文数。</p>\n\n<p>现在，给定两个正整数&nbsp;<code>L</code> 和&nbsp;<code>R</code> （以字符串形式表示），返回包含在范围 <code>[L, R]</code> 中的超级回文数的数目。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>L = &quot;4&quot;, R = &quot;1000&quot;\n<strong>输出：</strong>4\n<strong>解释：\n</strong>4，9，121，以及 484 是超级回文数。\n注意 676 不是一个超级回文数： 26 * 26 = 676，但是 26 不是回文数。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= len(L) &lt;= 18</code></li>\n\t<li><code>1 &lt;= len(R) &lt;= 18</code></li>\n\t<li><code>L</code> 和&nbsp;<code>R</code>&nbsp;是表示&nbsp;<code>[1, 10^18)</code>&nbsp;范围的整数的字符串。</li>\n\t<li><code>int(L) &lt;= int(R)</code></li>\n</ol>\n\n<p>&nbsp;</p>\n","koko-eating-bananas":"<p>珂珂喜欢吃香蕉。这里有&nbsp;<code>N</code>&nbsp;堆香蕉，第 <code>i</code> 堆中有&nbsp;<code>piles[i]</code>&nbsp;根香蕉。警卫已经离开了，将在&nbsp;<code>H</code>&nbsp;小时后回来。</p>\n\n<p>珂珂可以决定她吃香蕉的速度&nbsp;<code>K</code>&nbsp;（单位：根/小时）。每个小时，她将会选择一堆香蕉，从中吃掉 <code>K</code> 根。如果这堆香蕉少于 <code>K</code> 根，她将吃掉这堆的所有香蕉，然后这一小时内不会再吃更多的香蕉。&nbsp;&nbsp;</p>\n\n<p>珂珂喜欢慢慢吃，但仍然想在警卫回来前吃掉所有的香蕉。</p>\n\n<p>返回她可以在 <code>H</code> 小时内吃掉所有香蕉的最小速度 <code>K</code>（<code>K</code> 为整数）。</p>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入: </strong>piles = [3,6,7,11], H = 8\n<strong>输出: </strong>4\n</pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre><strong>输入: </strong>piles = [30,11,23,4,20], H = 5\n<strong>输出: </strong>30\n</pre>\n\n<p><strong>示例&nbsp;3：</strong></p>\n\n<pre><strong>输入: </strong>piles = [30,11,23,4,20], H = 6\n<strong>输出: </strong>23\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= piles.length &lt;= 10^4</code></li>\n\t<li><code>piles.length &lt;= H &lt;= 10^9</code></li>\n\t<li><code>1 &lt;= piles[i] &lt;= 10^9</code></li>\n</ul>\n","find-and-replace-pattern":"<p>你有一个单词列表&nbsp;<code>words</code>&nbsp;和一个模式&nbsp;&nbsp;<code>pattern</code>，你想知道 <code>words</code> 中的哪些单词与模式匹配。</p>\n\n<p>如果存在字母的排列 <code>p</code>&nbsp;，使得将模式中的每个字母 <code>x</code> 替换为 <code>p(x)</code> 之后，我们就得到了所需的单词，那么单词与模式是匹配的。</p>\n\n<p><em>（回想一下，字母的排列是从字母到字母的双射：每个字母映射到另一个字母，没有两个字母映射到同一个字母。）</em></p>\n\n<p>返回 <code>words</code> 中与给定模式匹配的单词列表。</p>\n\n<p>你可以按任何顺序返回答案。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>words = [&quot;abc&quot;,&quot;deq&quot;,&quot;mee&quot;,&quot;aqq&quot;,&quot;dkd&quot;,&quot;ccc&quot;], pattern = &quot;abb&quot;\n<strong>输出：</strong>[&quot;mee&quot;,&quot;aqq&quot;]\n<strong>解释：\n</strong>&quot;mee&quot; 与模式匹配，因为存在排列 {a -&gt; m, b -&gt; e, ...}。\n&quot;ccc&quot; 与模式不匹配，因为 {a -&gt; c, b -&gt; c, ...} 不是排列。\n因为 a 和 b 映射到同一个字母。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= pattern.length = words[i].length&nbsp;&lt;= 20</code></li>\n</ul>\n","cat-and-mouse":"<p>两个玩家分别扮演猫（Cat）和老鼠（Mouse）在<strong>无向</strong>图上进行游戏，他们轮流行动。</p>\n\n<p>该图按下述规则给出：<code>graph[a]</code>&nbsp;是所有结点 <code>b</code> 的列表，使得 <code>ab</code> 是图的一条边。</p>\n\n<p>老鼠从结点 1 开始并率先出发，猫从结点 2 开始且随后出发，在结点 0 处有一个洞。</p>\n\n<p>在每个玩家的回合中，他们<strong>必须</strong>沿着与他们所在位置相吻合的图的一条边移动。例如，如果老鼠位于结点 <code>1</code>，那么它只能移动到&nbsp;<code>graph[1]</code>&nbsp;中的（任何）结点去。</p>\n\n<p>此外，猫无法移动到洞（结点 0）里。</p>\n\n<p>然后，游戏在出现以下三种情形之一时结束：</p>\n\n<ul>\n\t<li>如果猫和老鼠占据相同的结点，猫获胜。</li>\n\t<li>如果老鼠躲入洞里，老鼠获胜。</li>\n\t<li>如果某一位置重复出现（即，玩家们的位置和移动顺序都与上一个回合相同），游戏平局。</li>\n</ul>\n\n<p>给定&nbsp;<code>graph</code>，并假设两个玩家都以最佳状态参与游戏，如果老鼠获胜，则返回&nbsp;<code>1</code>；如果猫获胜，则返回 <code>2</code>；如果平局，则返回 <code>0</code>。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>[[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]\n<strong>输出：</strong>0\n<strong>解释：</strong>\n4---3---1\n|&nbsp; &nbsp;|\n2---5\n&nbsp;\\&nbsp;/\n&nbsp; 0\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>3 &lt;= graph.length &lt;= 200</code></li>\n\t<li>保证 <code>graph[1]</code>&nbsp;非空。</li>\n\t<li>保证&nbsp;<code>graph[2]</code>&nbsp;包含非零元素。</li>\n</ol>\n","reverse-only-letters":"<p>给定一个字符串&nbsp;<code>S</code>，返回&nbsp;&ldquo;反转后的&rdquo;&nbsp;字符串，其中不是字母的字符都保留在原地，而所有字母的位置发生反转。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>&quot;ab-cd&quot;\n<strong>输出：</strong>&quot;dc-ba&quot;\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>&quot;a-bC-dEf-ghIj&quot;\n<strong>输出：</strong>&quot;j-Ih-gfE-dCba&quot;\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>&quot;Test1ng-Leet=code-Q!&quot;\n<strong>输出：</strong>&quot;Qedo1ct-eeLg=ntse-T!&quot;\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>S.length &lt;= 100</code></li>\n\t<li><code>33 &lt;= S[i].ASCIIcode &lt;= 122</code>&nbsp;</li>\n\t<li><code>S</code> 中不包含&nbsp;<code>\\</code> or <code>&quot;</code></li>\n</ol>\n","smallest-range-i":"<p>给定一个整数数组 <code>A</code>，对于每个整数 <code>A[i]</code>，我们可以选择任意&nbsp;<code>x</code> 满足&nbsp;<code>-K &lt;= x &lt;= K</code>，并将&nbsp;<code>x</code>&nbsp;加到&nbsp;<code>A[i]</code>&nbsp;中。</p>\n\n<p>在此过程之后，我们得到一些数组&nbsp;<code>B</code>。</p>\n\n<p>返回 <code>B</code>&nbsp;的最大值和 <code>B</code>&nbsp;的最小值之间可能存在的最小差值。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>A = [1], K = 0\n<strong>输出：</strong>0\n<strong>解释：</strong>B = [1]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>A = [0,10], K = 2\n<strong>输出：</strong>6\n<strong>解释：</strong>B = [2,8]\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>A = [1,3,6], K = 3\n<strong>输出：</strong>0\n<strong>解释：</strong>B = [3,3,3] 或 B = [4,4,4]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 10000</code></li>\n\t<li><code>0 &lt;= K &lt;= 10000</code></li>\n</ol>\n","maximum-frequency-stack":"<p>实现 <code>FreqStack</code>，模拟类似栈的数据结构的操作的一个类。</p>\n\n<p><code>FreqStack</code>&nbsp;有两个函数：</p>\n\n<ul>\n\t<li><code>push(int x)</code>，将整数&nbsp;<code>x</code>&nbsp;推入栈中。</li>\n\t<li><code>pop()</code>，它<strong>移除</strong>并返回栈中出现最频繁的元素。\n\t<ul>\n\t\t<li>如果最频繁的元素不只一个，则移除并返回最接近栈顶的元素。</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>\n[&quot;FreqStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;],\n[[],[5],[7],[5],[7],[4],[5],[],[],[],[]]\n<strong>输出：</strong>[null,null,null,null,null,null,null,5,7,5,4]\n<strong>解释：</strong>\n执行六次 .push 操作后，栈自底向上为 [5,7,5,7,4,5]。然后：\n\npop() -&gt; 返回 5，因为 5 是出现频率最高的。\n栈变成 [5,7,5,7,4]。\n\npop() -&gt; 返回 7，因为 5 和 7 都是频率最高的，但 7 最接近栈顶。\n栈变成 [5,7,5,4]。\n\npop() -&gt; 返回 5 。\n栈变成 [5,7,4]。\n\npop() -&gt; 返回 4 。\n栈变成 [5,7]。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>对&nbsp;<code>FreqStack.push(int x)</code>&nbsp;的调用中&nbsp;<code>0 &lt;= x &lt;= 10^9</code>。</li>\n\t<li>如果栈的元素数目为零，则保证不会调用&nbsp; <code>FreqStack.pop()</code>。</li>\n\t<li>单个测试样例中，对&nbsp;<code>FreqStack.push</code>&nbsp;的总调用次数不会超过&nbsp;<code>10000</code>。</li>\n\t<li>单个测试样例中，对&nbsp;<code>FreqStack.pop</code>&nbsp;的总调用次数不会超过&nbsp;<code>10000</code>。</li>\n\t<li>所有测试样例中，对&nbsp;<code>FreqStack.push</code>&nbsp;和 <code>FreqStack.pop</code>&nbsp;的总调用次数不会超过&nbsp;<code>150000</code>。</li>\n</ul>\n\n<p>&nbsp;</p>\n","fruit-into-baskets":"<p>在一排树中，第 <code>i</code> 棵树产生&nbsp;<code>tree[i]</code> 型的水果。<br>\n你可以<strong>从你选择的任何树开始</strong>，然后重复执行以下步骤：</p>\n\n<ol>\n\t<li>把这棵树上的水果放进你的篮子里。如果你做不到，就停下来。</li>\n\t<li>移动到当前树右侧的下一棵树。如果右边没有树，就停下来。</li>\n</ol>\n\n<p>请注意，在选择一颗树后，你没有任何选择：你必须执行步骤 1，然后执行步骤 2，然后返回步骤 1，然后执行步骤 2，依此类推，直至停止。</p>\n\n<p>你有两个篮子，每个篮子可以携带任何数量的水果，但你希望每个篮子只携带一种类型的水果。<br>\n用这个程序你能收集的水果总量是多少？</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[1,2,1]\n<strong>输出：</strong>3\n<strong>解释：</strong>我们可以收集 [1,2,1]。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[0,1,2,2]\n<strong>输出：</strong>3\n<strong>解释：</strong>我们可以收集 [1,2,2].\n如果我们从第一棵树开始，我们将只能收集到 [0, 1]。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>[1,2,3,2,2]\n<strong>输出：</strong>4\n<strong>解释：</strong>我们可以收集 [2,3,2,2].\n如果我们从第一棵树开始，我们将只能收集到 [1, 2]。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>[3,3,3,1,2,1,1,2,3,3,4]\n<strong>输出：</strong>5\n<strong>解释：</strong>我们可以收集 [1,2,1,1,2].\n如果我们从第一棵树或第八棵树开始，我们将只能收集到 4 个水果。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= tree.length &lt;= 40000</code></li>\n\t<li><code>0 &lt;= tree[i] &lt; tree.length</code></li>\n</ol>\n","online-election":"<p>在选举中，第&nbsp;<code>i</code>&nbsp;张票是在时间为&nbsp;<code>times[i]</code>&nbsp;时投给&nbsp;<code>persons[i]</code>&nbsp;的。</p>\n\n<p>现在，我们想要实现下面的查询函数： <code>TopVotedCandidate.q(int t)</code> 将返回在&nbsp;<code>t</code> 时刻主导选举的候选人的编号。</p>\n\n<p>在&nbsp;<code>t</code> 时刻投出的选票也将被计入我们的查询之中。在平局的情况下，最近获得投票的候选人将会获胜。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;TopVotedCandidate&quot;,&quot;q&quot;,&quot;q&quot;,&quot;q&quot;,&quot;q&quot;,&quot;q&quot;,&quot;q&quot;], [[[0,1,1,0,0,1,0],[0,5,10,15,20,25,30]],[3],[12],[25],[15],[24],[8]]\n<strong>输出：</strong>[null,0,1,1,0,0,1]\n<strong>解释：</strong>\n时间为 3，票数分布情况是 [0]，编号为 0 的候选人领先。\n时间为 12，票数分布情况是 [0,1,1]，编号为 1 的候选人领先。\n时间为 25，票数分布情况是 [0,1,1,0,0,1]，编号为 1 的候选人领先（因为最近的投票结果是平局）。\n在时间 15、24 和 8 处继续执行 3 个查询。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= persons.length = times.length &lt;= 5000</code></li>\n\t<li><code>0 &lt;= persons[i] &lt;= persons.length</code></li>\n\t<li><code>times</code>&nbsp;是严格递增的数组，所有元素都在&nbsp;<code>[0, 10^9]</code>&nbsp;范围中。</li>\n\t<li>每个测试用例最多调用&nbsp;<code>10000</code>&nbsp;次&nbsp;<code>TopVotedCandidate.q</code>。</li>\n\t<li><code>TopVotedCandidate.q(int t)</code>&nbsp;被调用时总是满足&nbsp;<code>t &gt;= times[0]</code>。</li>\n</ol>\n","random-point-in-non-overlapping-rectangles":"<p>给定一个非重叠轴对齐矩形的列表 <code>rects</code>，写一个函数 <code>pick</code> 随机均匀地选取矩形覆盖的空间中的整数点。</p>\n\n<p>提示：</p>\n\n<ol>\n\t<li><strong>整数点</strong>是具有整数坐标的点。</li>\n\t<li>矩形周边上的点包含在矩形覆盖的空间中。</li>\n\t<li>第 <code>i</code> 个矩形 <code>rects [i] = [x1，y1，x2，y2]</code>，其中&nbsp;<code>[x1，y1]</code> 是左下角的整数坐标，<code>[x2，y2]</code> 是右上角的整数坐标。</li>\n\t<li>每个矩形的长度和宽度不超过 2000。</li>\n\t<li><code>1 &lt;= rects.length&nbsp;&lt;= 100</code></li>\n\t<li><code>pick</code> 以整数坐标数组&nbsp;<code>[p_x, p_y]</code>&nbsp;的形式返回一个点。</li>\n\t<li><code>pick</code> 最多被调用10000次。</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入: \n</strong>[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\n[[[[1,1,5,5]]],[],[],[]]\n<strong>输出: \n</strong>[null,[4,1],[4,1],[3,3]]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入: \n</strong>[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\n[[[[-2,-2,-1,-1],[1,0,3,0]]],[],[],[],[],[]]\n<strong>输出: \n</strong>[null,[-1,-2],[2,0],[-2,-1],[3,0],[-2,-2]]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>输入语法的说明：</strong></p>\n\n<p>输入是两个列表：调用的子例程及其参数。<code>Solution</code> 的构造函数有一个参数，即矩形数组 <code>rects</code>。<code>pick</code> 没有参数。参数总是用列表包装的，即使没有也是如此。</p>\n\n<p>&nbsp;</p>\n","leaf-similar-trees":"<p>请考虑一颗二叉树上所有的叶子，这些叶子的值按从左到右的顺序排列形成一个&nbsp;<em>叶值序列</em> 。</p>\n\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/16/tree.png\" style=\"height: 240px; width: 300px;\"></p>\n\n<p>举个例子，如上图所示，给定一颗叶值序列为&nbsp;<code>(6, 7, 4, 9, 8)</code>&nbsp;的树。</p>\n\n<p>如果有两颗二叉树的叶值序列是相同，那么我们就认为它们是&nbsp;<em>叶相似&nbsp;</em>的。</p>\n\n<p>如果给定的两个头结点分别为&nbsp;<code>root1</code> 和&nbsp;<code>root2</code>&nbsp;的树是叶相似的，则返回&nbsp;<code>true</code>；否则返回 <code>false</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>给定的两颗树可能会有&nbsp;<code>1</code>&nbsp;到&nbsp;<code>100</code>&nbsp;个结点。</li>\n</ul>\n","spiral-matrix-iii":"<p>在&nbsp;<code>R</code>&nbsp;行&nbsp;<code>C</code>&nbsp;列的矩阵上，我们从&nbsp;<code>(r0, c0)</code>&nbsp;面朝东面开始</p>\n\n<p>这里，网格的西北角位于第一行第一列，网格的东南角位于最后一行最后一列。</p>\n\n<p>现在，我们以顺时针按螺旋状行走，访问此网格中的每个位置。</p>\n\n<p>每当我们移动到网格的边界之外时，我们会继续在网格之外行走（但稍后可能会返回到网格边界）。</p>\n\n<p>最终，我们到过网格的所有&nbsp;<code>R * C</code>&nbsp;个空间。</p>\n\n<p>按照访问顺序返回表示网格位置的坐标列表。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>R = 1, C = 4, r0 = 0, c0 = 0\n<strong>输出：</strong>[[0,0],[0,1],[0,2],[0,3]]\n\n<img alt=\"\" src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/08/24/example_1.png\" style=\"height: 99px; width: 174px;\">\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>R = 5, C = 6, r0 = 1, c0 = 4\n<strong>输出：</strong>[[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]\n\n<img alt=\"\" src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/08/24/example_2.png\" style=\"height: 142px; width: 202px;\">\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= R &lt;= 100</code></li>\n\t<li><code>1 &lt;= C &lt;= 100</code></li>\n\t<li><code>0 &lt;= r0 &lt; R</code></li>\n\t<li><code>0 &lt;= c0 &lt; C</code></li>\n</ol>\n","orderly-queue":"<p>给出了一个由小写字母组成的字符串 <code>S</code>。然后，我们可以进行任意次数的<em>移动</em>。</p>\n\n<p>在每次移动中，我们选择前 <code>K</code> 个字母中的一个（从左侧开始），将其从原位置移除，并放置在字符串的末尾。</p>\n\n<p>返回我们在任意次数的移动之后可以拥有的按字典顺序排列的最小字符串。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>S = &quot;cba&quot;, K = 1\n<strong>输出：</strong>&quot;acb&quot;\n<strong>解释：</strong>\n在第一步中，我们将第一个字符（&ldquo;c&rdquo;）移动到最后，获得字符串 &ldquo;bac&rdquo;。\n在第二步中，我们将第一个字符（&ldquo;b&rdquo;）移动到最后，获得最终结果 &ldquo;acb&rdquo;。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>S = &quot;baaca&quot;, K = 3\n<strong>输出：</strong>&quot;aaabc&quot;\n<strong>解释：\n</strong>在第一步中，我们将第一个字符（&ldquo;b&rdquo;）移动到最后，获得字符串 &ldquo;aacab&rdquo;。\n在第二步中，我们将第三个字符（&ldquo;c&rdquo;）移动到最后，获得最终结果 &ldquo;aaabc&rdquo;。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= K &lt;= S.length&nbsp;&lt;= 1000</code></li>\n\t<li><code>S</code>&nbsp;只由小写字母组成。</li>\n</ol>\n","boats-to-save-people":"<p>第&nbsp;<code>i</code>&nbsp;个人的体重为&nbsp;<code>people[i]</code>，每艘船可以承载的最大重量为&nbsp;<code>limit</code>。</p>\n\n<p>每艘船最多可同时载两人，但条件是这些人的重量之和最多为&nbsp;<code>limit</code>。</p>\n\n<p>返回载到每一个人所需的最小船数。(保证每个人都能被船载)。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>people = [1,2], limit = 3\n<strong>输出：</strong>1\n<strong>解释：</strong>1 艘船载 (1, 2)\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>people = [3,2,2,1], limit = 3\n<strong>输出：</strong>3\n<strong>解释：</strong>3 艘船分别载 (1, 2), (2) 和 (3)\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>people = [3,5,3,4], limit = 5\n<strong>输出：</strong>4\n<strong>解释：</strong>4 艘船分别载 (3), (3), (4), (5)</pre>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;=&nbsp;people.length &lt;= 50000</code></li>\n\t<li><code>1 &lt;= people[i] &lt;=&nbsp;limit &lt;= 30000</code></li>\n</ul>\n","length-of-longest-fibonacci-subsequence":"<p>如果序列&nbsp;<code>X_1, X_2, ..., X_n</code>&nbsp;满足下列条件，就说它是&nbsp;<em>斐波那契式&nbsp;</em>的：</p>\n\n<ul>\n\t<li><code>n &gt;= 3</code></li>\n\t<li>对于所有&nbsp;<code>i + 2 &lt;= n</code>，都有&nbsp;<code>X_i + X_{i+1} = X_{i+2}</code></li>\n</ul>\n\n<p>给定一个<strong>严格递增</strong>的正整数数组形成序列，找到 <code>A</code> 中最长的斐波那契式的子序列的长度。如果一个不存在，返回&nbsp;&nbsp;0 。</p>\n\n<p><em>（回想一下，子序列是从原序列 <code>A</code>&nbsp;中派生出来的，它从 <code>A</code>&nbsp;中删掉任意数量的元素（也可以不删），而不改变其余元素的顺序。例如，&nbsp;<code>[3, 5, 8]</code>&nbsp;是&nbsp;<code>[3, 4, 5, 6, 7, 8]</code>&nbsp;的一个子序列）</em></p>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入: </strong>[1,2,3,4,5,6,7,8]\n<strong>输出: </strong>5\n<strong>解释:\n</strong>最长的斐波那契式子序列为：[1,2,3,5,8] 。\n</pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre><strong>输入: </strong>[1,3,7,11,12,14,18]\n<strong>输出: </strong>3\n<strong>解释</strong>:\n最长的斐波那契式子序列有：\n[1,11,12]，[3,11,14] 以及 [7,11,18] 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= A.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= A[0] &lt; A[1] &lt; ... &lt; A[A.length - 1] &lt;= 10^9</code></li>\n\t<li><em>（对于以 Java，C，C++，以及&nbsp;C# 的提交，时间限制被减少了 50%）</em></li>\n</ul>\n","possible-bipartition":"<p>给定一组&nbsp;<code>N</code>&nbsp;人（编号为&nbsp;<code>1, 2, ..., N</code>），&nbsp;我们想把每个人分进<strong>任意</strong>大小的两组。</p>\n\n<p>每个人都可能不喜欢其他人，那么他们不应该属于同一组。</p>\n\n<p>形式上，如果 <code>dislikes[i] = [a, b]</code>，表示不允许将编号为 <code>a</code> 和 <code>b</code> 的人归入同一组。</p>\n\n<p>当可以用这种方法将每个人分进两组时，返回 <code>true</code>；否则返回 <code>false</code>。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>N = 4, dislikes = [[1,2],[1,3],[2,4]]\n<strong>输出：</strong>true\n<strong>解释：</strong>group1 [1,4], group2 [2,3]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>N = 3, dislikes = [[1,2],[1,3],[2,3]]\n<strong>输出：</strong>false\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>N = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]\n<strong>输出：</strong>false\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 2000</code></li>\n\t<li><code>0 &lt;= dislikes.length &lt;= 10000</code></li>\n\t<li><code>1 &lt;= dislikes[i][j] &lt;= N</code></li>\n\t<li><code>dislikes[i][0] &lt; dislikes[i][1]</code></li>\n\t<li>对于&nbsp;<code>dislikes[i] == dislikes[j]</code>&nbsp;不存在&nbsp;<code>i != j</code>&nbsp;</li>\n</ol>\n","surface-area-of-3d-shapes":"<p>在&nbsp;<code>N&nbsp;*&nbsp;N</code>&nbsp;的网格上，我们放置一些&nbsp;<code>1 * 1 * 1&nbsp;</code>&nbsp;的立方体。</p>\n\n<p>每个值&nbsp;<code>v = grid[i][j]</code>&nbsp;表示&nbsp;<code>v</code>&nbsp;个正方体叠放在单元格&nbsp;<code>(i, j)</code>&nbsp;上。</p>\n\n<p>返回结果形体的总表面积。</p>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[[2]]\n<strong>输出：</strong>10\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[[1,2],[3,4]]\n<strong>输出：</strong>34\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>[[1,0],[0,2]]\n<strong>输出：</strong>16\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>[[1,1,1],[1,0,1],[1,1,1]]\n<strong>输出：</strong>32\n</pre>\n\n<p><strong>示例&nbsp;5：</strong></p>\n\n<pre><strong>输入：</strong>[[2,2,2],[2,1,2],[2,2,2]]\n<strong>输出：</strong>46\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= N &lt;= 50</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 50</code></li>\n</ul>\n","stone-game":"<p>亚历克斯和李用几堆石子在做游戏。偶数堆石子<strong>排成一行</strong>，每堆都有正整数颗石子&nbsp;<code>piles[i]</code>&nbsp;。</p>\n\n<p>游戏以谁手中的石子最多来决出胜负。石子的总数是奇数，所以没有平局。</p>\n\n<p>亚历克斯和李轮流进行，亚历克斯先开始。 每回合，玩家从行的开始或结束处取走整堆石头。 这种情况一直持续到没有更多的石子堆为止，此时手中石子最多的玩家获胜。</p>\n\n<p>假设亚历克斯和李都发挥出最佳水平，当亚历克斯赢得比赛时返回&nbsp;<code>true</code>&nbsp;，当李赢得比赛时返回&nbsp;<code>false</code>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>[5,3,4,5]\n<strong>输出：</strong>true\n<strong>解释：</strong>\n亚历克斯先开始，只能拿前 5 颗或后 5 颗石子 。\n假设他取了前 5 颗，这一行就变成了 [3,4,5] 。\n如果李拿走前 3 颗，那么剩下的是 [4,5]，亚历克斯拿走后 5 颗赢得 10 分。\n如果李拿走后 5 颗，那么剩下的是 [3,4]，亚历克斯拿走后 4 颗赢得 9 分。\n这表明，取前 5 颗石子对亚历克斯来说是一个胜利的举动，所以我们返回 true 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= piles.length &lt;= 500</code></li>\n\t<li><code>piles.length</code> 是偶数。</li>\n\t<li><code>1 &lt;= piles[i] &lt;= 500</code></li>\n\t<li><code>sum(piles)</code>&nbsp;是奇数。</li>\n</ol>\n","generate-random-point-in-a-circle":"<p>给定圆的半径和圆心的 x、y 坐标，写一个在圆中产生均匀随机点的函数&nbsp;<code>randPoint</code>&nbsp;。</p>\n\n<p>说明:</p>\n\n<ol>\n\t<li>输入值和输出值都将是<a href=\"https://baike.baidu.com/item/%E6%B5%AE%E7%82%B9%E6%95%B0/6162520\">浮点数</a>。</li>\n\t<li>圆的半径和圆心的 x、y 坐标将作为参数传递给类的构造函数。</li>\n\t<li>圆周上的点也认为是在圆中。</li>\n\t<li><code>randPoint</code>&nbsp;返回一个包含随机点的x坐标和y坐标的大小为2的数组。</li>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入: \n</strong>[&quot;Solution&quot;,&quot;randPoint&quot;,&quot;randPoint&quot;,&quot;randPoint&quot;]\n[[1,0,0],[],[],[]]\n<strong>输出: </strong>[null,[-0.72939,-0.65505],[-0.78502,-0.28626],[-0.83119,-0.19803]]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入: \n</strong>[&quot;Solution&quot;,&quot;randPoint&quot;,&quot;randPoint&quot;,&quot;randPoint&quot;]\n[[10,5,-7.5],[],[],[]]\n<strong>输出: </strong>[null,[11.52438,-8.33273],[2.46992,-16.21705],[11.13430,-12.42337]]</pre>\n\n<p><strong>输入语法说明：</strong></p>\n\n<p>输入是两个列表：调用成员函数名和调用的参数。<code>Solution</code>&nbsp;的构造函数有三个参数，圆的半径、圆心的 x 坐标、圆心的 y 坐标。<code>randPoint</code>&nbsp;没有参数。输入参数是一个列表，即使参数为空，也会输入一个 [] 空列表。</p>\n","sum-of-subsequence-widths":"<p>给定一个整数数组 <code>A</code> ，考虑 <code>A</code> 的所有非空子序列。</p>\n\n<p>对于任意序列 S ，设 S 的宽度是 S 的最大元素和最小元素的差。</p>\n\n<p>返回 A 的所有子序列的宽度之和。</p>\n\n<p>由于答案可能非常大，请<strong>返回答案模 10^9+7</strong>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>[2,1,3]\n<strong>输出：</strong>6\n<strong>解释：\n</strong>子序列为 [1]，[2]，[3]，[2,1]，[2,3]，[1,3]，[2,1,3] 。\n相应的宽度是 0，0，0，1，1，2，2 。\n这些宽度之和是 6 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= A.length &lt;= 20000</code></li>\n\t<li><code>1 &lt;= A[i] &lt;= 20000</code></li>\n</ul>\n","random-flip-matrix":"<p>题中给出一个 <code>n</code> 行 <code>n</code> 列的二维矩阵<code> (n_rows,n_cols)</code>，且所有值被初始化为 0。要求编写一个 <code>flip</code> 函数，<a href=\"https://en.wikipedia.org/wiki/Discrete_uniform_distribution\">均匀随机</a>的将矩阵中的 0 变为 1，并返回该值的位置下标 <code>[row_id,col_id]</code>；同样编写一个 <code>reset</code> 函数，将所有的值都重新置为 0。<strong>尽量最少调用随机函数 Math.random()</strong>，并且优化时间和空间复杂度。</p>\n\n<p>注意:</p>\n\n<p>1.1 &lt;= n_rows, n_cols &lt;= 10000</p>\n\n<p>2. 0 &lt;= row.id &lt; n_rows 并且 0 &lt;= col.id &lt; n_cols</p>\n\n<p>3.当矩阵中没有值为 0 时，不可以调用 flip 函数</p>\n\n<p>4.调用 flip 和 reset 函数的次数加起来不会超过 1000 次</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入: \n</strong>[&quot;Solution&quot;,&quot;flip&quot;,&quot;flip&quot;,&quot;flip&quot;,&quot;flip&quot;]\n[[2,3],[],[],[],[]]\n<strong>输出: </strong>[null,[0,1],[1,2],[1,0],[1,1]]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入: \n</strong>[&quot;Solution&quot;,&quot;flip&quot;,&quot;flip&quot;,&quot;reset&quot;,&quot;flip&quot;]\n[[1,2],[],[],[],[]]\n<strong>输出: </strong>[null,[0,0],[0,1],null,[0,0]]</pre>\n\n<p><strong>输入语法解释：</strong></p>\n\n<p>输入包含两个列表：被调用的子程序和他们的参数。<code>Solution</code> 的构造函数有两个参数，分别为 <code>n_rows</code> 和 <code>n_cols</code>。<code>flip</code>&nbsp;和 <code>reset</code> 没有参数，参数总会以列表形式给出，哪怕该列表为空</p>\n","valid-permutations-for-di-sequence":"<p>我们给出 <code>S</code>，一个源于&nbsp;<code>{&#39;D&#39;, &#39;I&#39;}</code>&nbsp;的长度为 <code>n</code>&nbsp;的字符串 。（这些字母代表 &ldquo;减少&rdquo; 和 &ldquo;增加&rdquo;。）<br>\n<em>有效排列</em>&nbsp;是对整数 <code>{0, 1, ..., n}</code>&nbsp;的一个排列&nbsp;<code>P[0], P[1], ..., P[n]</code>，使得对所有的&nbsp;<code>i</code>：</p>\n\n<ul>\n\t<li>如果 <code>S[i] == &#39;D&#39;</code>，那么&nbsp;<code>P[i] &gt; P[i+1]</code>，以及；</li>\n\t<li>如果 <code>S[i] == &#39;I&#39;</code>，那么 <code>P[i] &lt; P[i+1]</code>。</li>\n</ul>\n\n<p>有多少个有效排列？因为答案可能很大，所以请<strong>返回你的答案模</strong><strong> <code>10^9 + 7</code></strong>.</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>&quot;DID&quot;\n<strong>输出：</strong>5\n<strong>解释：</strong>\n(0, 1, 2, 3) 的五个有效排列是：\n(1, 0, 3, 2)\n(2, 0, 3, 1)\n(2, 1, 3, 0)\n(3, 0, 2, 1)\n(3, 1, 2, 0)\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= S.length &lt;= 200</code></li>\n\t<li><code>S</code> 仅由集合 <code>{&#39;D&#39;, &#39;I&#39;}</code>&nbsp;中的字符组成。</li>\n</ol>\n\n<p>&nbsp;</p>\n","online-stock-span":"<p>编写一个 <code>StockSpanner</code> 类，它收集某些股票的每日报价，并返回该股票当日价格的跨度。</p>\n\n<p>今天股票价格的跨度被定义为股票价格小于或等于今天价格的最大连续日数（从今天开始往回数，包括今天）。</p>\n\n<p>例如，如果未来7天股票的价格是 <code>[100, 80, 60, 70, 60, 75, 85]</code>，那么股票跨度将是 <code>[1, 1, 1, 2, 1, 4, 6]</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;StockSpanner&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;], [[],[100],[80],[60],[70],[60],[75],[85]]\n<strong>输出：</strong>[null,1,1,1,2,1,4,6]\n<strong>解释：</strong>\n首先，初始化 S = StockSpanner()，然后：\nS.next(100) 被调用并返回 1，\nS.next(80) 被调用并返回 1，\nS.next(60) 被调用并返回 1，\nS.next(70) 被调用并返回 2，\nS.next(60) 被调用并返回 1，\nS.next(75) 被调用并返回 4，\nS.next(85) 被调用并返回 6。\n\n注意 (例如) S.next(75) 返回 4，因为截至今天的最后 4 个价格\n(包括今天的价格 75) 小于或等于今天的价格。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>调用&nbsp;<code>StockSpanner.next(int price)</code>&nbsp;时，将有&nbsp;<code>1 &lt;= price &lt;= 10^5</code>。</li>\n\t<li>每个测试用例最多可以调用&nbsp; <code>10000</code> 次 <code>StockSpanner.next</code>。</li>\n\t<li>在所有测试用例中，最多调用&nbsp;<code>150000</code>&nbsp;次&nbsp;<code>StockSpanner.next</code>。</li>\n\t<li>此问题的总时间限制减少了 50%。</li>\n</ol>\n","sort-array-by-parity":"<p>给定一个非负整数数组 <code>A</code>，返回一个由 <code>A</code> 的所有偶数元素组成的数组，后面跟 <code>A</code> 的所有奇数元素。</p>\n\n<p>你可以返回满足此条件的任何数组作为答案。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>[3,1,2,4]\n<strong>输出：</strong>[2,4,3,1]\n输出 [4,2,3,1]，[2,4,1,3] 和 [4,2,1,3] 也会被接受。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 5000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 5000</code></li>\n</ol>\n","groups-of-special-equivalent-strings":"<p>你将得到一个字符串数组 <code>A</code>。</p>\n\n<p>如果经过任意次数的移动，S == T，那么两个字符串 <code>S</code> 和 <code>T</code> 是<em>特殊等价</em>的。</p>\n\n<p>&nbsp;</p>\n\n<p>一次<em>移动</em>包括选择两个索引 <code>i</code> 和 <code>j</code>，且&nbsp;<code>i％2 == j％2</code>，并且交换 <code>S[j]</code> 和 <code>S [i]</code>。</p>\n\n<p>现在规定，<em><code>A</code> 中的特殊等价字符串组</em>是 <code>A</code> 的非空子集 <code>S</code>，这样不在 <code>S</code> 中的任何字符串与 <code>S</code> 中的任何字符串都不是特殊等价的。</p>\n\n<p>&nbsp;</p>\n\n<p>返回 <code>A</code>&nbsp;中特殊等价字符串组的数量。</p>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;a&quot;,&quot;c&quot;,&quot;c&quot;]\n<strong>输出：</strong>3\n<strong>解释：</strong>3<strong> </strong>组 [&quot;a&quot;,&quot;a&quot;]，[&quot;b&quot;]，[&quot;c&quot;,&quot;c&quot;,&quot;c&quot;]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;aa&quot;,&quot;bb&quot;,&quot;ab&quot;,&quot;ba&quot;]\n<strong>输出：</strong>4\n<strong>解释：</strong>4 组 [&quot;aa&quot;]，[&quot;bb&quot;]，[&quot;ab&quot;]，[&quot;ba&quot;]\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;abc&quot;,&quot;acb&quot;,&quot;bac&quot;,&quot;bca&quot;,&quot;cab&quot;,&quot;cba&quot;]\n<strong>输出：</strong>3\n<strong>解释：</strong>3 组 [&quot;abc&quot;,&quot;cba&quot;]，[&quot;acb&quot;,&quot;bca&quot;]，[&quot;bac&quot;,&quot;cab&quot;]\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;abcd&quot;,&quot;cdab&quot;,&quot;adcb&quot;,&quot;cbad&quot;]\n<strong>输出：</strong>1\n<strong>解释：</strong>1 组 [&quot;abcd&quot;,&quot;cdab&quot;,&quot;adcb&quot;,&quot;cbad&quot;]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= A.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= A[i].length &lt;= 20</code></li>\n\t<li>所有&nbsp;<code>A[i]</code>&nbsp;都具有相同的长度。</li>\n\t<li>所有&nbsp;<code>A[i]</code>&nbsp;都只由小写字母组成。</li>\n</ul>\n","partition-array-into-disjoint-intervals":"<p>给定一个数组&nbsp;<code>A</code>，将其划分为两个不相交（没有公共元素）的连续子数组&nbsp;<code>left</code>&nbsp;和&nbsp;<code>right</code>，&nbsp;使得：</p>\n\n<ul>\n\t<li><code>left</code>&nbsp;中的每个元素都小于或等于&nbsp;<code>right</code>&nbsp;中的每个元素。</li>\n\t<li><code>left</code> 和&nbsp;<code>right</code>&nbsp;都是非空的。</li>\n\t<li><code>left</code>&nbsp;要尽可能小。</li>\n</ul>\n\n<p>在完成这样的分组后返回&nbsp;<code>left</code>&nbsp;的<strong>长度</strong>。可以保证存在这样的划分方法。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[5,0,3,8,6]\n<strong>输出：</strong>3\n<strong>解释：</strong>left = [5,0,3]，right = [8,6]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[1,1,1,0,6,12]\n<strong>输出：</strong>4\n<strong>解释：</strong>left = [1,1,1,0]，right = [6,12]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= A.length&nbsp;&lt;= 30000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 10^6</code></li>\n\t<li>可以保证至少有一种方法能够按题目所描述的那样对 <code>A</code> 进行划分。</li>\n</ol>\n\n<p>&nbsp;</p>\n","nth-magical-number":"<p>如果正整数可以被 A 或 B 整除，那么它是神奇的。</p>\n\n<p>返回第 N 个神奇数字。由于答案可能非常大，<strong>返回它模&nbsp;</strong><code>10^9 + 7</code>&nbsp;<strong>的结果</strong>。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>N = 1, A = 2, B = 3\n<strong>输出：</strong>2\n</pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre><strong>输入：</strong>N = 4, A = 2, B = 3\n<strong>输出：</strong>6\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>N = 5, A = 2, B = 4\n<strong>输出：</strong>10\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>N = 3, A = 6, B = 4\n<strong>输出：</strong>8\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N&nbsp;&lt;= 10^9</code></li>\n\t<li><code>2 &lt;= A&nbsp;&lt;= 40000</code></li>\n\t<li><code>2 &lt;= B&nbsp;&lt;= 40000</code></li>\n</ol>\n","middle-of-the-linked-list":"<p>给定一个带有头结点&nbsp;<code>head</code>&nbsp;的非空单链表，返回链表的中间结点。</p>\n\n<p>如果有两个中间结点，则返回第二个中间结点。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[1,2,3,4,5]\n<strong>输出：</strong>此列表中的结点 3 (序列化形式：[3,4,5])\n返回的结点值为 3 。 (测评系统对该结点序列化表述是 [3,4,5])。\n注意，我们返回了一个 ListNode 类型的对象 ans，这样：\nans.val = 3, ans.next.val = 4, ans.next.next.val = 5, 以及 ans.next.next.next = NULL.\n</pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre><strong>输入：</strong>[1,2,3,4,5,6]\n<strong>输出：</strong>此列表中的结点 4 (序列化形式：[4,5,6])\n由于该列表有两个中间结点，值分别为 3 和 4，我们返回第二个结点。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>给定链表的结点数介于&nbsp;<code>1</code>&nbsp;和&nbsp;<code>100</code>&nbsp;之间。</li>\n</ul>\n","projection-area-of-3d-shapes":"<p>在&nbsp;<code>N&nbsp;*&nbsp;N</code>&nbsp;的网格中，我们放置了一些与 x，y，z 三轴对齐的&nbsp;<code>1 * 1 * 1</code>&nbsp;立方体。</p>\n\n<p>每个值&nbsp;<code>v = grid[i][j]</code>&nbsp;表示 <code>v</code>&nbsp;个正方体叠放在单元格&nbsp;<code>(i, j)</code>&nbsp;上。</p>\n\n<p>现在，我们查看这些立方体在 xy、yz&nbsp;和 zx&nbsp;平面上的<em>投影</em>。</p>\n\n<p>投影就像影子，将三维形体映射到一个二维平面上。</p>\n\n<p>在这里，从顶部、前面和侧面看立方体时，我们会看到&ldquo;影子&rdquo;。</p>\n\n<p>返回所有三个投影的总面积。</p>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<ul>\n</ul>\n\n<ul>\n</ul>\n\n<ul>\n</ul>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[[2]]\n<strong>输出：</strong>5\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[[1,2],[3,4]]\n<strong>输出：</strong>17\n<strong>解释：</strong>\n这里有该形体在三个轴对齐平面上的三个投影(&ldquo;阴影部分&rdquo;)。\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/02/shadow.png\" style=\"height: 200px; width: 749px;\">\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>[[1,0],[0,2]]\n<strong>输出：</strong>8\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>[[1,1,1],[1,0,1],[1,1,1]]\n<strong>输出：</strong>14\n</pre>\n\n<p><strong>示例 5：</strong></p>\n\n<pre><strong>输入：</strong>[[2,2,2],[2,1,2],[2,2,2]]\n<strong>输出：</strong>21\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= grid.length = grid[0].length&nbsp;&lt;= 50</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 50</code></li>\n</ul>\n","construct-binary-tree-from-preorder-and-postorder-traversal":"<p>返回与给定的前序和后序遍历匹配的任何二叉树。</p>\n\n<p>&nbsp;<code>pre</code>&nbsp;和&nbsp;<code>post</code>&nbsp;遍历中的值是不同的正整数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>pre = [1,2,4,5,3,6,7], post = [4,5,2,6,7,3,1]\n<strong>输出：</strong>[1,2,3,4,5,6,7]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= pre.length == post.length &lt;= 30</code></li>\n\t<li><code>pre[]</code>&nbsp;和&nbsp;<code>post[]</code>&nbsp;都是&nbsp;<code>1, 2, ..., pre.length</code>&nbsp;的排列</li>\n\t<li>每个输入保证至少有一个答案。如果有多个答案，可以返回其中一个。</li>\n</ul>\n","profitable-schemes":"<p>帮派里有 G 名成员，他们可能犯下各种各样的罪行。</p>\n\n<p>第&nbsp;<code>i</code>&nbsp;种犯罪会产生&nbsp;<code>profit[i]</code>&nbsp;的利润，它要求&nbsp;<code>group[i]</code>&nbsp;名成员共同参与。</p>\n\n<p>让我们把这些犯罪的任何子集称为盈利计划，该计划至少产生&nbsp;<code>P</code> 的利润。</p>\n\n<p>有多少种方案可以选择？因为答案很大，所以<strong>返回它模&nbsp;</strong><code>10^9 + 7</code><strong>&nbsp;的值</strong>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;1：</strong></p>\n\n<pre><strong>输入：</strong>G = 5, P = 3, group = [2,2], profit = [2,3]\n<strong>输出：</strong>2\n<strong>解释： </strong>\n至少产生 3 的利润，该帮派可以犯下罪 0 和罪 1 ，或仅犯下罪 1 。\n总的来说，有两种方案。\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入：</strong>G = 10, P = 5, group = [2,3,5], profit = [6,7,8]\n<strong>输出：</strong>7\n<strong>解释：</strong>\n至少产生 5 的利润，只要他们犯其中一种罪就行，所以该帮派可以犯下任何罪行 。\n有 7 种可能的计划：(0)，(1)，(2)，(0,1)，(0,2)，(1,2)，以及 (0,1,2) 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= G &lt;= 100</code></li>\n\t<li><code>0 &lt;= P &lt;= 100</code></li>\n\t<li><code>1 &lt;= group[i] &lt;= 100</code></li>\n\t<li><code>0 &lt;= profit[i] &lt;= 100</code></li>\n\t<li><code>1 &lt;= group.length = profit.length &lt;= 100</code></li>\n</ol>\n\n<p>&nbsp;</p>\n","reachable-nodes-in-subdivided-graph":"<p>从具有&nbsp;<code>0</code> 到 <code>N-1</code> 的结点的<strong>无向</strong>图（&ldquo;原始图&rdquo;）开始，对一些边进行细分。</p>\n\n<p>该图给出如下：<code>edges[k]</code>&nbsp;是整数对&nbsp;<code>(i, j, n)</code>&nbsp;组成的列表，使&nbsp;<code>(i, j)</code> 是原始图的边。</p>\n\n<p><code>n</code> 是该边上<strong>新</strong>结点的总数</p>\n\n<p>然后，将边&nbsp;<code>(i, j)</code>&nbsp;从原始图中删除，将&nbsp;<code>n</code>&nbsp;个新结点&nbsp;<code>(x_1, x_2, ..., x_n)</code>&nbsp;添加到原始图中，</p>\n\n<p>将&nbsp;<code>n+1</code>&nbsp;条新边&nbsp;<code>(i, x_1), (x_1, x_2), (x_2, x_3), ..., (x_{n-1}, x_n), (x_n, j)</code>&nbsp;添加到原始图中。</p>\n\n<p>现在，你将从原始图中的结点&nbsp;<code>0</code>&nbsp;处出发，并且每次移动，你都将沿着一条边行进。</p>\n\n<p>返回最多 <code>M</code> 次移动可以达到的结点数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong><code>edges </code>= [[0,1,10],[0,2,1],[1,2,2]], M = 6, N = 3\n<strong>输出：</strong>13\n<strong>解释：</strong>\n在 M = 6 次移动之后在最终图中可到达的结点如下所示。\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/01/origfinal.png\" style=\"height: 200px; width: 487px;\">\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong><code>edges </code>= [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], M = 10, N = 4\n<strong>输出：</strong>23</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= edges.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= edges[i][0] &lt;&nbsp;edges[i][1] &lt; N</code></li>\n\t<li>不存在任何&nbsp;<code>i != j</code>&nbsp;情况下&nbsp;<code>edges[i][0] == edges[j][0]</code>&nbsp;且&nbsp;<code>edges[i][1] == edges[j][1]</code>.</li>\n\t<li>原始图没有平行的边。</li>\n\t<li><code>0 &lt;= edges[i][2] &lt;= 10000</code></li>\n\t<li><code>0 &lt;= M &lt;= 10^9</code></li>\n\t<li><code>1 &lt;= N &lt;= 3000</code></li>\n</ol>\n\n<p>&nbsp;</p>\n","all-possible-full-binary-trees":"<p><em>满二叉树</em>是一类二叉树，其中每个结点恰好有 0 或 2 个子结点。</p>\n\n<p>返回包含 <code>N</code> 个结点的所有可能满二叉树的列表。 答案的每个元素都是一个可能树的根结点。</p>\n\n<p>答案中每个树的每个<code>结点</code>都<strong>必须</strong>有 <code>node.val=0</code>。</p>\n\n<p>你可以按任何顺序返回树的最终列表。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>7\n<strong>输出：</strong>[[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]\n<strong>解释：</strong>\n<img alt=\"\" src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/08/24/fivetrees.png\" style=\"height: 400px; width: 700px;\">\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= N &lt;= 20</code></li>\n</ul>\n","decoded-string-at-index":"<p>给定一个编码字符串 <code>S</code>。为了找出<em>解码</em>字符串并将其写入磁带，从编码字符串中<code>每次读取一个字符</code>，并采取以下步骤：</p>\n\n<ul>\n\t<li>如果所读的字符是字母，则将该字母写在磁带上。</li>\n\t<li>如果所读的字符是数字（例如 <code>d</code>），则整个当前磁带总共会被重复写&nbsp;<code>d-1</code> 次。</li>\n</ul>\n\n<p>现在，对于给定的编码字符串 <code>S</code> 和索引 <code>K</code>，查找并返回解码字符串中的第&nbsp;<code>K</code>&nbsp;个字母。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>S = &quot;leet2code3&quot;, K = 10\n<strong>输出：</strong>&quot;o&quot;\n<strong>解释：</strong>\n解码后的字符串为 &quot;leetleetcodeleetleetcodeleetleetcode&quot;。\n字符串中的第 10 个字母是 &quot;o&quot;。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>S = &quot;ha22&quot;, K = 5\n<strong>输出：</strong>&quot;h&quot;\n<strong>解释：</strong>\n解码后的字符串为 &quot;hahahaha&quot;。第 5 个字母是 &quot;h&quot;。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>S = &quot;a2345678999999999999999&quot;, K = 1\n<strong>输出：</strong>&quot;a&quot;\n<strong>解释：</strong>\n解码后的字符串为 &quot;a&quot; 重复 8301530446056247680 次。第 1 个字母是 &quot;a&quot;。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= S.length &lt;= 100</code></li>\n\t<li><code>S</code>&nbsp;只包含小写字母与数字 <code>2</code> 到 <code>9</code> 。</li>\n\t<li><code>S</code>&nbsp;以字母开头。</li>\n\t<li><code>1 &lt;= K &lt;= 10^9</code></li>\n\t<li>解码后的字符串保证少于&nbsp;<code>2^63</code>&nbsp;个字母。</li>\n</ol>\n","numbers-at-most-n-given-digit-set":"<p>我们有一组<strong>排序的</strong>数字 <code>D</code>，它是&nbsp; <code>{&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;}</code>&nbsp;的非空子集。（请注意，<code>&#39;0&#39;</code> 不包括在内。）</p>\n\n<p>现在，我们用这些数字进行组合写数字，想用多少次就用多少次。例如&nbsp;<code>D = {&#39;1&#39;,&#39;3&#39;,&#39;5&#39;}</code>，我们可以写出像&nbsp;<code>&#39;13&#39;, &#39;551&#39;, &#39;1351315&#39;</code>&nbsp;这样的数字。</p>\n\n<p>返回可以用 <code>D</code> 中的数字写出的小于或等于 <code>N</code> 的正整数的数目。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>D = [&quot;1&quot;,&quot;3&quot;,&quot;5&quot;,&quot;7&quot;], N = 100\n<strong>输出：</strong>20\n<strong>解释：</strong>\n可写出的 20 个数字是：\n1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>D = [&quot;1&quot;,&quot;4&quot;,&quot;9&quot;], N = 1000000000\n<strong>输出：</strong>29523\n<strong>解释：</strong>\n我们可以写 3 个一位数字，9 个两位数字，27 个三位数字，\n81 个四位数字，243 个五位数字，729 个六位数字，\n2187 个七位数字，6561 个八位数字和 19683 个九位数字。\n总共，可以使用D中的数字写出 29523 个整数。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>D</code> 是按排序顺序的数字 <code>&#39;1&#39;-&#39;9&#39;</code> 的子集。</li>\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\n</ol>\n","increasing-order-search-tree":"<p>给定一个树，<strong>按中序遍历</strong>重新排列树，使树中最左边的结点现在是树的根，并且每个结点没有左子结点，只有一个右子结点。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 ：</strong></p>\n\n<pre><strong>输入：</strong>[5,3,6,2,4,null,8,1,null,null,null,7,9]\n\n       5\n      / \\\n    3    6\n   / \\    \\\n  2   4    8\n&nbsp;/        / \\ \n1        7   9\n\n<strong>输出：</strong>[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]\n\n 1\n&nbsp; \\\n&nbsp;  2\n&nbsp;   \\\n&nbsp;    3\n&nbsp;     \\\n&nbsp;      4\n&nbsp;       \\\n&nbsp;        5\n&nbsp;         \\\n&nbsp;          6\n&nbsp;           \\\n&nbsp;            7\n&nbsp;             \\\n&nbsp;              8\n&nbsp;               \\\n                 9  </pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>给定树中的结点数介于 1 和&nbsp;100 之间。</li>\n\t<li>每个结点都有一个从 0 到 1000 范围内的唯一整数值。</li>\n</ol>\n","walking-robot-simulation":"<p>机器人在一个无限大小的网格上行走，从点&nbsp;(0, 0) 处开始出发，面向北方。该机器人可以接收以下三种类型的命令：</p>\n\n<ul>\n\t<li><code>-2</code>：向左转&nbsp;90 度</li>\n\t<li><code>-1</code>：向右转 90 度</li>\n\t<li><code>1 &lt;= x &lt;= 9</code>：向前移动&nbsp;<code>x</code>&nbsp;个单位长度</li>\n</ul>\n\n<p>在网格上有一些格子被视为障碍物。</p>\n\n<p>第 <code>i</code>&nbsp;个障碍物位于网格点 &nbsp;<code>(obstacles[i][0], obstacles[i][1])</code></p>\n\n<p>如果机器人试图走到障碍物上方，那么它将停留在障碍物的前一个网格方块上，但仍然可以继续该路线的其余部分。</p>\n\n<p>返回从原点到机器人的最大欧式距离的<strong>平方</strong>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入: </strong>commands = [4,-1,3], obstacles = []\n<strong>输出: </strong>25\n<strong>解释:</strong> 机器人将会到达 (3, 4)\n</pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre><strong>输入: </strong>commands = [4,-1,4,-2,4], obstacles = [[2,4]]\n<strong>输出: </strong>65\n<strong>解释</strong>: 机器人在左转走到 (1, 8) 之前将被困在 (1, 4) 处\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= commands.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= obstacles.length &lt;= 10000</code></li>\n\t<li><code>-30000 &lt;= obstacle[i][0] &lt;= 30000</code></li>\n\t<li><code>-30000 &lt;= obstacle[i][1] &lt;= 30000</code></li>\n\t<li>答案保证小于&nbsp;<code>2 ^ 31</code></li>\n</ol>\n","uncommon-words-from-two-sentences":"<p>给定两个句子&nbsp;<code>A</code>&nbsp;和&nbsp;<code>B</code>&nbsp;。&nbsp;（<em>句子</em>是一串由空格分隔的单词。每个<em>单词</em>仅由小写字母组成。）</p>\n\n<p>如果一个单词在其中一个句子中只出现一次，在另一个句子中却没有出现，那么这个单词就是<em>不常见的</em>。</p>\n\n<p>返回所有不常用单词的列表。</p>\n\n<p>您可以按任何顺序返回列表。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>A = &quot;this apple is sweet&quot;, B = &quot;this apple is sour&quot;\n<strong>输出：</strong>[&quot;sweet&quot;,&quot;sour&quot;]\n</pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre><strong>输入：</strong>A = &quot;apple apple&quot;, B = &quot;banana&quot;\n<strong>输出：</strong>[&quot;banana&quot;]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= A.length &lt;= 200</code></li>\n\t<li><code>0 &lt;= B.length &lt;= 200</code></li>\n\t<li><code>A</code> 和&nbsp;<code>B</code>&nbsp;都只包含空格和小写字母。</li>\n</ol>\n","snakes-and-ladders":"<p>在一块 N x N 的板子&nbsp;<code>board</code>&nbsp;上，<strong>从板的左下角开始</strong>，每一行交替方向，按从&nbsp;<code>1</code> 到 <code>N*N</code>&nbsp;的数字给方格编号。例如，对于一块 6 x 6 大小的板子，可以编号如下：</p>\n\n<pre>36 35 34 33 32 31\n25 26 27 28 29 30\n24 23 22 21 20 19\n13 14 15 16 17 18\n12 11 10 09 08 07\n01 02 03 04 05 06\n</pre>\n\n<p>从板子的方块&nbsp;<code>1</code> 开始（总是在最后一行、第一列）出发。</p>\n\n<p>从方块 <code>x</code> 开始，每一次移动都包含以下内容：</p>\n\n<ul>\n\t<li>你选择一个目标方块 <code>S</code>，它的编号是 <code>x+1</code>，<code>x+2</code>，<code>x+3</code>，<code>x+4</code>，<code>x+5</code>，或者 <code>x+6</code>，只要这个数字满足 <code>&lt;= N*N</code>。</li>\n\t<li>如果 <code>S</code> 有一个坡或梯子，你就移动到那个坡或梯子的目的地。否则，你会移动到 <code>S</code>。&nbsp;</li>\n</ul>\n\n<p>在 <code>r</code> 行 <code>c</code> 列上的方格里有 &ldquo;坡&rdquo; 或 &ldquo;梯子&rdquo;；如果 <code>board[r][c] != -1</code>，那个坡或梯子的目的地将会是 <code>board[r][c]</code>。</p>\n\n<p>注意，你每次移动最多只能爬过一个坡或梯子一次：就算目的地是另一个坡或梯子的起点，你也不会继续移动。</p>\n\n<p>返回达到方格 N*N 所需的最少移动次数，如果不可能，则返回 <code>-1</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>[\n[-1,-1,-1,-1,-1,-1],\n[-1,-1,-1,-1,-1,-1],\n[-1,-1,-1,-1,-1,-1],\n[-1,35,-1,-1,13,-1],\n[-1,-1,-1,-1,-1,-1],\n[-1,15,-1,-1,-1,-1]]\n<strong>输出：</strong>4\n<strong>解释：</strong>\n首先，从方格 1 [第 5 行，第 0 列] 开始。\n你决定移动到方格 2，并必须爬过梯子移动到到方格 15。\n然后你决定移动到方格 17 [第 3 行，第 5 列]，必须爬过坡到方格 13。\n然后你决定移动到方格 14，且必须通过梯子移动到方格 35。\n然后你决定移动到方格 36, 游戏结束。\n可以证明你需要至少 4 次移动才能到达第 N*N 个方格，所以答案是 4。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= board.length = board[0].length&nbsp;&lt;= 20</code></li>\n\t<li><code>board[i][j]</code>&nbsp;介于&nbsp;<code>1</code>&nbsp;和&nbsp;<code>N*N</code>&nbsp;之间或者等于&nbsp;<code>-1</code>。</li>\n\t<li>编号为&nbsp;<code>1</code>&nbsp;的方格上没有坡或梯子。</li>\n\t<li>编号为&nbsp;<code>N*N</code>&nbsp;的方格上没有坡或梯子。</li>\n</ol>\n","word-subsets":"<p>我们给出两个单词数组 <code>A</code>&nbsp;和&nbsp;<code>B</code>。每个单词都是一串小写字母。</p>\n\n<p>现在，如果&nbsp;<code>b</code> 中的每个字母都出现在 <code>a</code> 中，<strong>包括重复出现的字母</strong>，那么称单词 <code>b</code> 是单词 <code>a</code> 的子集。 例如，&ldquo;wrr&rdquo; 是 &ldquo;warrior&rdquo; 的子集，但不是 &ldquo;world&rdquo; 的子集。</p>\n\n<p>如果对 <code>B</code> 中的每一个单词&nbsp;<code>b</code>，<code>b</code> 都是 <code>a</code> 的子集，那么我们称&nbsp;<code>A</code> 中的单词 <code>a</code> 是<em>通用的</em>。</p>\n\n<p>你可以按任意顺序以列表形式返回&nbsp;<code>A</code> 中所有的通用单词。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>A = [&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;], B = [&quot;e&quot;,&quot;o&quot;]\n<strong>输出：</strong>[&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>A = [&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;], B = [&quot;l&quot;,&quot;e&quot;]\n<strong>输出：</strong>[&quot;apple&quot;,&quot;google&quot;,&quot;leetcode&quot;]\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>A = [&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;], B = [&quot;e&quot;,&quot;oo&quot;]\n<strong>输出：</strong>[&quot;facebook&quot;,&quot;google&quot;]\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>A = [&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;], B = [&quot;lo&quot;,&quot;eo&quot;]\n<strong>输出：</strong>[&quot;google&quot;,&quot;leetcode&quot;]\n</pre>\n\n<p><strong>示例 5：</strong></p>\n\n<pre><strong>输入：</strong>A = [&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;], B = [&quot;ec&quot;,&quot;oc&quot;,&quot;ceo&quot;]\n<strong>输出：</strong>[&quot;facebook&quot;,&quot;leetcode&quot;]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length, B.length &lt;= 10000</code></li>\n\t<li><code>1 &lt;= A[i].length, B[i].length&nbsp;&lt;= 10</code></li>\n\t<li><code>A[i]</code>&nbsp;和&nbsp;<code>B[i]</code>&nbsp;只由小写字母组成。</li>\n\t<li><code>A[i]</code>&nbsp;中所有的单词都是独一无二的，也就是说不存在&nbsp;<code>i != j</code>&nbsp;使得&nbsp;<code>A[i] == A[j]</code>。</li>\n</ol>\n","bitwise-ors-of-subarrays":"<p>我们有一个非负整数数组&nbsp;<code>A</code>。</p>\n\n<p>对于每个（连续的）子数组&nbsp;<code>B =&nbsp;[A[i], A[i+1], ..., A[j]]</code> （&nbsp;<code>i &lt;= j</code>），我们对&nbsp;<code>B</code>&nbsp;中的每个元素进行按位或操作，获得结果&nbsp;<code>A[i] | A[i+1] | ... | A[j]</code>。</p>\n\n<p>返回可能结果的数量。 （多次出现的结果在最终答案中仅计算一次。）</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[0]\n<strong>输出：</strong>1\n<strong>解释：</strong>\n只有一个可能的结果 0 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[1,1,2]\n<strong>输出：</strong>3\n<strong>解释：</strong>\n可能的子数组为 [1]，[1]，[2]，[1, 1]，[1, 2]，[1, 1, 2]。\n产生的结果为 1，1，2，1，3，3 。\n有三个唯一值，所以答案是 3 。\n</pre>\n\n<p><strong>示例&nbsp;3：</strong></p>\n\n<pre><strong>输入：</strong>[1,2,4]\n<strong>输出：</strong>6\n<strong>解释：</strong>\n可能的结果是 1，2，3，4，6，以及 7 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 50000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 10^9</code></li>\n</ol>\n","random-pick-with-weight":"<p>给定一个正整数数组&nbsp;<code>w</code> ，其中&nbsp;<code>w[i]</code>&nbsp;代表位置&nbsp;<code>i</code>&nbsp;的权重，请写一个函数&nbsp;<code>pickIndex</code>&nbsp;，它可以随机地获取位置&nbsp;<code>i</code>，选取位置&nbsp;<code>i</code>&nbsp;的概率与&nbsp;<code>w[i]</code>&nbsp;成正比。</p>\n\n<p>说明:</p>\n\n<ol>\n\t<li><code>1 &lt;= w.length &lt;= 10000</code></li>\n\t<li><code>1 &lt;= w[i] &lt;= 10^5</code></li>\n\t<li><code>pickIndex</code>&nbsp;将被调用不超过&nbsp;<code>10000</code>&nbsp;次</li>\n</ol>\n\n<p><strong>示例1:</strong></p>\n\n<pre>\n<strong>输入: \n</strong>[&quot;Solution&quot;,&quot;pickIndex&quot;]\n[[[1]],[]]\n<strong>输出: </strong>[null,0]\n</pre>\n\n<p><strong>示例2:</strong></p>\n\n<pre>\n<strong>输入: \n</strong>[&quot;Solution&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;]\n[[[1,3]],[],[],[],[],[]]\n<strong>输出: </strong>[null,0,1,1,1,0]</pre>\n\n<p><strong>输入语法说明：</strong></p>\n\n<p>输入是两个列表：调用成员函数名和调用的参数。<code>Solution</code>&nbsp;的构造函数有一个参数，即数组&nbsp;<code>w</code>。<code>pickIndex</code>&nbsp;没有参数。输入参数是一个列表，即使参数为空，也会输入一个 [] 空列表。</p>\n","smallest-range-ii":"<p>给定一个整数数组 <code>A</code>，对于每个整数 <code>A[i]</code>，我们可以选择<strong>&nbsp;<code>x = -K</code>&nbsp;或是&nbsp;<code>x = K</code></strong>，并将&nbsp;<code>x</code>&nbsp;加到&nbsp;<code>A[i]</code>&nbsp;中。</p>\n\n<p>在此过程之后，我们得到一些数组&nbsp;<code>B</code>。</p>\n\n<p>返回 <code>B</code>&nbsp;的最大值和 <code>B</code>&nbsp;的最小值之间可能存在的最小差值。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>A = [1], K = 0\n<strong>输出：</strong>0\n<strong>解释：</strong>B = [1]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>A = [0,10], K = 2\n<strong>输出：</strong>6\n<strong>解释：</strong>B = [2,8]\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>A = [1,3,6], K = 3\n<strong>输出：</strong>3\n<strong>解释：</strong>B = [4,6,3]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 10000</code></li>\n\t<li><code>0 &lt;= K &lt;= 10000</code></li>\n</ol>\n","push-dominoes":"<p>一行中有 <code>N</code> 张多米诺骨牌，我们将每张多米诺骨牌垂直竖立。</p>\n\n<p>在开始时，我们同时把一些多米诺骨牌向左或向右推。</p>\n\n<p><img alt=\"\" src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/05/19/domino.png\" style=\"height: 160px; width: 418px;\"></p>\n\n<p>每过一秒，倒向左边的多米诺骨牌会推动其左侧相邻的多米诺骨牌。</p>\n\n<p>同样地，倒向右边的多米诺骨牌也会推动竖立在其右侧的相邻多米诺骨牌。</p>\n\n<p>如果同时有多米诺骨牌落在一张垂直竖立的多米诺骨牌的两边，由于受力平衡， 该骨牌仍然保持不变。</p>\n\n<p>就这个问题而言，我们会认为正在下降的多米诺骨牌不会对其它正在下降或已经下降的多米诺骨牌施加额外的力。</p>\n\n<p>给定表示初始状态的字符串 &quot;S&quot; 。如果第 i 张多米诺骨牌被推向左边，则 <code>S[i] = &#39;L&#39;</code>；如果第 i 张多米诺骨牌被推向右边，则 <code>S[i] = &#39;R&#39;</code>；如果第 i 张多米诺骨牌没有被推动，则 <code>S[i] = &#39;.&#39;</code>。</p>\n\n<p>返回表示最终状态的字符串。</p>\n\n<p><strong>示例 </strong><strong>1</strong><strong>：</strong></p>\n\n<pre><strong>输入：</strong>&quot;.L.R...LR..L..&quot;\n<strong>输出：</strong>&quot;LL.RR.LLRRLL..&quot;</pre>\n\n<p><strong>示例 </strong><strong>2</strong><strong>：</strong></p>\n\n<pre><strong>输入：</strong>&quot;RR.L&quot;\n<strong>输出：</strong>&quot;RR.L&quot;\n<strong>说明：</strong>第一张多米诺骨牌没有给第二张施加额外的力。</pre>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= N &lt;= 10^5</code></li>\n\t<li>表示多米诺骨牌状态的字符串只含有 <code>&#39;L&#39;</code>，<code>&#39;R&#39;</code>; 以及 <code>&#39;.&#39;</code>;</li>\n</ol>\n","flipping-an-image":"<p>给定一个二进制矩阵&nbsp;<code>A</code>，我们想先水平翻转图像，然后反转图像并返回结果。</p>\n\n<p>水平翻转图片就是将图片的每一行都进行翻转，即逆序。例如，水平翻转&nbsp;<code>[1, 1, 0]</code>&nbsp;的结果是&nbsp;<code>[0, 1, 1]</code>。</p>\n\n<p>反转图片的意思是图片中的&nbsp;<code>0</code>&nbsp;全部被&nbsp;<code>1</code>&nbsp;替换，&nbsp;<code>1</code>&nbsp;全部被&nbsp;<code>0</code>&nbsp;替换。例如，反转&nbsp;<code>[0, 1, 1]</code>&nbsp;的结果是&nbsp;<code>[1, 0, 0]</code>。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入: </strong>[[1,1,0],[1,0,1],[0,0,0]]\n<strong>输出: </strong>[[1,0,0],[0,1,0],[1,1,1]]\n<strong>解释:</strong> 首先翻转每一行: [[0,1,1],[1,0,1],[0,0,0]]；\n     然后反转图片: [[1,0,0],[0,1,0],[1,1,1]]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入: </strong>[[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]\n<strong>输出: </strong>[[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n<strong>解释:</strong> 首先翻转每一行: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]；\n     然后反转图片: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= A.length = A[0].length &lt;= 20</code></li>\n\t<li><code>0 &lt;= A[i][j]&nbsp;&lt;=&nbsp;1</code></li>\n</ul>\n","prime-palindrome":"<p>求出大于或等于&nbsp;<code>N</code>&nbsp;的最小回文素数。</p>\n\n<p>回顾一下，如果一个数大于 1，且其因数只有 1 和它自身，那么这个数是<em>素数</em>。</p>\n\n<p>例如，2，3，5，7，11 以及&nbsp;13 是素数。</p>\n\n<p>回顾一下，如果一个数从左往右读与从右往左读是一样的，那么这个数是<em>回文数。</em></p>\n\n<p>例如，12321 是回文数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>6\n<strong>输出：</strong>7\n</pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre><strong>输入：</strong>8\n<strong>输出：</strong>11\n</pre>\n\n<p><strong>示例&nbsp;3：</strong></p>\n\n<pre><strong>输入：</strong>13\n<strong>输出：</strong>101</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= N &lt;= 10^8</code></li>\n\t<li>答案肯定存在，且小于&nbsp;<code>2 * 10^8</code>。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n","reordered-power-of-2":"<p>从正整数 <code>N</code>&nbsp;开始，我们按任何顺序（包括原始顺序）将数字重新排序，注意其前导数字不能为零。</p>\n\n<p>如果我们可以通过上述方式得到&nbsp;2 的幂，返回 <code>true</code>；否则，返回 <code>false</code>。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>1\n<strong>输出：</strong>true\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>10\n<strong>输出：</strong>false\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>16\n<strong>输出：</strong>true\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>24\n<strong>输出：</strong>false\n</pre>\n\n<p><strong>示例 5：</strong></p>\n\n<pre><strong>输入：</strong>46\n<strong>输出：</strong>true\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\n</ol>\n","shortest-path-to-get-all-keys":"<p>给定一个二维网格&nbsp;<code>grid</code>。&nbsp;<code>&quot;.&quot;</code>&nbsp;代表一个空房间，&nbsp;<code>&quot;#&quot;</code>&nbsp;代表一堵墙，&nbsp;<code>&quot;@&quot;</code>&nbsp;是起点，（<code>&quot;a&quot;</code>,&nbsp;<code>&quot;b&quot;</code>, ...）代表钥匙，（<code>&quot;A&quot;</code>,&nbsp;<code>&quot;B&quot;</code>, ...）代表锁。</p>\n\n<p>我们从起点开始出发，一次移动是指向四个基本方向之一行走一个单位空间。我们不能在网格外面行走，也无法穿过一堵墙。如果途经一个钥匙，我们就把它捡起来。除非我们手里有对应的钥匙，否则无法通过锁。</p>\n\n<p>假设 K 为钥匙/锁的个数，且满足&nbsp;<code>1 &lt;= K &lt;= 6</code>，字母表中的前 K 个字母在网格中都有自己对应的一个小写和一个大写字母。换言之，每个锁有唯一对应的钥匙，每个钥匙也有唯一对应的锁。另外，代表钥匙和锁的字母互为大小写并按字母顺序排列。</p>\n\n<p>返回获取所有钥匙所需要的移动的最少次数。如果无法获取所有钥匙，返回&nbsp;<code>-1</code>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;@.a.#&quot;,&quot;###.#&quot;,&quot;b.A.B&quot;]\n<strong>输出：</strong>8\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;@..aA&quot;,&quot;..B#.&quot;,&quot;....b&quot;]\n<strong>输出：</strong>6\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= grid.length&nbsp;&lt;= 30</code></li>\n\t<li><code>1 &lt;= grid[0].length&nbsp;&lt;= 30</code></li>\n\t<li><code>grid[i][j]</code>&nbsp;只含有&nbsp;<code>&#39;.&#39;</code>,&nbsp;<code>&#39;#&#39;</code>,&nbsp;<code>&#39;@&#39;</code>,&nbsp;<code>&#39;a&#39;-</code><code>&#39;f</code><code>&#39;</code>&nbsp;以及&nbsp;<code>&#39;A&#39;-&#39;F&#39;</code></li>\n\t<li>钥匙的数目范围是&nbsp;<code>[1, 6]</code>，每个钥匙都对应一个不同的字母，正好打开一个对应的锁。</li>\n</ol>\n","lemonade-change":"<p>在柠檬水摊上，每一杯柠檬水的售价为&nbsp;<code>5</code>&nbsp;美元。</p>\n\n<p>顾客排队购买你的产品，（按账单 <code>bills</code> 支付的顺序）一次购买一杯。</p>\n\n<p>每位顾客只买一杯柠檬水，然后向你付 <code>5</code> 美元、<code>10</code> 美元或 <code>20</code> 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 <code>5</code> 美元。</p>\n\n<p>注意，一开始你手头没有任何零钱。</p>\n\n<p>如果你能给每位顾客正确找零，返回&nbsp;<code>true</code>&nbsp;，否则返回 <code>false</code>&nbsp;。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[5,5,5,10,20]\n<strong>输出：</strong>true\n<strong>解释：\n</strong>前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。\n第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。\n第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。\n由于所有客户都得到了正确的找零，所以我们输出 true。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[5,5,10]\n<strong>输出：</strong>true\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>[10,10]\n<strong>输出：</strong>false\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>[5,5,10,10,20]\n<strong>输出：</strong>false\n<strong>解释：</strong>\n前 2 位顾客那里，我们按顺序收取 2 张 5 美元的钞票。\n对于接下来的 2 位顾客，我们收取一张 10 美元的钞票，然后返还 5 美元。\n对于最后一位顾客，我们无法退回 15 美元，因为我们现在只有两张 10 美元的钞票。\n由于不是每位顾客都得到了正确的找零，所以答案是 false。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= bills.length &lt;= 10000</code></li>\n\t<li><code>bills[i]</code>&nbsp;不是&nbsp;<code>5</code>&nbsp;就是&nbsp;<code>10</code>&nbsp;或是&nbsp;<code>20</code>&nbsp;</li>\n</ul>\n","shifting-letters":"<p>有一个由小写字母组成的字符串 <code>S</code>，和一个整数数组 <code>shifts</code>。</p>\n\n<p>我们将字母表中的下一个字母称为原字母的 <em>移位</em>（由于字母表是环绕的， <code>&#39;z&#39;</code>&nbsp;将会变成&nbsp;<code>&#39;a&#39;</code>）。</p>\n\n<p>例如&middot;，<code>shift(&#39;a&#39;) = &#39;b&#39;</code>，&nbsp;<code>shift(&#39;t&#39;) = &#39;u&#39;</code>,， 以及&nbsp;<code>shift(&#39;z&#39;) = &#39;a&#39;</code>。</p>\n\n<p>对于每个&nbsp;<code>shifts[i] = x</code>&nbsp;， 我们会将 <code>S</code>&nbsp;中的前&nbsp;<code>i+1</code>&nbsp;个字母移位&nbsp;<code>x</code>&nbsp;次。</p>\n\n<p>返回将所有这些移位都应用到 <code>S</code> 后最终得到的字符串。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>S = &quot;abc&quot;, shifts = [3,5,9]\n<strong>输出：</strong>&quot;rpl&quot;\n<strong>解释： </strong>\n我们以 &quot;abc&quot; 开始。\n将 S 中的第 1 个字母移位 3 次后，我们得到 &quot;dbc&quot;。\n再将 S 中的前 2 个字母移位 5 次后，我们得到 &quot;igc&quot;。\n最后将 S 中的这 3 个字母移位 9 次后，我们得到答案 &quot;rpl&quot;。\n</pre>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= S.length = shifts.length &lt;= 20000</code></li>\n\t<li><code>0 &lt;= shifts[i] &lt;= 10 ^ 9</code></li>\n</ol>\n","split-array-into-fibonacci-sequence":"<p>给定一个数字字符串 <code>S</code>，比如 <code>S = &quot;123456579&quot;</code>，我们可以将它分成斐波那契式的序列 <code>[123, 456, 579]</code>。</p>\n\n<p>形式上，斐波那契式序列是一个非负整数列表 <code>F</code>，且满足：</p>\n\n<ul>\n\t<li><code>0 &lt;= F[i] &lt;= 2^31 - 1</code>，（也就是说，每个整数都符合 32 位有符号整数类型）；</li>\n\t<li><code>F.length &gt;= 3</code>；</li>\n\t<li>对于所有的<code>0 &lt;= i &lt; F.length - 2</code>，都有 <code>F[i] + F[i+1] = F[i+2]</code> 成立。</li>\n</ul>\n\n<p>另外，请注意，将字符串拆分成小块时，每个块的数字一定不要以零开头，除非这个块是数字 0 本身。</p>\n\n<p>返回从 <code>S</code> 拆分出来的所有斐波那契式的序列块，如果不能拆分则返回 <code>[]</code>。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>&quot;123456579&quot;\n<strong>输出：</strong>[123,456,579]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入: </strong>&quot;11235813&quot;\n<strong>输出: </strong>[1,1,2,3,5,8,13]\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入: </strong>&quot;112358130&quot;\n<strong>输出: </strong>[]\n<strong>解释: </strong>这项任务无法完成。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>&quot;0123&quot;\n<strong>输出：</strong>[]\n<strong>解释：</strong>每个块的数字不能以零开头，因此 &quot;01&quot;，&quot;2&quot;，&quot;3&quot; 不是有效答案。\n</pre>\n\n<p><strong>示例 5：</strong></p>\n\n<pre><strong>输入: </strong>&quot;1101111&quot;\n<strong>输出: </strong>[110, 1, 111]\n<strong>解释: </strong>输出 [11,0,11,11] 也同样被接受。\n</pre>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= S.length&nbsp;&lt;= 200</code></li>\n\t<li>字符串 <code>S</code> 中只含有数字。</li>\n</ol>\n","consecutive-numbers-sum":"<p>给定一个正整数 <code>N</code>，试求有多少组连续正整数满足所有数字之和为 <code>N</code>?</p>\n\n<p><strong>示</strong><strong>例 1:</strong></p>\n\n<pre>\n<strong>输入: </strong>5\n<strong>输出: </strong>2\n<strong>解释: </strong>5 = 5 = 2 + 3，共有两组连续整数([5],[2,3])求和后为 5。</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入: </strong>9\n<strong>输出: </strong>3\n<strong>解释: </strong>9 = 9 = 4 + 5 = 2 + 3 + 4</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入: </strong>15\n<strong>输出: </strong>4\n<strong>解释: </strong>15 = 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5</pre>\n\n<p><strong>说明:&nbsp;</strong><code>1 &lt;= N &lt;= 10 ^ 9</code></p>\n","keys-and-rooms":"<p>有 <code>N</code> 个房间，开始时你位于 <code>0</code> 号房间。每个房间有不同的号码：<code>0，1，2，...，N-1</code>，并且房间里可能有一些钥匙能使你进入下一个房间。</p>\n\n<p>在形式上，对于每个房间 <code>i</code> 都有一个钥匙列表 <code>rooms[i]</code>，每个钥匙 <code>rooms[i][j]</code> 由 <code>[0,1，...，N-1]</code> 中的一个整数表示，其中 <code>N = rooms.length</code>。 钥匙 <code>rooms[i][j] = v</code> 可以打开编号为 <code>v</code> 的房间。</p>\n\n<p>最初，除 <code>0</code> 号房间外的其余所有房间都被锁住。</p>\n\n<p>你可以自由地在房间之间来回走动。</p>\n\n<p>如果能进入每个房间返回 <code>true</code>，否则返回 <code>false</code>。</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入: </strong>[[1],[2],[3],[]]\n<strong>输出: </strong>true\n<strong>解释:  </strong>\n我们从 0 号房间开始，拿到钥匙 1。\n之后我们去 1 号房间，拿到钥匙 2。\n然后我们去 2 号房间，拿到钥匙 3。\n最后我们去了 3 号房间。\n由于我们能够进入每个房间，我们返回 true。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[[1,3],[3,0,1],[2],[0]]\n<strong>输出：</strong>false\n<strong>解释：</strong>我们不能进入 2 号房间。\n</pre>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= rooms.length &lt;=&nbsp;1000</code></li>\n\t<li><code>0 &lt;= rooms[i].length &lt;= 1000</code></li>\n\t<li>所有房间中的钥匙数量总计不超过&nbsp;<code>3000</code>。</li>\n</ol>\n","binary-gap":"<p>给定一个正整数&nbsp;<code>N</code>，找到并返回 <code>N</code>&nbsp;的二进制表示中两个连续的 1 之间的最长距离。&nbsp;</p>\n\n<p>如果没有两个连续的 1，返回 <code>0</code> 。</p>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>22\n<strong>输出：</strong>2\n<strong>解释：</strong>\n22 的二进制是 0b10110 。\n在 22 的二进制表示中，有三个 1，组成两对连续的 1 。\n第一对连续的 1 中，两个 1 之间的距离为 2 。\n第二对连续的 1 中，两个 1 之间的距离为 1 。\n答案取两个距离之中最大的，也就是 2 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>5\n<strong>输出：</strong>2\n<strong>解释：</strong>\n5 的二进制是 0b101 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>6\n<strong>输出：</strong>1\n<strong>解释：</strong>\n6 的二进制是 0b110 。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>8\n<strong>输出：</strong>0\n<strong>解释：</strong>\n8 的二进制是 0b1000 。\n在 8 的二进制表示中没有连续的 1，所以返回 0 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\n</ul>\n","backspace-string-compare":"<p>给定 <code>S</code> 和 <code>T</code> 两个字符串，当它们分别被输入到空白的文本编辑器后，判断二者是否相等，并返回结果。 <code>#</code> 代表退格字符。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>S = &quot;ab#c&quot;, T = &quot;ad#c&quot;\n<strong>输出：</strong>true\n<strong>解释：</strong>S 和 T 都会变成 &ldquo;ac&rdquo;。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>S = &quot;ab##&quot;, T = &quot;c#d#&quot;\n<strong>输出：</strong>true\n<strong>解释：</strong>S 和 T 都会变成 &ldquo;&rdquo;。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>S = &quot;a##c&quot;, T = &quot;#a#c&quot;\n<strong>输出：</strong>true\n<strong>解释：</strong>S 和 T 都会变成 &ldquo;c&rdquo;。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>S = &quot;a#c&quot;, T = &quot;b&quot;\n<strong>输出：</strong>false\n<strong>解释：</strong>S 会变成 &ldquo;c&rdquo;，但 T 仍然是 &ldquo;b&rdquo;。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= S.length &lt;= 200</code></li>\n\t<li><code>1 &lt;= T.length &lt;= 200</code></li>\n\t<li><code>S</code> 和 <code>T</code> 只含有小写字母以及字符 <code>&#39;#&#39;</code>。</li>\n</ol>\n\n<p>&nbsp;</p>\n","score-after-flipping-matrix":"<p>有一个二维矩阵&nbsp;<code>A</code> 其中每个元素的值为&nbsp;<code>0</code>&nbsp;或&nbsp;<code>1</code>&nbsp;。</p>\n\n<p>移动是指选择任一行或列，并转换该行或列中的每一个值：将所有 <code>0</code> 都更改为 <code>1</code>，将所有 <code>1</code> 都更改为 <code>0</code>。</p>\n\n<p>在做出任意次数的移动后，将该矩阵的每一行都按照二进制数来解释，矩阵的得分就是这些数字的总和。</p>\n\n<p>返回尽可能高的分数。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>[[0,0,1,1],[1,0,1,0],[1,1,0,0]]\n<strong>输出：</strong>39\n<strong>解释：\n</strong>转换为 [[1,1,1,1],[1,0,0,1],[1,1,1,1]]\n0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 20</code></li>\n\t<li><code>1 &lt;= A[0].length &lt;= 20</code></li>\n\t<li><code>A[i][j]</code>&nbsp;是&nbsp;<code>0</code> 或&nbsp;<code>1</code></li>\n</ol>\n","rectangle-area-ii":"<p>我们给出了一个（轴对齐的）矩形列表&nbsp;<code>rectangles</code>&nbsp;。 对于&nbsp;<code>rectangle[i] = [x1, y1, x2, y2]</code>，其中（x1，y1）是矩形&nbsp;<code>i</code>&nbsp;左下角的坐标，（x2，y2）是该矩形右上角的坐标。</p>\n\n<p>找出平面中所有矩形叠加覆盖后的总面积。 由于答案可能太大，<strong>请返回它对 10 ^ 9 + 7 取模的结果</strong>。</p>\n\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/06/rectangle_area_ii_pic.png\" style=\"height: 360px; width: 480px;\"></p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[[0,0,2,2],[1,0,2,3],[1,0,3,1]]\n<strong>输出：</strong>6\n<strong>解释：</strong>如图所示。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[[0,0,1000000000,1000000000]]\n<strong>输出：</strong>49\n<strong>解释：</strong>答案是 10^18 对 (10^9 + 7) 取模的结果， 即 (10^9)^2 &rarr; (-7)^2 = 49 。\n</pre>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= rectangles.length &lt;= 200</code></li>\n\t<li><code>rectanges[i].length = 4</code></li>\n\t<li><code>0 &lt;= rectangles[i][j] &lt;= 10^9</code></li>\n\t<li>矩形叠加覆盖后的总面积不会超越&nbsp;<code>2^63 - 1</code>&nbsp;，这意味着可以用一个&nbsp;64 位有符号整数来保存面积结果。</li>\n</ul>\n","mirror-reflection":"<p>有一个特殊的正方形房间，每面墙上都有一面镜子。除西南角以外，每个角落都放有一个接受器，编号为&nbsp;<code>0</code>，&nbsp;<code>1</code>，以及&nbsp;<code>2</code>。</p>\n\n<p>正方形房间的墙壁长度为&nbsp;<code>p</code>，一束激光从西南角射出，首先会与东墙相遇，入射点到接收器 <code>0</code> 的距离为 <code>q</code> 。</p>\n\n<p>返回光线最先遇到的接收器的编号（保证光线最终会遇到一个接收器）。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入： </strong>p = 2, q = 1\n<strong>输出： </strong>2\n<strong>解释： </strong>这条光线在第一次被反射回左边的墙时就遇到了接收器 2 。\n<img alt=\"\" src=\"https://ibb.co/mYSFJT\"><img alt=\"\" src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/06/22/reflection.png\" style=\"height: 217px; width: 218px;\"></pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= p &lt;= 1000</code></li>\n\t<li><code>0 &lt;= q &lt;= p</code></li>\n</ol>\n","all-nodes-distance-k-in-binary-tree":"<p>给定一个二叉树（具有根结点&nbsp;<code>root</code>），&nbsp;一个目标结点&nbsp;<code>target</code>&nbsp;，和一个整数值 <code>K</code> 。</p>\n\n<p>返回到目标结点 <code>target</code> 距离为 <code>K</code> 的所有结点的值的列表。 答案可以以任何顺序返回。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2\n\n<strong>输出：</strong>[7,4,1]\n\n<strong>解释：</strong>\n所求结点为与目标结点（值为 5）距离为 2 的结点，\n值分别为 7，4，以及 1\n\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/28/sketch0.png\" style=\"height: 240px; width: 280px;\">\n\n注意，输入的 &quot;root&quot; 和 &quot;target&quot; 实际上是树上的结点。\n上面的输入仅仅是对这些对象进行了序列化描述。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>给定的树是非空的，且最多有&nbsp;<code>K</code>&nbsp;个结点。</li>\n\t<li>树上的每个结点都具有唯一的值&nbsp;<code>0 &lt;= node.val &lt;= 500</code>&nbsp;。</li>\n\t<li>目标结点&nbsp;<code>target</code>&nbsp;是树上的结点。</li>\n\t<li><code>0 &lt;= K &lt;= 1000</code>.</li>\n</ol>\n","car-fleet":"<p><code>N</code> &nbsp;辆车沿着一条车道驶向位于&nbsp;<code>target</code>&nbsp;英里之外的共同目的地。</p>\n\n<p>每辆车&nbsp;<code>i</code>&nbsp;以恒定的速度&nbsp;<code>speed[i]</code>&nbsp;（英里/小时），从初始位置&nbsp;<code>position[i]</code>&nbsp;（英里） 沿车道驶向目的地。</p>\n\n<p>一辆车永远不会超过前面的另一辆车，但它可以追上去，并与前车以相同的速度紧接着行驶。</p>\n\n<p>此时，我们会忽略这两辆车之间的距离，也就是说，它们被假定处于相同的位置。</p>\n\n<p><em>车队&nbsp;</em>是一些由行驶在相同位置、具有相同速度的车组成的非空集合。注意，一辆车也可以是一个车队。</p>\n\n<p>即便一辆车在目的地才赶上了一个车队，它们仍然会被视作是同一个车队。</p>\n\n<p>&nbsp;</p>\n\n<p>会有多少车队到达目的地?</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]\n<strong>输出：</strong>3\n<strong>解释：</strong>\n从 10 和 8 开始的车会组成一个车队，它们在 12 处相遇。\n从 0 处开始的车无法追上其它车，所以它自己就是一个车队。\n从 5 和 3 开始的车会组成一个车队，它们在 6 处相遇。\n请注意，在到达目的地之前没有其它车会遇到这些车队，所以答案是 3。\n</pre>\n\n<p><br>\n<strong>提示：</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= N &lt;= 10 ^ 4</code></li>\n\t<li><code>0 &lt; target&nbsp;&lt;= 10 ^ 6</code></li>\n\t<li><code>0 &lt;&nbsp;speed[i] &lt;= 10 ^ 6</code></li>\n\t<li><code>0 &lt;= position[i] &lt; target</code></li>\n\t<li>所有车的初始位置各不相同。</li>\n</ol>\n","new-21-game":"<p>爱丽丝参与一个大致基于纸牌游戏 &ldquo;21点&rdquo; 规则的游戏，描述如下：</p>\n\n<p>爱丽丝以 <code>0</code> 分开始，并在她的得分少于 <code>K</code> 分时抽取数字。 抽取时，她从 <code>[1, W]</code> 的范围中随机获得一个整数作为分数进行累计，其中 <code>W</code> 是整数。 每次抽取都是独立的，其结果具有相同的概率。</p>\n\n<p>当爱丽丝获得不少于 <code>K</code> 分时，她就停止抽取数字。 爱丽丝的分数不超过 <code>N</code> 的概率是多少？</p>\n\n<p><strong>示例</strong><strong> 1</strong><strong>：</strong></p>\n\n<pre><strong>输入：</strong>N = 10, K = 1, W = 10\n<strong>输出：</strong>1.00000\n<strong>说明：</strong>爱丽丝得到一张卡，然后停止。</pre>\n\n<p><strong>示例 </strong><strong>2</strong><strong>：</strong></p>\n\n<pre><strong>输入：</strong>N = 6, K = 1, W = 10\n<strong>输出：</strong>0.60000\n<strong>说明：</strong>爱丽丝得到一张卡，然后停止。\n在 W = 10 的 6 种可能下，她的得分不超过 N = 6 分。</pre>\n\n<p><strong>示例 </strong><strong>3</strong><strong>：</strong></p>\n\n<pre><strong>输入：</strong>N = 21, K = 17, W = 10\n<strong>输出：</strong>0.73278</pre>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= K &lt;= N &lt;= 10000</code></li>\n\t<li><code>1 &lt;= W &lt;= 10000</code></li>\n\t<li>如果答案与正确答案的误差不超过 <code>10^-5</code>，则该答案将被视为正确答案通过。</li>\n\t<li>此问题的判断限制时间已经减少。</li>\n</ol>\n","magic-squares-in-grid":"<p>3 x 3 的幻方是一个填充有<strong>从 1 到 9</strong> 的不同数字的 3 x 3 矩阵，其中每行，每列以及两条对角线上的各数之和都相等。</p>\n\n<p>给定一个由整数组成的 N &times; N 矩阵，其中有多少个 3 &times; 3 的 &ldquo;幻方&rdquo; 子矩阵？（每个子矩阵都是连续的）。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong>[[4,3,8,4],\n      [9,5,1,9],\n      [2,7,6,2]]\n<strong>输出: </strong>1\n<strong>解释: </strong>\n下面的子矩阵是一个 3 x 3 的幻方：\n438\n951\n276\n\n而这一个不是：\n384\n519\n762\n\n总的来说，在本示例所给定的矩阵中只有一个 3 x 3 的幻方子矩阵。\n</pre>\n\n<p><strong>提示:</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= grid.length = grid[0].length&nbsp;&lt;= 10</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 15</code></li>\n</ol>\n","score-of-parentheses":"<p>给定一个平衡括号字符串&nbsp;<code>S</code>，按下述规则计算该字符串的分数：</p>\n\n<ul>\n\t<li><code>()</code> 得 1 分。</li>\n\t<li><code>AB</code> 得&nbsp;<code>A + B</code>&nbsp;分，其中 A 和 B 是平衡括号字符串。</li>\n\t<li><code>(A)</code> 得&nbsp;<code>2 * A</code>&nbsp;分，其中 A 是平衡括号字符串。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入： </strong>&quot;()&quot;\n<strong>输出： </strong>1\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入： </strong>&quot;(())&quot;\n<strong>输出： </strong>2\n</pre>\n\n<p><strong>示例&nbsp;3：</strong></p>\n\n<pre><strong>输入： </strong>&quot;()()&quot;\n<strong>输出： </strong>2\n</pre>\n\n<p><strong>示例&nbsp;4：</strong></p>\n\n<pre><strong>输入： </strong>&quot;(()(()))&quot;\n<strong>输出： </strong>6\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>S</code>&nbsp;是平衡括号字符串，且只含有&nbsp;<code>(</code>&nbsp;和&nbsp;<code>)</code>&nbsp;。</li>\n\t<li><code>2 &lt;= S.length &lt;= 50</code></li>\n</ol>\n","robot-room-cleaner":null,"k-similar-strings":"<p>如果可以通过将 <code>A</code> 中的两个小写字母精确地交换位置 <code>K</code> 次得到与 <code>B</code> 相等的字符串，我们称字符串&nbsp;<code>A</code>&nbsp;和&nbsp;<code>B</code>&nbsp;的相似度为 <code>K</code>（<code>K</code>&nbsp;为非负整数）。</p>\n\n<p>给定两个字母异位词&nbsp;<code>A</code>&nbsp;和&nbsp;<code>B</code>&nbsp;，返回 <code>A</code> 和 <code>B</code>&nbsp;的相似度 <code>K</code> 的最小值。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>A = &quot;ab&quot;, B = &quot;ba&quot;\n<strong>输出：</strong>1\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>A = &quot;abc&quot;, B = &quot;bca&quot;\n<strong>输出：</strong>2\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>A = &quot;abac&quot;, B = &quot;baca&quot;\n<strong>输出：</strong>2\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>A = &quot;aabc&quot;, B = &quot;abca&quot;\n<strong>输出：</strong>2</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length == B.length &lt;= 20</code></li>\n\t<li><code>A</code>&nbsp;和&nbsp;<code>B</code>&nbsp;只包含集合&nbsp;<code>{&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;}</code>&nbsp;中的小写字母。</li>\n</ol>\n","making-a-large-island":"<p>在二维地图上，&nbsp;<code>0</code>代表海洋，&nbsp;<code>1</code>代表陆地，我们最多只能将一格&nbsp;<code>0</code> 海洋变成&nbsp;<code>1</code>变成陆地。</p>\n\n<p>进行填海之后，地图上最大的岛屿面积是多少？（上、下、左、右四个方向相连的&nbsp;<code>1</code>&nbsp;可形成岛屿）</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入: </strong>[[1, 0], [0, 1]]\n<strong>输出:</strong> 3\n<strong>解释:</strong> 将一格0变成1，最终连通两个小岛得到面积为 3 的岛屿。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入: </strong>[[1, 1], [1, 0]]\n<strong>输出:</strong> 4\n<strong>解释:</strong> 将一格0变成1，岛屿的面积扩大为 4。</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入: </strong>[[1, 1], [1, 1]]\n<strong>输出:</strong> 4\n<strong>解释:</strong> 没有0可以让我们变成1，面积依然为 4。</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= grid.length = grid[0].length &lt;= 50</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 1</code></li>\n</ul>\n","exam-room":"<p>在考场里，一排有&nbsp;<code>N</code>&nbsp;个座位，分别编号为&nbsp;<code>0, 1, 2, ..., N-1</code>&nbsp;。</p>\n\n<p>当学生进入考场后，他必须坐在能够使他与离他最近的人之间的距离达到最大化的座位上。如果有多个这样的座位，他会坐在编号最小的座位上。(另外，如果考场里没有人，那么学生就坐在 0 号座位上。)</p>\n\n<p>返回&nbsp;<code>ExamRoom(int N)</code>&nbsp;类，它有两个公开的函数：其中，函数&nbsp;<code>ExamRoom.seat()</code>&nbsp;会返回一个&nbsp;<code>int</code>&nbsp;（整型数据），代表学生坐的位置；函数&nbsp;<code>ExamRoom.leave(int p)</code>&nbsp;代表坐在座位 <code>p</code> 上的学生现在离开了考场。请确保每次调用&nbsp;<code>ExamRoom.leave(p)</code>&nbsp;时都有学生坐在座位&nbsp;<code>p</code>&nbsp;上。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;ExamRoom&quot;,&quot;seat&quot;,&quot;seat&quot;,&quot;seat&quot;,&quot;seat&quot;,&quot;leave&quot;,&quot;seat&quot;], [[10],[],[],[],[],[4],[]]\n<strong>输出：</strong>[null,0,9,4,2,null,5]\n<strong>解释：</strong>\nExamRoom(10) -&gt; null\nseat() -&gt; 0，没有人在考场里，那么学生坐在 0 号座位上。\nseat() -&gt; 9，学生最后坐在 9 号座位上。\nseat() -&gt; 4，学生最后坐在 4 号座位上。\nseat() -&gt; 2，学生最后坐在 2 号座位上。\nleave(4) -&gt; null\nseat() -&gt; 5，学生最后坐在 5 号座位上。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\n\t<li>在所有的测试样例中&nbsp;<code>ExamRoom.seat()</code>&nbsp;和&nbsp;<code>ExamRoom.leave()</code>&nbsp;最多被调用&nbsp;<code>10^4</code>&nbsp;次。</li>\n\t<li>调用&nbsp;<code>ExamRoom.leave(p)</code>&nbsp;时需要确保当前有学生坐在座位 <code>p</code> 上。</li>\n</ol>\n","unique-letter-string":"<p>如果一个字符在字符串&nbsp;<code>S</code>&nbsp;中有且仅有出现一次，那么我们称其为独特字符。</p>\n\n<p>例如，在字符串&nbsp;<code>S = &quot;LETTER&quot;</code>&nbsp;中，<code>&quot;L&quot;</code>&nbsp;和&nbsp;<code>&quot;R&quot;</code>&nbsp;可以被称为独特字符。</p>\n\n<p>我们再定义&nbsp;<code>UNIQ(S)</code>&nbsp;作为字符串&nbsp;<code>S</code>&nbsp;中独特字符的个数。</p>\n\n<p>那么，在&nbsp;<code>S = &quot;LETTER&quot;</code>&nbsp;中，&nbsp;<code>UNIQ(&quot;LETTER&quot;) =&nbsp; 2</code>。</p>\n\n<p>对于给定字符串&nbsp;<code>S</code>，计算其所有非空子串的独特字符的个数，即&nbsp;<code>UNIQ(substring)</code>。</p>\n\n<p>如果出现两个或者多个相同的子串，将其认为是不同的两个子串。</p>\n\n<p>考虑到答案可能会非常大，规定返回格式为：结果 mod&nbsp;<code>10 ^ 9 + 7</code>。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入: </strong>&quot;ABC&quot;\n<strong>输出: </strong>10\n<strong>解释:</strong> 所有可能的子串为：&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;AB&quot;,&quot;BC&quot; 和 &quot;ABC&quot;。\n     其中，每一个子串都由独特字符构成。\n     所以其长度总和为：1 + 1 + 1 + 2 + 2 + 3 = 10\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入: </strong>&quot;ABA&quot;\n<strong>输出: </strong>8\n<strong>解释: </strong>除了子串 UNIQ(&#39;ABA&#39;) = 1，其余与示例1相同。\n</pre>\n\n<p><strong>说明:</strong> <code>0 &lt;= S.length &lt;= 10000</code>。</p>\n","shortest-path-visiting-all-nodes":"<p>给出&nbsp;<code>graph</code>&nbsp;为有 N 个节点（编号为&nbsp;<code>0, 1, 2, ..., N-1</code>）的无向连通图。&nbsp;</p>\n\n<p><code>graph.length = N</code>，且只有节点 <code>i</code>&nbsp;和 <code>j</code>&nbsp;连通时，<code>j != i</code>&nbsp;在列表&nbsp;<code>graph[i]</code>&nbsp;中恰好出现一次。</p>\n\n<p>返回能够访问所有节点的最短路径的长度。你可以在任一节点开始和停止，也可以多次重访节点，并且可以重用边。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[[1,2,3],[0],[0],[0]]\n<strong>输出：</strong>4\n<strong>解释：</strong>一个可能的路径为 [1,0,2,0,3]</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[[1],[0,2,4],[1,3,4],[2],[1,2]]\n<strong>输出：</strong>4\n<strong>解释：</strong>一个可能的路径为 [0,1,4,2,3]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= graph.length &lt;= 12</code></li>\n\t<li><code>0 &lt;= graph[i].length &lt;&nbsp;graph.length</code></li>\n</ol>\n","image-overlap":"<p>给出两个图像 <code>A</code> 和 <code>B</code>&nbsp;，<code>A</code> 和 <code>B</code>&nbsp;为大小相同的二维正方形矩阵。（并且为二进制矩阵，只包含0和1）。</p>\n\n<p>我们转换其中一个图像，向左，右，上，或下滑动任何数量的单位，并把它放在另一个图像的上面。之后，该转换的重叠是指两个图像都具有 1 的位置的数目。</p>\n\n<p>（请注意，转换不包括向任何方向旋转。）</p>\n\n<p>最大可能的重叠是什么？</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入：</strong>A = [[1,1,0],\n          [0,1,0],\n&nbsp;         [0,1,0]]\n&nbsp;    B = [[0,0,0],\n&nbsp;         [0,1,1],\n&nbsp;         [0,0,1]]\n<strong>输出：</strong>3\n<strong>解释:</strong> 将 A 向右移动一个单位，然后向下移动一个单位。</pre>\n\n<p><strong>注意:</strong>&nbsp;</p>\n\n<ol>\n\t<li><code>1 &lt;= A.length = A[0].length = B.length = B[0].length &lt;= 30</code></li>\n\t<li><code>0 &lt;=&nbsp;A[i][j], B[i][j] &lt;= 1</code></li>\n</ol>\n","peak-index-in-a-mountain-array":"<p>我们把符合下列属性的数组&nbsp;<code>A</code>&nbsp;称作山脉：</p>\n\n<ul>\n\t<li><code>A.length &gt;= 3</code></li>\n\t<li>存在 <code>0 &lt; i&nbsp;&lt; A.length - 1</code> 使得<code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]</code></li>\n</ul>\n\n<p>给定一个确定为山脉的数组，返回任何满足&nbsp;<code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]</code>&nbsp;的 <code>i</code>&nbsp;的值。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[0,1,0]\n<strong>输出：</strong>1\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[0,2,1,0]\n<strong>输出：</strong>1</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>3 &lt;= A.length &lt;= 10000</code></li>\n\t<li>0 &lt;= A[i] &lt;= 10^6</li>\n\t<li>A 是如上定义的山脉</li>\n</ol>\n\n<p>&nbsp;</p>\n","transpose-matrix":"<p>给定一个矩阵&nbsp;<code>A</code>，&nbsp;返回&nbsp;<code>A</code>&nbsp;的转置矩阵。</p>\n\n<p>矩阵的转置是指将矩阵的主对角线翻转，交换矩阵的行索引与列索引。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[[1,2,3],[4,5,6],[7,8,9]]\n<strong>输出：</strong>[[1,4,7],[2,5,8],[3,6,9]]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[[1,2,3],[4,5,6]]\n<strong>输出：</strong>[[1,4],[2,5],[3,6]]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length&nbsp;&lt;= 1000</code></li>\n\t<li><code>1 &lt;= A[0].length&nbsp;&lt;= 1000</code></li>\n</ol>\n","guess-the-word":"<p>这个问题是 LeetCode 平台新增的<strong><em>交互式问题 </em></strong>。</p>\n\n<p>我们给出了一个由一些独特的单词组成的单词列表，每个单词都是 6 个字母长，并且这个列表中的一个单词将被选作<strong>秘密</strong>。</p>\n\n<p>你可以调用 <code>master.guess(word)</code> 来猜单词。你所猜的单词应当是存在于原列表并且由 6 个小写字母组成的类型<code>字符串</code>。</p>\n\n<p>此函数将会返回一个<code>整型数字</code>，表示你的猜测与<strong>秘密单词</strong>的准确匹配（值和位置同时匹配）的数目。此外，如果你的猜测不在给定的单词列表中，它将返回 <code>-1</code>。</p>\n\n<p>对于每个测试用例，你有 10 次机会来猜出这个单词。当所有调用都结束时，如果您对 <code>master.guess</code> 的调用不超过 10 次，并且至少有一次猜到<strong>秘密</strong>，那么您将通过该测试用例。</p>\n\n<p>除了下面示例给出的测试用例外，还会有 5 个额外的测试用例，每个单词列表中将会有 100 个单词。这些测试用例中的每个单词的字母都是从 <code>&#39;a&#39;</code> 到 <code>&#39;z&#39;</code>&nbsp;中随机选取的，并且保证给定单词列表中的每个单词都是唯一的。</p>\n\n<pre><strong>示例 1:</strong>\n<strong>输入:</strong>&nbsp;secret = &quot;acckzz&quot;, wordlist = [&quot;acckzz&quot;,&quot;ccbazz&quot;,&quot;eiowzz&quot;,&quot;abcczz&quot;]\n\n<strong>解释:</strong>\n\n<code>master.guess(&quot;aaaaaa&quot;)</code> 返回 -1, 因为&nbsp;<code>&quot;aaaaaa&quot;</code>&nbsp;不在 wordlist 中.\n<code>master.guess(&quot;acckzz&quot;) 返回</code> 6, 因为&nbsp;<code>&quot;acckzz&quot;</code> 就是<strong>秘密</strong>，6个字母完全匹配。\n<code>master.guess(&quot;ccbazz&quot;)</code> 返回 3, 因为<code>&nbsp;&quot;ccbazz&quot;</code>&nbsp;有 3 个匹配项。\n<code>master.guess(&quot;eiowzz&quot;)</code> 返回 2, 因为&nbsp;<code>&quot;eiowzz&quot;</code>&nbsp;有 2 个匹配项。\n<code>master.guess(&quot;abcczz&quot;)</code> 返回 4, 因为&nbsp;<code>&quot;abcczz&quot;</code> 有 4 个匹配项。\n\n我们调用了 5 次master.guess，其中一次猜到了<strong>秘密</strong>，所以我们通过了这个测试用例。\n</pre>\n\n<p><strong>提示：</strong>任何试图绕过评判的解决方案都将导致比赛资格被取消。</p>\n","maximize-distance-to-closest-person":"<p>在一排座位（&nbsp;<code>seats</code>）中，<code>1</code>&nbsp;代表有人坐在座位上，<code>0</code>&nbsp;代表座位上是空的。</p>\n\n<p>至少有一个空座位，且至少有一人坐在座位上。</p>\n\n<p>亚历克斯希望坐在一个能够使他与离他最近的人之间的距离达到最大化的座位上。</p>\n\n<p>返回他到离他最近的人的最大距离。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[1,0,0,0,1,0,1]\n<strong>输出：</strong>2\n<strong>解释：\n</strong>如果亚历克斯坐在第二个空位（seats[2]）上，他到离他最近的人的距离为 2 。\n如果亚历克斯坐在其它任何一个空位上，他到离他最近的人的距离为 1 。\n因此，他到离他最近的人的最大距离是 2 。 \n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[1,0,0,0]\n<strong>输出：</strong>3\n<strong>解释： </strong>\n如果亚历克斯坐在最后一个座位上，他离最近的人有 3 个座位远。\n这是可能的最大距离，所以答案是 <span style=\"\">3 </span>。\n</pre>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= seats.length &lt;= 20000</code></li>\n\t<li><code>seats</code>&nbsp;中只含有 0 和 1，至少有一个 <code>0</code>，且至少有一个 <code>1</code>。</li>\n</ol>\n","implement-rand10-using-rand7":"<p>已有方法&nbsp;<code>rand7</code>&nbsp;可生成 1 到 7 范围内的均匀随机整数，试写一个方法&nbsp;<code>rand10</code>&nbsp;生成 1 到 10 范围内的均匀随机整数。</p>\n\n<p>不要使用系统的&nbsp;<code>Math.random()</code>&nbsp;方法。</p>\n\n<ol>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入: </strong>1\n<strong>输出: </strong>[7]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入: </strong>2\n<strong>输出: </strong>[8,4]\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入: </strong>3\n<strong>输出: </strong>[8,1,10]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示:</strong></p>\n\n<ol>\n\t<li><code>rand7</code>&nbsp;已定义。</li>\n\t<li>传入参数:&nbsp;<code>n</code>&nbsp;表示&nbsp;<code>rand10</code>&nbsp;的调用次数。</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶:</strong></p>\n\n<ol>\n\t<li><code>rand7()</code>调用次数的&nbsp;<a href=\"https://en.wikipedia.org/wiki/Expected_value\" target=\"_blank\">期望值</a>&nbsp;是多少&nbsp;?</li>\n\t<li>你能否尽量少调用 <code>rand7()</code> ?</li>\n</ol>\n","sum-of-distances-in-tree":"<p>给定一个无向、连通的树。树中有 <code>N</code> 个标记为 <code>0...N-1</code> 的节点以及 <code>N-1</code>&nbsp;条边&nbsp;。</p>\n\n<p>第 <code>i</code> 条边连接节点&nbsp;<code>edges[i][0]</code> 和 <code>edges[i][1]</code>&nbsp;。</p>\n\n<p>返回一个表示节点 <code>i</code> 与其他所有节点距离之和的列表 <code>ans</code>。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入: </strong>N = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]\n<strong>输出: </strong>[8,12,6,10,10,10]\n<strong>解释: </strong>\n如下为给定的树的示意图：\n  0\n / \\\n1   2\n   /|\\\n  3 4 5\n\n我们可以计算出 dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5) \n也就是 1 + 1 + 2 + 2 + 2 = 8。 因此，answer[0] = 8，以此类推。\n</pre>\n\n<p><strong>说明:</strong>&nbsp;<code>1 &lt;= N &lt;= 10000</code></p>\n","shortest-subarray-with-sum-at-least-k":"<p>返回 <code>A</code> 的最短的非空连续子数组的<strong>长度</strong>，该子数组的和至少为 <code>K</code> 。</p>\n\n<p>如果没有和至少为&nbsp;<code>K</code>&nbsp;的非空子数组，返回&nbsp;<code>-1</code>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>A = [1], K = 1\n<strong>输出：</strong>1\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>A = [1,2], K = 4\n<strong>输出：</strong>-1\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>A = [2,-1,2], K = 3\n<strong>输出：</strong>3\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 50000</code></li>\n\t<li><code>-10 ^ 5&nbsp;&lt;= A[i] &lt;= 10 ^ 5</code></li>\n\t<li><code>1 &lt;= K &lt;= 10 ^ 9</code></li>\n</ol>\n","hand-of-straights":"<p>爱丽丝有一手（<code>hand</code>）由整数数组给定的牌。&nbsp;</p>\n\n<p>现在她想把牌重新排列成组，使得每个组的大小都是 <code>W</code>，且由 <code>W</code> 张连续的牌组成。</p>\n\n<p>如果她可以完成分组就返回 <code>true</code>，否则返回 <code>false</code>。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>hand = [1,2,3,6,2,3,4,7,8], W = 3\n<strong>输出：</strong>true\n<strong>解释：</strong>爱丽丝的手牌可以被重新排列为 <code>[1,2,3]，[2,3,4]，[6,7,8]</code>。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>hand = [1,2,3,4,5], W = 4\n<strong>输出：</strong>false\n<strong>解释：</strong>爱丽丝的手牌无法被重新排列成几个大小为 4 的组。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= hand.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= hand[i]&nbsp;&lt;= 10^9</code></li>\n\t<li><code>1 &lt;= W &lt;= hand.length</code></li>\n</ol>\n","masking-personal-information":"<p>给你一条个人信息 string <code>S</code>，它可能是一个邮箱地址，也可能是一个电话号码。</p>\n\n<p>我们将隐藏它的隐私信息，通过如下规则:</p>\n\n<p>1. 电子邮箱</p>\n\n<p>定义名称 &lt;name&gt; 的长度大于2，并且只包含小写字母 a-z 和大写字母 A-Z。</p>\n\n<p>电子邮箱地址由名称 &lt;name&gt; 开头，紧接着是符号&nbsp;<a href=\"mailto:'@'\">&#39;@&#39;</a>，后面接着一个名称 &lt;name&gt;，再接着一个点号 &#39;.&#39;，然后是一个名称 &lt;name&gt;。</p>\n\n<p>电子邮箱地址确定为有效的，并且格式是&quot;<a href=\"mailto:name1@name2.name3\">name1@name2.name3</a>&quot;。</p>\n\n<p>为了隐藏电子邮箱，所有的名称 &lt;name&gt; 必须被转换成小写的，并且第一个名称 &lt;name&gt; 的第一个字母和最后一个字母的中间的所有字母由 5 个 &#39;*&#39; 代替。</p>\n\n<p>2. 电话号码</p>\n\n<p>电话号码是一串包括数组 0-9，以及 {&#39;+&#39;, &#39;-&#39;, &#39;(&#39;, &#39;)&#39;, &#39;&nbsp;&#39;} 这几个字符的字符串。你可以假设电话号码包含 10 到 13 个数字。</p>\n\n<p>电话号码的最后 10 个数字组成本地号码，在这之前的数字组成国际号码。注意，国际号码是可选的。我们只暴露最后 4 个数字并隐藏所有其他数字。</p>\n\n<p>本地号码是有格式的，并且如 &quot;***-***-1111&quot; 这样显示，这里的 1 表示暴露的数字。</p>\n\n<p>为了隐藏有国际号码的电话号码，像 &quot;+111 111 111 1111&quot;，我们以 &quot;+***-***-***-1111&quot; 的格式来显示。在本地号码前面的 &#39;+&#39; 号和第一个 &#39;-&#39; 号仅当电话号码中包含国际号码时存在。例如，一个 12 位的电话号码应当以 &quot;+**-&quot; 开头进行显示。</p>\n\n<p>注意：像 &quot;(&quot;，&quot;)&quot;，&quot; &quot; 这样的不相干的字符以及不符合上述格式的额外的减号或者加号都应当被删除。</p>\n\n<p>&nbsp;</p>\n\n<p>最后，将提供的信息正确隐藏后返回。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入: </strong>&quot;LeetCode@LeetCode.com&quot;\n<strong>输出: </strong>&quot;l*****e@leetcode.com&quot;\n<strong>解释： \n</strong>所有的名称转换成小写, 第一个名称的第一个字符和最后一个字符中间由 5 个星号代替。\n因此，&quot;leetcode&quot; -&gt; &quot;l*****e&quot;。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入: </strong>&quot;AB@qq.com&quot;\n<strong>输出: </strong>&quot;a*****b@qq.com&quot;\n<strong>解释:&nbsp;\n</strong>第一个名称&quot;ab&quot;的第一个字符和最后一个字符的中间必须有 5 个星号\n因此，&quot;ab&quot; -&gt; &quot;a*****b&quot;。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入: </strong>&quot;1(234)567-890&quot;\n<strong>输出: </strong>&quot;***-***-7890&quot;\n<strong>解释:</strong>&nbsp;\n10 个数字的电话号码，那意味着所有的数字都是本地号码。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre>\n<strong>输入: </strong>&quot;86-(10)12345678&quot;\n<strong>输出: </strong>&quot;+**-***-***-5678&quot;\n<strong>解释:</strong>&nbsp;\n12 位数字，2 个数字是国际号码另外 10 个数字是本地号码 。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li><code>S.length&nbsp;&lt;=&nbsp;40</code>。</li>\n\t<li>邮箱的长度至少是 8。</li>\n\t<li>电话号码的长度至少是 10。</li>\n</ol>\n","loud-and-rich":"<p>在一组 N 个人（编号为&nbsp;<code>0, 1, 2, ..., N-1</code>）中，每个人都有不同数目的钱，以及不同程度的安静（quietness）。</p>\n\n<p>为了方便起见，我们将编号为&nbsp;<code>x</code>&nbsp;的人简称为 &quot;person&nbsp;<code>x</code>&nbsp;&quot;。</p>\n\n<p>如果能够肯定 person&nbsp;<code>x</code>&nbsp;比 person&nbsp;<code>y</code>&nbsp;更有钱的话，我们会说&nbsp;<code>richer[i] = [x, y]</code>&nbsp;。注意&nbsp;<code>richer</code>&nbsp;可能只是有效观察的一个子集。</p>\n\n<p>另外，如果 person&nbsp;<code>x</code>&nbsp;的安静程度为&nbsp;<code>q</code>&nbsp;，我们会说&nbsp;<code>quiet[x] = q</code>&nbsp;。</p>\n\n<p>现在，返回答案&nbsp;<code>answer</code>&nbsp;，其中&nbsp;<code>answer[x] = y</code>&nbsp;的前提是，在所有拥有的钱不少于&nbsp;person&nbsp;<code>x</code>&nbsp;的人中，person&nbsp;<code>y</code>&nbsp;是最安静的人（也就是安静值&nbsp;<code>quiet[y]</code>&nbsp;最小的人）。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]\n<strong>输出：</strong>[5,5,2,5,4,5,6,7]\n<strong>解释： </strong>\nanswer[0] = 5，\nperson 5 比 person 3 有更多的钱，person 3 比 person 1 有更多的钱，person 1 比 person 0 有更多的钱。\n唯一较为安静（有较低的安静值 quiet[x]）的人是 person 7，\n但是目前还不清楚他是否比 person 0 更有钱。\n\nanswer[7] = 7，\n在所有拥有的钱肯定不少于 person 7 的人中(这可能包括 person 3，4，5，6 以及 7)，\n最安静(有较低安静值 quiet[x])的人是 person 7。\n\n其他的答案也可以用类似的推理来解释。\n</pre>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= quiet.length = N &lt;= 500</code></li>\n\t<li><code>0 &lt;= quiet[i] &lt; N</code>，所有&nbsp;<code>quiet[i]</code>&nbsp;都不相同。</li>\n\t<li><code>0 &lt;= richer.length &lt;= N * (N-1) / 2</code></li>\n\t<li><code>0 &lt;= richer[i][j] &lt; N</code></li>\n\t<li><code>richer[i][0] != richer[i][1]</code></li>\n\t<li><code>richer[i]</code>&nbsp;都是不同的。</li>\n\t<li>对&nbsp;<code>richer</code>&nbsp;的观察在逻辑上是一致的。</li>\n</ol>\n","longest-mountain-in-array":"<p>我们把数组 A 中符合下列属性的任意连续子数组 B 称为 &ldquo;<em>山脉&rdquo;</em>：</p>\n\n<ul>\n\t<li><code>B.length &gt;= 3</code></li>\n\t<li>存在 <code>0 &lt; i&nbsp;&lt; B.length - 1</code> 使得 <code>B[0] &lt; B[1] &lt; ... B[i-1] &lt; B[i] &gt; B[i+1] &gt; ... &gt; B[B.length - 1]</code></li>\n</ul>\n\n<p>（注意：B 可以是 A 的任意子数组，包括整个数组 A。）</p>\n\n<p>给出一个整数数组 <code>A</code>，返回最长 <em>&ldquo;山脉&rdquo;</em>&nbsp;的长度。</p>\n\n<p>如果不含有 &ldquo;<em>山脉&rdquo;&nbsp;</em>则返回 <code>0</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[2,1,4,7,3,2,5]\n<strong>输出：</strong>5\n<strong>解释：</strong>最长的 &ldquo;山脉&rdquo; 是 [1,4,7,3,2]，长度为 5。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[2,2,2]\n<strong>输出：</strong>0\n<strong>解释：</strong>不含 &ldquo;山脉&rdquo;。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 10000</code></li>\n</ol>\n","smallest-subtree-with-all-the-deepest-nodes":"<p>给定一个根为&nbsp;<code>root</code>&nbsp;的二叉树，每个结点的<em>深度</em>是它到根的最短距离。</p>\n\n<p>如果一个结点在<strong>整个树</strong>的任意结点之间具有最大的深度，则该结点是<em>最深的</em>。</p>\n\n<p>一个结点的子树是该结点加上它的所有后代的集合。</p>\n\n<p>返回能满足&ldquo;以该结点为根的子树中包含所有最深的结点&rdquo;这一条件的具有最大深度的结点。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>[3,5,1,6,2,0,8,null,null,7,4]\n<strong>输出：</strong>[2,7,4]\n<strong>解释：</strong>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/01/sketch1.png\" style=\"height: 238px; width: 280px;\">\n我们返回值为 2 的结点，在图中用黄色标记。\n在图中用蓝色标记的是树的最深的结点。\n输入 &quot;[3, 5, 1, 6, 2, 0, 8, null, null, 7, 4]&quot; 是对给定的树的序列化表述。\n输出 &quot;[2, 7, 4]&quot; 是对根结点的值为 2 的子树的序列化表述。\n输入和输出都具有 TreeNode 类型。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>树中结点的数量介于&nbsp;1 和&nbsp;500 之间。</li>\n\t<li>每个结点的值都是独一无二的。</li>\n</ul>\n","design-circular-queue":"<p>设计你的循环队列实现。 循环队列是一种线性数据结构，其操作表现基于 FIFO（先进先出）原则并且队尾被连接在队首之后以形成一个循环。它也被称为&ldquo;环形缓冲器&rdquo;。<br />\n循环队列的一个好处是我们可以利用这个队列之前用过的空间。在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，即使在队列前面仍有空间。但是使用循环队列，我们能使用这些空间去存储新的值。<br />\n你的实现应该支持如下操作：</p>\n\n<ul>\n\t<li>MyCircularQueue(k): 构造器，设置队列长度为 k 。</li>\n\t<li>Front: 从队首获取元素。如果队列为空，返回 -1 。</li>\n\t<li>Rear: 获取队尾元素。如果队列为空，返回 -1 。</li>\n\t<li>enQueue(value): 向循环队列插入一个元素。如果成功插入则返回真。</li>\n\t<li>deQueue(): 从循环队列中删除一个元素。如果成功删除则返回真。</li>\n\t<li>isEmpty(): 检查循环队列是否为空。</li>\n\t<li>isFull(): 检查循环队列是否已满。</li>\n</ul>\n\n<p><strong>示例：</strong></p>\n\n<pre>\nMyCircularQueue circularQueue = new MycircularQueue(3); // 设置长度为3\n\ncircularQueue.enQueue(1); &nbsp;// 返回true\n\ncircularQueue.enQueue(2); &nbsp;// 返回true\n\ncircularQueue.enQueue(3); &nbsp;// 返回true\n\ncircularQueue.enQueue(4); &nbsp;// 返回false,队列已满\n\ncircularQueue.Rear(); &nbsp;// 返回3\n\ncircularQueue.isFull(); &nbsp;// 返回true\n\ncircularQueue.deQueue(); &nbsp;// 返回true\n\ncircularQueue.enQueue(4); &nbsp;// 返回true\n\ncircularQueue.Rear(); &nbsp;// 返回4\n&nbsp;</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>所有的值都在 1 至 1000 的范围内；</li>\n\t<li>操作数将在 1 至 1000 的范围内；</li>\n\t<li>请不要使用内置的队列库。</li>\n</ul>\n","advantage-shuffle":"<p>给定两个大小相等的数组&nbsp;<code>A</code>&nbsp;和&nbsp;<code>B</code>，A 相对于 B 的<em>优势</em>可以用满足&nbsp;<code>A[i] &gt; B[i]</code>&nbsp;的索引 <code>i</code>&nbsp;的数目来描述。</p>\n\n<p>返回&nbsp;<code>A</code>&nbsp;的<strong>任意</strong>排列，使其相对于 <code>B</code>&nbsp;的优势最大化。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>A = [2,7,11,15], B = [1,10,4,11]\n<strong>输出：</strong>[2,11,7,15]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>A = [12,24,8,32], B = [13,25,32,11]\n<strong>输出：</strong>[24,32,8,12]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length = B.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 10^9</code></li>\n\t<li><code>0 &lt;= B[i] &lt;= 10^9</code></li>\n</ol>\n","design-circular-deque":"<p>设计实现双端队列。<br>\n你的实现需要支持以下操作：</p>\n\n<ul>\n\t<li>MyCircularDeque(k)：构造函数,双端队列的大小为k。</li>\n\t<li>insertFront()：将一个元素添加到双端队列头部。 如果操作成功返回 true。</li>\n\t<li>insertLast()：将一个元素添加到双端队列尾部。如果操作成功返回 true。</li>\n\t<li>deleteFront()：从双端队列头部删除一个元素。 如果操作成功返回 true。</li>\n\t<li>deleteLast()：从双端队列尾部删除一个元素。如果操作成功返回 true。</li>\n\t<li>getFront()：从双端队列头部获得一个元素。如果双端队列为空，返回 -1。</li>\n\t<li>getRear()：获得双端队列的最后一个元素。&nbsp;如果双端队列为空，返回 -1。</li>\n\t<li>isEmpty()：检查双端队列是否为空。</li>\n\t<li>isFull()：检查双端队列是否满了。</li>\n</ul>\n\n<p><strong>示例：</strong></p>\n\n<pre>MyCircularDeque circularDeque = new MycircularDeque(3); // 设置容量大小为3\ncircularDeque.insertLast(1);\t\t\t        // 返回 true\ncircularDeque.insertLast(2);\t\t\t        // 返回 true\ncircularDeque.insertFront(3);\t\t\t        // 返回 true\ncircularDeque.insertFront(4);\t\t\t        // 已经满了，返回 false\ncircularDeque.getRear();  \t\t\t\t// 返回 2\ncircularDeque.isFull();\t\t\t\t        // 返回 true\ncircularDeque.deleteLast();\t\t\t        // 返回 true\ncircularDeque.insertFront(4);\t\t\t        // 返回 true\ncircularDeque.getFront();\t\t\t\t// 返回 4\n&nbsp;</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>所有值的范围为 [1, 1000]</li>\n\t<li>操作次数的范围为 [1, 1000]</li>\n\t<li>请不要使用内置的双端队列库。</li>\n</ul>\n","buddy-strings":"<p>给定两个由小写字母构成的字符串&nbsp;<code>A</code>&nbsp;和&nbsp;<code>B</code>&nbsp;，只要我们可以通过交换 <code>A</code> 中的两个字母得到与 <code>B</code> 相等的结果，就返回&nbsp;<code>true</code>&nbsp;；否则返回 <code>false</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入： </strong>A = &quot;ab&quot;, B = &quot;ba&quot;\n<strong>输出： </strong>true\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入： </strong>A = &quot;ab&quot;, B = &quot;ab&quot;\n<strong>输出： </strong>false\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入： </strong>A = &quot;aa&quot;, B = &quot;aa&quot;\n<strong>输出： </strong>true\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入： </strong>A = &quot;aaaaaaabc&quot;, B = &quot;aaaaaaacb&quot;\n<strong>输出： </strong>true\n</pre>\n\n<p><strong>示例 5：</strong></p>\n\n<pre><strong>输入： </strong>A = &quot;&quot;, B = &quot;aa&quot;\n<strong>输出： </strong>false\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= A.length &lt;= 20000</code></li>\n\t<li><code>0 &lt;= B.length &lt;= 20000</code></li>\n\t<li><code>A</code>&nbsp;和&nbsp;<code>B</code>&nbsp;仅由小写字母构成。</li>\n</ol>\n","rectangle-overlap":"<p>矩形以列表 <code>[x1, y1, x2, y2]</code> 的形式表示，其中 <code>(x1, y1)</code> 为左下角的坐标，<code>(x2, y2)</code> 是右上角的坐标。</p>\n\n<p>如果相交的面积为正，则称两矩形重叠。需要明确的是，只在角或边接触的两个矩形不构成重叠。</p>\n\n<p>给出两个矩形，判断它们是否重叠并返回结果。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>rec1 = [0,0,2,2], rec2 = [1,1,3,3]\n<strong>输出：</strong>true\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>rec1 = [0,0,1,1], rec2 = [1,0,2,1]\n<strong>输出：</strong>false\n</pre>\n\n<p><strong>说明：</strong></p>\n\n<ol>\n\t<li>两个矩形 <code>rec1</code> 和 <code>rec2</code> 都以含有四个整数的列表的形式给出。</li>\n\t<li>矩形中的所有坐标都处于 <code>-10^9</code> 和 <code>10^9</code> 之间。</li>\n</ol>\n","similar-string-groups":"<p>如果我们交换字符串&nbsp;<code>X</code> 中的两个不同位置的字母，使得它和字符串&nbsp;<code>Y</code> 相等，那么称 <code>X</code> 和 <code>Y</code> 两个字符串相似。</p>\n\n<p>例如，<code>&quot;tars&quot;</code> 和 <code>&quot;rats&quot;</code> 是相似的 (交换 <code>0</code> 与 <code>2</code> 的位置)；&nbsp;<code>&quot;rats&quot;</code> 和 <code>&quot;arts&quot;</code> 也是相似的，但是 <code>&quot;star&quot;</code> 不与 <code>&quot;tars&quot;</code>，<code>&quot;rats&quot;</code>，或 <code>&quot;arts&quot;</code> 相似。</p>\n\n<p>总之，它们通过相似性形成了两个关联组：<code>{&quot;tars&quot;, &quot;rats&quot;, &quot;arts&quot;}</code> 和 <code>{&quot;star&quot;}</code>。注意，<code>&quot;tars&quot;</code> 和 <code>&quot;arts&quot;</code> 是在同一组中，即使它们并不相似。形式上，对每个组而言，要确定一个单词在组中，只需要这个词和该组中至少一个单词相似。</p>\n\n<p>我们给出了一个不包含重复的字符串列表 <code>A</code>。列表中的每个字符串都是 <code>A</code> 中其它所有字符串的一个字母异位词。请问 <code>A</code> 中有多少个相似字符串组？</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;tars&quot;,&quot;rats&quot;,&quot;arts&quot;,&quot;star&quot;]\n<strong>输出：</strong>2</pre>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>A.length &lt;= 2000</code></li>\n\t<li><code>A[i].length &lt;= 1000</code></li>\n\t<li><code>A.length * A[i].length &lt;= 20000</code></li>\n\t<li><code>A</code> 中的所有单词都只包含小写字母。</li>\n\t<li><code>A</code> 中的所有单词都具有相同的长度，且是彼此的字谜。</li>\n\t<li>此问题的判断限制时间已经延长。</li>\n</ol>\n\n<p><strong>备注：</strong></p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 字母异位词[anagram]，一种把某个字符串的字母的位置（顺序）加以改换所形成的新词。</p>\n","minimum-number-of-refueling-stops":"<p>汽车从起点出发驶向目的地，该目的地位于出发位置东面 <code>target</code>&nbsp;英里处。</p>\n\n<p>沿途有加油站，每个&nbsp;<code>station[i]</code>&nbsp;代表一个加油站，它位于出发位置东面&nbsp;<code>station[i][0]</code>&nbsp;英里处，并且有&nbsp;<code>station[i][1]</code>&nbsp;升汽油。</p>\n\n<p>假设汽车油箱的容量是无限的，其中最初有&nbsp;<code>startFuel</code>&nbsp;升燃料。它每行驶 1 英里就会用掉 1 升汽油。</p>\n\n<p>当汽车到达加油站时，它可能停下来加油，将所有汽油从加油站转移到汽车中。</p>\n\n<p>为了到达目的地，汽车所必要的最低加油次数是多少？如果无法到达目的地，则返回 <code>-1</code> 。</p>\n\n<p>注意：如果汽车到达加油站时剩余燃料为 0，它仍然可以在那里加油。如果汽车到达目的地时剩余燃料为 0，仍然认为它已经到达目的地。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>target = 1, startFuel = 1, stations = []\n<strong>输出：</strong>0\n<strong>解释：</strong>我们可以在不加油的情况下到达目的地。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>target = 100, startFuel = 1, stations = [[10,100]]\n<strong>输出：</strong>-1\n<strong>解释：</strong>我们无法抵达目的地，甚至无法到达第一个加油站。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]\n<strong>输出：</strong>2\n<strong>解释：</strong>\n我们出发时有 10 升燃料。\n我们开车来到距起点 10 英里处的加油站，消耗 10 升燃料。将汽油从 0 升加到 60 升。\n然后，我们从 10 英里处的加油站开到 60 英里处的加油站（消耗 50 升燃料），\n并将汽油从 10 升加到 50 升。然后我们开车抵达目的地。\n我们沿途在1两个加油站停靠，所以返回 2 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= target, startFuel, stations[i][1] &lt;= 10^9</code></li>\n\t<li><code>0 &lt;= stations.length &lt;= 500</code></li>\n\t<li><code>0 &lt; stations[0][0] &lt; stations[1][0] &lt; ... &lt; stations[stations.length-1][0] &lt; target</code></li>\n</ol>\n","minimum-cost-to-hire-k-workers":"<p>有 <code>N</code>&nbsp;名工人。&nbsp;第&nbsp;<code>i</code>&nbsp;名工人的工作质量为&nbsp;<code>quality[i]</code>&nbsp;，其最低期望工资为&nbsp;<code>wage[i]</code>&nbsp;。</p>\n\n<p>现在我们想雇佣&nbsp;<code>K</code>&nbsp;名工人组成一个<em>工资组。</em>在雇佣&nbsp;一组 K 名工人时，我们必须按照下述规则向他们支付工资：</p>\n\n<ol>\n\t<li>对工资组中的每名工人，应当按其工作质量与同组其他工人的工作质量的比例来支付工资。</li>\n\t<li>工资组中的每名工人至少应当得到他们的最低期望工资。</li>\n</ol>\n\n<p>返回组成一个满足上述条件的工资组至少需要多少钱。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入： </strong>quality = [10,20,5], wage = [70,50,30], K = 2\n<strong>输出： </strong>105.00000\n<strong>解释：</strong> 我们向 0 号工人支付 70，向 2 号工人支付 35。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入： </strong>quality = [3,1,10,10,1], wage = [4,8,2,2,7], K = 3\n<strong>输出： </strong>30.66667\n<strong>解释： </strong>我们向 0 号工人支付 4，向 2 号和 3 号分别支付 13.33333。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= K &lt;= N &lt;= 10000</code>，其中&nbsp;<code>N = quality.length = wage.length</code></li>\n\t<li><code>1 &lt;= quality[i] &lt;= 10000</code></li>\n\t<li><code>1 &lt;= wage[i] &lt;= 10000</code></li>\n\t<li>与正确答案误差在&nbsp;<code>10^-5</code>&nbsp;之内的答案将被视为正确的。</li>\n</ol>\n","find-and-replace-in-string":"<p>对于某些字符串 <code>S</code>，我们将执行一些替换操作，用新的字母组替换原有的字母组（不一定大小相同）。</p>\n\n<p>每个替换操作具有 3 个参数：起始索引 <code>i</code>，源字 <code>x</code> 和目标字 <code>y</code>。规则是如果 <code>x</code> 从<strong>原始字符串 <code>S</code></strong> 中的位置 <code>i</code> 开始，那么我们将用 <code>y</code> 替换出现的 <code>x</code>。如果没有，我们什么都不做。</p>\n\n<p>举个例子，如果我们有 <code>S&nbsp;= &ldquo;abcd&rdquo;</code> 并且我们有一些替换操作 <code>i = 2，x = &ldquo;cd&rdquo;，y = &ldquo;ffff&rdquo;</code>，那么因为 <code>&ldquo;cd&rdquo;</code> 从原始字符串 <code>S</code> 中的位置 <code>2</code> 开始，我们将用&nbsp;<code>&ldquo;ffff&rdquo;</code> 替换它。</p>\n\n<p>再来看 <code>S = &ldquo;abcd&rdquo;</code> 上的另一个例子，如果我们有替换操作<code> i = 0，x = &ldquo;ab&rdquo;，y = &ldquo;eee&rdquo;</code>，以及另一个替换操作 <code>i = 2，x = &ldquo;ec&rdquo;，y = &ldquo;ffff&rdquo;</code>，那么第二个操作将不执行任何操作，因为原始字符串中&nbsp;<code>S[2] = &#39;c&#39;</code>，与 <code>x[0] = &#39;e&#39;</code> 不匹配。</p>\n\n<p>所有这些操作同时发生。保证在替换时不会有任何重叠：&nbsp;<code>S = &quot;abc&quot;, indexes = [0, 1],&nbsp;sources = [&quot;ab&quot;,&quot;bc&quot;]</code> 不是有效的测试用例。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>S = &quot;abcd&quot;, indexes = [0,2], sources = [&quot;a&quot;,&quot;cd&quot;], targets = [&quot;eee&quot;,&quot;ffff&quot;]\n<strong>输出：</strong>&quot;eeebffff&quot;\n<strong>解释：\n</strong>&quot;a&quot; 从 S 中的索引 0 开始，所以它被替换为 &quot;eee&quot;。\n&quot;cd&quot; 从 S 中的索引 2 开始，所以它被替换为 &quot;ffff&quot;。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>S = &quot;abcd&quot;, indexes = [0,2], sources = [&quot;ab&quot;,&quot;ec&quot;], targets = [&quot;eee&quot;,&quot;ffff&quot;]\n<strong>输出：</strong>&quot;eeecd&quot;\n<strong>解释：\n</strong>&quot;ab&quot; 从 S 中的索引 0 开始，所以它被替换为 &quot;eee&quot;。\n&quot;ec&quot; 没有从<strong>原始的</strong> S 中的索引 2 开始，所以它没有被替换。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>0 &lt;=&nbsp;indexes.length =&nbsp;sources.length =&nbsp;targets.length &lt;= 100</code></li>\n\t<li><code>0&nbsp;&lt;&nbsp;indexes[i]&nbsp;&lt; S.length &lt;= 1000</code></li>\n\t<li>给定输入中的所有字符都是小写字母。</li>\n</ol>\n\n<p>&nbsp;</p>\n","random-pick-with-blacklist":"<p>给定一个包含 [0，n ) 中独特的整数的黑名单 B，写一个函数从 [ 0，n ) 中返回一个<strong>不在</strong> B 中的随机整数。</p>\n\n<p>对它进行优化使其尽量少调用系统方法 <code>Math.random()</code> 。</p>\n\n<p><strong>提示:</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 1000000000</code></li>\n\t<li><code>0 &lt;= B.length &lt; min(100000, N)</code></li>\n\t<li><code>[0, N)</code>&nbsp;不包含&nbsp;N，详细参见&nbsp;<a href=\"https://en.wikipedia.org/wiki/Interval_(mathematics)\" target=\"_blank\">interval notation</a>&nbsp;。</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入: \n</strong>[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\n[[1,[]],[],[],[]]\n<strong>输出: </strong>[null,0,0,0]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入: \n</strong>[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\n[[2,[]],[],[],[]]\n<strong>输出: </strong>[null,1,1,1]\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入: \n</strong>[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\n[[3,[1]],[],[],[]]\n<strong>Output: </strong>[null,0,0,2]\n</pre>\n\n<p><strong>示例 4:</strong></p>\n\n<pre>\n<strong>输入: \n</strong>[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\n[[4,[2]],[],[],[]]\n<strong>输出: </strong>[null,1,3,1]\n</pre>\n\n<p><strong>输入语法说明：</strong></p>\n\n<p>输入是两个列表：调用成员函数名和调用的参数。<code>Solution</code>的构造函数有两个参数，<code>N</code>&nbsp;和黑名单&nbsp;<code>B</code>。<code>pick</code>&nbsp;没有参数，输入参数是一个列表，即使参数为空，也会输入一个 [] 空列表。</p>\n","positions-of-large-groups":"<p>在一个由小写字母构成的字符串&nbsp;<code>S</code>&nbsp;中，包含由一些连续的相同字符所构成的分组。</p>\n\n<p>例如，在字符串 <code>S = &quot;abbxxxxzyy&quot;</code>&nbsp;中，就含有 <code>&quot;a&quot;</code>, <code>&quot;bb&quot;</code>, <code>&quot;xxxx&quot;</code>, <code>&quot;z&quot;</code> 和 <code>&quot;yy&quot;</code> 这样的一些分组。</p>\n\n<p>我们称所有包含大于或等于三个连续字符的分组为较大分组。找到每一个较大分组的起始和终止位置。</p>\n\n<p>最终结果按照字典顺序输出。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>\n<strong>输入: </strong>&quot;abbxxxxzzy&quot;\n<strong>输出: </strong>[[3,6]]\n<strong>解释</strong>: <code>&quot;xxxx&quot; 是一个起始于 3 且终止于 6 的较大分组</code>。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入: </strong>&quot;abc&quot;\n<strong>输出: </strong>[]\n<strong>解释</strong>: &quot;a&quot;,&quot;b&quot; 和 &quot;c&quot; 均不是符合要求的较大分组。\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入: </strong>&quot;abcdddeeeeaabbbcd&quot;\n<strong>输出: </strong>[[3,5],[6,9],[12,14]]</pre>\n\n<p><strong>说明:&nbsp;</strong>&nbsp;<code>1 &lt;= S.length &lt;= 1000</code></p>\n","goat-latin":"<p>给定一个由空格分割单词的句子&nbsp;<code>S</code>。每个单词只包含大写或小写字母。</p>\n\n<p>我们要将句子转换为&nbsp;<em>&ldquo;Goat Latin&rdquo;</em>（一种类似于 猪拉丁文&nbsp;- Pig Latin 的虚构语言）。</p>\n\n<p>山羊拉丁文的规则如下：</p>\n\n<ul>\n\t<li>如果单词以元音开头（a, e, i, o, u），在单词后添加<code>&quot;ma&quot;</code>。<br />\n\t例如，单词<code>&quot;apple&quot;</code>变为<code>&quot;applema&quot;</code>。</li>\n\t<br />\n\t<li>如果单词以辅音字母开头（即非元音字母），移除第一个字符并将它放到末尾，之后再添加<code>&quot;ma&quot;</code>。<br />\n\t例如，单词<code>&quot;goat&quot;</code>变为<code>&quot;oatgma&quot;</code>。</li>\n\t<br />\n\t<li>根据单词在句子中的索引，在单词最后添加与索引相同数量的字母<code>&#39;a&#39;</code>，索引从1开始。<br />\n\t例如，在第一个单词后添加<code>&quot;a&quot;</code>，在第二个单词后添加<code>&quot;aa&quot;</code>，以此类推。</li>\n</ul>\n\n<p>返回将&nbsp;<code>S</code>&nbsp;转换为山羊拉丁文后的句子。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入: </strong>&quot;I speak Goat Latin&quot;\n<strong>输出: </strong>&quot;Imaa peaksmaaa oatGmaaaa atinLmaaaaa&quot;\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入: </strong>&quot;The quick brown fox jumped over the lazy dog&quot;\n<strong>输出: </strong>&quot;heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa&quot;\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li><code>S</code>&nbsp;中仅包含大小写字母和空格。单词间有且仅有一个空格。</li>\n\t<li><code>1 &lt;= S.length &lt;= 150</code>。</li>\n</ul>\n","binary-trees-with-factors":"<p>给出一个含有不重复整数元素的数组，每个整数均大于 1。</p>\n\n<p>我们用这些整数来构建二叉树，每个整数可以使用任意次数。</p>\n\n<p>其中：每个非叶结点的值应等于它的两个子结点的值的乘积。</p>\n\n<p>满足条件的二叉树一共有多少个？返回的结果应<strong>模除 10 ** 9 + 7</strong>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> <code>A = [2, 4]</code>\n<strong>输出:</strong> 3\n<strong>解释:</strong> 我们可以得到这些二叉树: <code>[2], [4], [4, 2, 2]</code></pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> <code>A = [2, 4, 5, 10]</code>\n<strong>输出:</strong> <code>7</code>\n<strong>解释:</strong> 我们可以得到这些二叉树: <code>[2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2]</code>.</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示:</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;=&nbsp;1000.</code></li>\n\t<li><code>2 &lt;=&nbsp;A[i]&nbsp;&lt;=&nbsp;10 ^ 9</code>.</li>\n</ol>\n","friends-of-appropriate-ages":"<p>人们会互相发送好友请求，现在给定一个包含有他们年龄的数组，<code>ages[i]</code>&nbsp;表示第 i 个人的年龄。</p>\n\n<p>当满足以下条件时，A 不能给 B（A、B不为同一人）发送好友请求：</p>\n\n<ul>\n\t<li><code>age[B]&nbsp;&lt;= 0.5 * age[A]&nbsp;+ 7</code></li>\n\t<li><code>age[B]&nbsp;&gt; age[A]</code></li>\n\t<li><code>age[B]&nbsp;&gt; 100 &amp;&amp;&nbsp;age[A]&nbsp;&lt; 100</code></li>\n</ul>\n\n<p>否则，A 可以给 B 发送好友请求。</p>\n\n<p>注意如果 A 向 B 发出了请求，不等于 B 接受了 A 的请求。而且，人们不会给自己发送好友请求。&nbsp;</p>\n\n<p>求总共会发出多少份好友请求?</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入: </strong>[16,16]\n<strong>输出: </strong>2\n<strong>解释: 二人可以互发好友申请。</strong>\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入: </strong>[16,17,18]\n<strong>输出: </strong>2\n<strong>解释: 好友请求可产生于</strong> 17 -&gt; 16, 18 -&gt; 17.</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入: </strong>[20,30,100,110,120]\n<strong>输出: 3</strong>\n<strong>解释: 好友请求可产生于</strong> 110 -&gt; 100, 120 -&gt; 110, 120 -&gt; 100.\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= ages.length&nbsp;&lt;= 20000</code>.</li>\n\t<li><code>1 &lt;= ages[i] &lt;= 120</code>.</li>\n</ul>\n","card-flipping-game":"<p>在桌子上有 <code>N</code> 张卡片，每张卡片的正面和背面都写着一个正数（正面与背面上的数有可能不一样）。</p>\n\n<p>我们可以先翻转任意张卡片，然后选择其中一张卡片。</p>\n\n<p>如果选中的那张卡片背面的数字 <code>X</code> 与任意一张卡片的正面的数字都不同，那么这个数字是我们想要的数字。</p>\n\n<p>哪个数是这些想要的数字中最小的数（找到这些数中的最小值）呢？如果没有一个数字符合要求的，输出 0。</p>\n\n<p>其中, <code>fronts[i]</code>&nbsp;和&nbsp;<code>backs[i]</code>&nbsp;分别代表第&nbsp;<code>i</code>&nbsp;张卡片的正面和背面的数字。</p>\n\n<p>如果我们通过翻转卡片来交换正面与背面上的数，那么当初在正面的数就变成背面的数，背面的数就变成正面的数。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>\n<strong>输入：</strong>fronts = [1,2,4,4,7], backs = [1,3,4,1,3]\n<strong>输出：</strong><code>2</code>\n<strong>解释：</strong>假设我们翻转第二张卡片，那么在正面的数变成了 <code>[1,3,4,4,7]</code> ， 背面的数变成了 <code>[1,2,4,1,3]。</code>\n接着我们选择第二张卡片，因为现在该卡片的背面的数是 2，2 与任意卡片上正面的数都不同，所以 2 就是我们想要的数字。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= fronts.length == backs.length&nbsp;&lt;=&nbsp;1000</code></li>\n\t<li><code>1 &lt;=&nbsp;fronts[i]&nbsp;&lt;= 2000</code></li>\n\t<li><code>1 &lt;= backs[i]&nbsp;&lt;= 2000</code></li>\n</ol>\n","domino-and-tromino-tiling":"<p>有两种形状的瓷砖：一种是&nbsp;2x1 的多米诺形，另一种是形如&nbsp;&quot;L&quot; 的托米诺形。两种形状都可以旋转。</p>\n\n<pre>\nXX  &lt;- 多米诺\n\nXX  &lt;- &quot;L&quot; 托米诺\nX\n</pre>\n\n<p>给定&nbsp;N 的值，有多少种方法可以平铺&nbsp;2 x N 的面板？<strong>返回值 mod 10^9 + 7</strong>。</p>\n\n<p>（平铺指的是每个正方形都必须有瓷砖覆盖。两个平铺不同，当且仅当面板上有四个方向上的相邻单元中的两个，使得恰好有一个平铺有一个瓷砖占据两个正方形。）</p>\n\n<pre>\n<strong>示例:</strong>\n<strong>输入:</strong> 3\n<strong>输出:</strong> 5\n<strong>解释:</strong> \n下面列出了五种不同的方法，不同字母代表不同瓷砖：\nXYZ XXZ XYY XXY XYY\nXYZ YYZ XZZ XYY XXY</pre>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>N&nbsp; 的范围是&nbsp;<code>[1, 1000]</code></li>\n</ul>\n\n<p>&nbsp;</p>\n","most-profit-assigning-work":"<p>有一些工作：<code>difficulty[i]&nbsp;</code>表示第<code>i</code>个工作的难度，<code>profit[i]</code>表示第<code>i</code>个工作的收益。</p>\n\n<p>现在我们有一些工人。<code>worker[i]</code>是第<code>i</code>个工人的能力，即该工人只能完成难度小于等于<code>worker[i]</code>的工作。</p>\n\n<p>每一个工人都最多只能安排一个工作，但是一个工作可以完成多次。</p>\n\n<p>举个例子，如果3个工人都尝试完成一份报酬为1的同样工作，那么总收益为 $3。如果一个工人不能完成任何工作，他的收益为 $0 。</p>\n\n<p>我们能得到的最大收益是多少？</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入: </strong>difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]\n<strong>输出: </strong>100 \n<strong>解释: </strong>工人被分配的工作难度是 [4,4,6,6] ，分别获得 [20,20,30,30] 的收益。</pre>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= difficulty.length = profit.length &lt;= 10000</code></li>\n\t<li><code>1 &lt;= worker.length &lt;= 10000</code></li>\n\t<li><code>difficulty[i], profit[i], worker[i]</code>&nbsp; 的范围是&nbsp;<code>[1, 10^5]</code></li>\n</ul>\n","race-car":"<p>你的赛车起始停留在位置 0，速度为 +1，正行驶在一个无限长的数轴上。（车也可以向负数方向行驶。）</p>\n\n<p>你的车会根据一系列由 A（加速）和 R（倒车）组成的指令进行自动驾驶&nbsp;。</p>\n\n<p>当车得到指令 &quot;A&quot; 时, 将会做出以下操作：&nbsp;<code>position += speed, speed *= 2</code>。</p>\n\n<p>当车得到指令 &quot;R&quot; 时, 将会做出以下操作：如果当前速度是正数，则将车速调整为&nbsp;<code>speed = -1</code>&nbsp;；否则将车速调整为&nbsp;<code>speed = 1</code>。&nbsp; (当前所处位置不变。)</p>\n\n<p>例如，当得到一系列指令 &quot;AAR&quot; 后, 你的车将会走过位置 0-&gt;1-&gt;3-&gt;3，并且速度变化为&nbsp;1-&gt;2-&gt;4-&gt;-1。</p>\n\n<p>现在给定一个目标位置，请给出能够到达目标位置的最短指令列表的<strong>长度</strong>。</p>\n\n<pre><strong>示例 1:</strong>\n<strong>输入:</strong> \ntarget = 3\n<strong>输出:</strong> 2\n<strong>解释:</strong> \n最短指令列表为 &quot;AA&quot;\n位置变化为 0-&gt;1-&gt;3\n</pre>\n\n<pre><strong>示例 2:</strong>\n<strong>输入:</strong> \ntarget = 6\n<strong>输出:</strong> 5\n<strong>解释:</strong> \n最短指令列表为 &quot;AAARA&quot;\n位置变化为 0-&gt;1-&gt;3-&gt;7-&gt;7-&gt;6\n</pre>\n\n<p><strong>说明: </strong></p>\n\n<ul>\n\t<li><code>1 &lt;= target（目标位置） &lt;= 10000</code>。</li>\n</ul>\n","k-th-smallest-prime-fraction":"<p>一个已排序好的表&nbsp;<code>A</code>，其包含 1 和其他一些素数.&nbsp; 当列表中的每一个 p&lt;q 时，我们可以构造一个分数 p/q 。</p>\n\n<p>那么第&nbsp;<code>k</code>&nbsp;个最小的分数是多少呢?&nbsp; 以整数数组的形式返回你的答案, 这里&nbsp;<code>answer[0] = p</code>&nbsp;且&nbsp;<code>answer[1] = q</code>.</p>\n\n<pre>\n<strong>示例:</strong>\n<strong>输入:</strong> A = [1, 2, 3, 5], K = 3\n<strong>输出:</strong> [2, 5]\n<strong>解释:</strong>\n已构造好的分数,排序后如下所示:\n1/5, 1/3, 2/5, 1/2, 3/5, 2/3.\n很明显第三个最小的分数是 2/5.\n\n<strong>输入:</strong> A = [1, 7], K = 1\n<strong>输出:</strong> [1, 7]\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>A</code> 的取值范围在 <code>2</code> &mdash; <code>2000</code>.</li>\n\t<li>每个&nbsp;<code>A[i]</code> 的值在 <code>1</code> &mdash;<code>30000</code>.</li>\n\t<li><code>K</code> 取值范围为 <code>1</code> &mdash;<code>A.length * (A.length - 1) / 2</code></li>\n</ul>\n","chalkboard-xor-game":"<p>一个黑板上写着一个非负整数数组 nums[i] 。小红和小明轮流从黑板上擦掉一个数字，小红先手。如果擦除一个数字后，剩余的所有数字按位异或运算得出的结果等于 0 的话，当前玩家游戏失败。&nbsp;(另外，如果只剩一个数字，按位异或运算得到它本身；如果无数字剩余，按位异或运算结果为&nbsp;0。）</p>\n\n<p>换种说法就是，轮到某个玩家时，如果当前黑板上所有数字按位异或运算结果等于 0，这个玩家获胜。</p>\n\n<p>假设两个玩家每步都使用最优解，当且仅当小红获胜时返回 true。</p>\n\n<pre>\n<strong>示例:</strong>\n<strong>输入:</strong> nums = [1, 1, 2]\n<strong>输出:</strong> false\n<strong>解释:</strong> \n小红有两个选择: 擦掉数字 1 或 2。\n如果擦掉 1, 数组变成 [1, 2]。剩余数字按位异或得到 1 XOR 2 = 3。那么小明可以擦掉任意数字，因为小红会成为擦掉最后一个数字的人，她总是会输。\n如果小红擦掉 2，那么数组变成[1, 1]。剩余数字按位异或得到 1 XOR 1 = 0。小红仍然会输掉游戏。\n</pre>\n\n<p><strong>说明: </strong></p>\n\n<ul>\n\t<li><code>0 &lt;= N &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 2^16</code></li>\n</ul>\n","linked-list-components":"<p>给定一个链表（链表结点包含一个整型值）的头结点&nbsp;<code>head</code>。</p>\n\n<p>同时给定列表&nbsp;<code>G</code>，该列表是上述链表中整型值的一个子集。</p>\n\n<p>返回列表&nbsp;<code>G</code>&nbsp;中组件的个数，这里对组件的定义为：链表中一段最长连续结点的值（该值必须在列表&nbsp;<code>G</code>&nbsp;中）构成的集合。</p>\n\n<p><strong>示例&nbsp;1：</strong></p>\n\n<pre>\n<strong>输入:</strong> \nhead: 0-&gt;1-&gt;2-&gt;3\nG = [0, 1, 3]\n<strong>输出:</strong> 2\n<strong>解释:</strong> \n链表中,0 和 1 是相连接的，且 G 中不包含 2，所以 [0, 1] 是 G 的一个组件，同理 [3] 也是一个组件，故返回 2。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入:</strong> \nhead: 0-&gt;1-&gt;2-&gt;3-&gt;4\nG = [0, 3, 1, 4]\n<strong>输出:</strong> 2\n<strong>解释:</strong> \n链表中，0 和 1 是相连接的，3 和 4 是相连接的，所以 [0, 1] 和 [3, 4] 是两个组件，故返回 2。</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li>如果&nbsp;<code>N</code>&nbsp;是给定链表&nbsp;<code>head</code>&nbsp;的长度，<code>1 &lt;= N &lt;= 10000</code>。</li>\n\t<li>链表中每个结点的值所在范围为&nbsp;<code>[0, N - 1]</code>。</li>\n\t<li><code>1 &lt;= G.length &lt;= 10000</code></li>\n\t<li><code>G</code> 是链表中所有结点的值的一个子集.</li>\n</ul>\n","expressive-words":"<p>有时候人们会用额外的字母来表示额外的情感，比如 &quot;hello&quot; -&gt; &quot;heeellooo&quot;, &quot;hi&quot; -&gt; &quot;hiii&quot;。我们将连续的相同的字母分组，并且相邻组的字母都不相同。我们将一个拥有三个或以上字母的组定义为扩张状态（extended），如第一个例子中的 &quot;e&quot; 和&quot; o&quot; 以及第二个例子中的 &quot;i&quot;。 此外，&quot;abbcccaaaa&quot; 将有分组&nbsp;&quot;a&quot; , &quot;bb&quot; , &quot;ccc&quot; , &quot;dddd&quot;；其中 &quot;ccc&quot; 和 &quot;aaaa&quot; 处于扩张状态。</p>\n\n<p>对于一个给定的字符串 S ，如果另一个单词能够通过将一些字母组扩张从而使其和 S 相同，我们将这个单词定义为可扩张的（stretchy）。我们允许选择一个字母组（如包含字母&nbsp;<code>c</code>&nbsp;），然后往其中添加相同的字母&nbsp;<code>c</code>&nbsp;使其长度达到 3 或以上。注意，我们不能将一个只包含一个字母的字母组，如 &quot;h&quot;，扩张到一个包含两个字母的组，如 &quot;hh&quot;；所有的扩张必须使该字母组变成扩张状态（至少包含三个字母）。</p>\n\n<p>输入一组单词，输出其中可扩张的单词数量。</p>\n\n<pre>\n<strong>示例：</strong>\n<strong>输入：</strong> \nS = &quot;heeellooo&quot;\nwords = [&quot;hello&quot;, &quot;hi&quot;, &quot;helo&quot;]\n<strong>输出：</strong>1\n<strong>解释</strong>：\n我们能通过扩张&quot;hello&quot;的&quot;e&quot;和&quot;o&quot;来得到&quot;heeellooo&quot;。\n我们不能通过扩张&quot;helo&quot;来得到&quot;heeellooo&quot;因为&quot;ll&quot;不处于扩张状态。\n</pre>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= len(S) &lt;= 100</code>。</li>\n\t<li><code>0 &lt;= len(words) &lt;= 100</code>。</li>\n\t<li><code>0 &lt;= len(words[i]) &lt;= 100</code>。</li>\n\t<li><code>S</code>&nbsp;和所有在&nbsp;<code>words</code>&nbsp;中的单词都只由小写字母组成。</li>\n</ul>\n","bricks-falling-when-hit":"<p>我们有一组包含1和0的网格；其中1表示砖块。&nbsp;当且仅当一块砖直接连接到网格的顶部，或者它至少连接着(4个方向)相邻的砖块之一时，它才不会落下。</p>\n\n<p>我们会依次消除一些砖块。每当我们消除&nbsp;(i, j) 位置时， 对应位置的砖块（若存在）会消失，然后其他的砖块可能因为这个消除而落下。</p>\n\n<p>返回一个数组表示每次消除操作对应落下的砖块数目。</p>\n\n<pre>\n<strong>示例 1：</strong>\n<strong>输入：</strong>\ngrid = [[1,0,0,0],[1,1,1,0]]\nhits = [[1,0]]\n<strong>输出:</strong> [2]\n<strong>解释: </strong>\n如果我们消除(1, 0)位置的砖块, 在(1, 1) 和(1, 2) 的砖块会落下。所以我们应该返回2。</pre>\n\n<pre>\n<strong>示例 2：</strong>\n<strong>输入：</strong>\ngrid = [[1,0,0,0],[1,1,0,0]]\nhits = [[1,1],[1,0]]\n<strong>输出：</strong>[0,0]\n<strong>解释：</strong>\n当我们消除(1, 0)的砖块时，(1, 1)的砖块已经由于上一步消除而消失了。所以每次消除操作不会造成砖块落下。注意(1, 0)砖块不会记作落下的砖块。</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li>网格的行数和列数的范围是[1, 200]。</li>\n\t<li>消除的数字不会超过网格的区域。</li>\n\t<li>可以保证每次的消除都不相同，并且位于网格的内部。</li>\n\t<li>一个消除的位置可能没有砖块，如果这样的话，就不会有砖块落下。</li>\n</ul>\n","rotated-digits":"<p>我们称一个数 X 为好数, 如果它的每位数字逐个地被旋转 180 度后，我们仍可以得到一个有效的，且和 X 不同的数。要求每位数字都要被旋转。</p>\n\n<p>如果一个数的每位数字被旋转以后仍然还是一个数字，&nbsp;则这个数是有效的。0, 1, 和 8 被旋转后仍然是它们自己；2 和 5 可以互相旋转成对方；6 和 9 同理，除了这些以外其他的数字旋转以后都不再是有效的数字。</p>\n\n<p>现在我们有一个正整数&nbsp;<code>N</code>, 计算从&nbsp;<code>1</code> 到&nbsp;<code>N</code> 中有多少个数&nbsp;X 是好数？</p>\n\n<pre>\n<strong>示例:</strong>\n<strong>输入:</strong> 10\n<strong>输出:</strong> 4\n<strong>解释:</strong> \n在[1, 10]中有四个好数： 2, 5, 6, 9。\n注意 1 和 10 不是好数, 因为他们在旋转之后不变。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li>N&nbsp;的取值范围是&nbsp;<code>[1, 10000]</code>。</li>\n</ul>\n","most-common-word":"<p>给定一个段落 (paragraph) 和一个禁用单词列表 (banned)。返回出现次数最多，同时不在禁用列表中的单词。题目保证至少有一个词不在禁用列表中，而且答案唯一。</p>\n\n<p>禁用列表中的单词用小写字母表示，不含标点符号。段落中的单词不区分大小写。答案都是小写字母。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入:</strong> \nparagraph = &quot;Bob hit a ball, the hit BALL flew far after it was hit.&quot;\nbanned = [&quot;hit&quot;]\n<strong>输出:</strong> &quot;ball&quot;\n<strong>解释:</strong> \n&quot;hit&quot; 出现了3次，但它是一个禁用的单词。\n&quot;ball&quot; 出现了2次 (同时没有其他单词出现2次)，所以它是段落里出现次数最多的，且不在禁用列表中的单词。 \n注意，所有这些单词在段落里不区分大小写，标点符号需要忽略（即使是紧挨着单词也忽略， 比如 &quot;ball,&quot;）， \n&quot;hit&quot;不是最终的答案，虽然它出现次数更多，但它在禁用单词列表中。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= 段落长度 &lt;= 1000</code>.</li>\n\t<li><code>1 &lt;= 禁用单词个数 &lt;= 100</code>.</li>\n\t<li><code>1 &lt;= 禁用单词长度 &lt;= 10</code>.</li>\n\t<li>答案是唯一的, 且都是小写字母&nbsp;(即使在 <code>paragraph</code> 里是大写的，即使是一些特定的名词，答案都是小写的。)</li>\n\t<li><code>paragraph</code>&nbsp;只包含字母、空格和下列标点符号<code>!?&#39;,;.</code></li>\n\t<li>不存在没有连字符或者带有连字符的单词。</li>\n\t<li>单词里只包含字母，不会出现省略号或者其他标点符号。</li>\n</ul>\n","preimage-size-of-factorial-zeroes-function":"<p>&nbsp;<code>f(x)</code>&nbsp;是&nbsp;<code>x!</code>&nbsp;末尾是0的数量。（回想一下&nbsp;<code>x! = 1 * 2 * 3 * ... * x</code>，且<code>0! = 1</code>）</p>\n\n<p>例如，&nbsp;<code>f(3) = 0</code>&nbsp;，因为3! = 6的末尾没有0；而&nbsp;<code>f(11) = 2</code>&nbsp;，因为11!= 39916800末端有2个0。给定&nbsp;<code>K</code>，找出多少个非负整数<code>x</code>&nbsp;，有&nbsp;<code>f(x) = K</code>&nbsp;的性质。</p>\n\n<pre>\n<strong>示例 1:\n输入:</strong>K = 0<strong>\n输出:</strong>5<strong>\n解释:</strong>&nbsp;0!, 1!, 2!, 3!, and 4!&nbsp;均符合 K = 0 的条件。<strong>\n\n示例 2:\n输入:</strong>K = 5<strong>\n输出:</strong>0<strong>\n解释:</strong>没有匹配到这样的 x!，符合K = 5 的条件<strong>。</strong>\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li>\n\t<p><code>K</code>是范围在&nbsp;<code>[0, 10^9]</code>&nbsp;的整数<strong>。</strong></p>\n\t</li>\n</ul>\n","largest-triangle-area":"<p>给定包含多个点的集合，从其中取三个点组成三角形，返回能组成的最大三角形的面积。</p>\n\n<pre>\n<strong>示例:</strong>\n<strong>输入:</strong> points = [[0,0],[0,1],[1,0],[0,2],[2,0]]\n<strong>输出:</strong> 2\n<strong>解释:</strong> \n这五个点如下图所示。组成的橙色三角形是最大的，面积为2。\n</pre>\n\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/04/1027.png\" style=\"height:328px; width:400px\" /></p>\n\n<p><strong>注意: </strong></p>\n\n<ul>\n\t<li><code>3 &lt;= points.length &lt;= 50</code>.</li>\n\t<li>不存在重复的点。</li>\n\t<li>&nbsp;<code>-50 &lt;= points[i][j] &lt;= 50</code>.</li>\n\t<li>结果误差值在&nbsp;<code>10^-6</code>&nbsp;以内都认为是正确答案。</li>\n</ul>\n","champagne-tower":"<p>我们把玻璃杯摆成金字塔的形状，其中第一层有1个玻璃杯，第二层有2个，依次类推到第100层，每个玻璃杯(250ml)将盛有香槟。</p>\n\n<p>从顶层的第一个玻璃杯开始倾倒一些香槟，当顶层的杯子满了，任何溢出的香槟都会立刻等流量的流向左右两侧的玻璃杯。当左右两边的杯子也满了，就会等流量的流向它们左右两边的杯子，依次类推。（当最底层的玻璃杯满了，香槟会流到地板上）</p>\n\n<p>例如，在倾倒一杯香槟后，最顶层的玻璃杯满了。倾倒了两杯香槟后，第二层的两个玻璃杯各自盛放一半的香槟。在倒三杯香槟后，第二层的香槟满了 - 此时总共有三个满的玻璃杯。在倒第四杯后，第三层中间的玻璃杯盛放了一半的香槟，他两边的玻璃杯各自盛放了四分之一的香槟，如下图所示。</p>\n\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/09/tower.png\" style=\"height:200px; width:290px\" /></p>\n\n<p>现在当倾倒了非负整数杯香槟后，返回第 i 行 j 个玻璃杯所盛放的香槟占玻璃杯容积的比例（i 和 j都从0开始）。</p>\n\n<p>&nbsp;</p>\n\n<pre>\n<strong>示例 1:</strong>\n<strong>输入:</strong> poured(倾倒香槟总杯数) = 1, query_glass(杯子的位置数) = 1, query_row(行数) = 1\n<strong>输出:</strong> 0.0\n<strong>解释:</strong> 我们在顶层（下标是（0，0））倒了一杯香槟后，没有溢出，因此所有在顶层以下的玻璃杯都是空的。\n\n<strong>示例 2:</strong>\n<strong>输入:</strong> poured(倾倒香槟总杯数) = 2, query_glass(杯子的位置数) = 1, query_row(行数) = 1\n<strong>输出:</strong> 0.5\n<strong>解释:</strong> 我们在顶层（下标是（0，0）倒了两杯香槟后，有一杯量的香槟将从顶层溢出，位于（1，0）的玻璃杯和（1，1）的玻璃杯平分了这一杯香槟，所以每个玻璃杯有一半的香槟。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>poured</code>&nbsp;的范围<code>[0, 10 ^ 9]</code>。</li>\n\t<li><code>query_glass</code>&nbsp;和<code>query_row</code>&nbsp;的范围&nbsp;<code>[0, 99]</code>。</li>\n</ul>\n","is-graph-bipartite":"<p>给定一个无向图<code>graph</code>，当这个图为二分图时返回<code>true</code>。</p>\n\n<p>如果我们能将一个图的节点集合分割成两个独立的子集A和B，并使图中的每一条边的两个节点一个来自A集合，一个来自B集合，我们就将这个图称为二分图。</p>\n\n<p><code>graph</code>将会以邻接表方式给出，<code>graph[i]</code>表示图中与节点<code>i</code>相连的所有节点。每个节点都是一个在<code>0</code>到<code>graph.length-1</code>之间的整数。这图中没有自环和平行边：&nbsp;<code>graph[i]</code>&nbsp;中不存在<code>i</code>，并且<code>graph[i]</code>中没有重复的值。</p>\n\n<pre>\n<code>\n<strong>示例 1:</strong>\n输入<strong>:</strong> [[1,3], [0,2], [1,3], [0,2]]\n<strong>输出:</strong> true\n<strong>解释:</strong> \n无向图如下:\n0----1\n|    |\n|    |\n3----2\n我们可以将节点分成两组: {0, 2} 和 {1, 3}。\n</code></pre>\n\n<pre>\n<code>\n<strong>示例 2:</strong>\n<strong>输入:</strong> [[1,2,3], [0,2], [0,1,3], [0,2]]\n<strong>输出:</strong> false\n<strong>解释:</strong> \n无向图如下:\n0----1\n| \\  |\n|  \\ |\n3----2\n我们不能将节点分割成两个独立的子集。\n</code></pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>graph</code> 的长度范围为 <code>[1, 100]</code>。</li>\n\t<li><code>graph[i]</code> 中的元素的范围为 <code>[0, graph.length - 1]</code>。</li>\n\t<li><code>graph[i]</code> 不会包含 <code>i</code> 或者有重复的值。</li>\n\t<li>图是无向的: 如果<code>j</code> 在 <code>graph[i]</code>里边, 那么 <code>i</code> 也会在 <code>graph[j]</code>里边。</li>\n</ul>\n","split-array-with-same-average":"<p>给定的整数数组 A ，我们要将 A数组 中的每个元素移动到 B数组 或者 C数组中。（B数组和C数组在开始的时候都为空）</p>\n\n<p>返回<code>true</code> ，当且仅当在我们的完成这样的移动后，可使得B数组的平均值和C数组的平均值相等，并且B数组和C数组都不为空。</p>\n\n<pre>\n<strong>示例:</strong>\n<strong>输入:</strong> \n[1,2,3,4,5,6,7,8]\n<strong>输出:</strong> true\n<strong>解释: </strong>我们可以将数组分割为 [1,4,5,8] 和 [2,3,6,7], 他们的平均值都是4.5。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>A</code> 数组的长度范围为 <code>[1, 30]</code>.</li>\n\t<li><code>A[i]</code> 的数据范围为 <code>[0, 10000]</code>.</li>\n</ul>\n","ambiguous-coordinates":"<p>我们有一些二维坐标，如&nbsp;<code>&quot;(1, 3)&quot;</code>&nbsp;或&nbsp;<code>&quot;(2, 0.5)&quot;</code>，然后我们移除所有逗号，小数点和空格，得到一个字符串<code>S</code>。返回所有可能的原始字符串到一个列表中。</p>\n\n<p>原始的坐标表示法不会存在多余的零，所以不会出现类似于&quot;00&quot;, &quot;0.0&quot;, &quot;0.00&quot;, &quot;1.0&quot;, &quot;001&quot;, &quot;00.01&quot;或一些其他更小的数来表示坐标。此外，一个小数点前至少存在一个数，所以也不会出现&ldquo;.1&rdquo;形式的数字。</p>\n\n<p>最后返回的列表可以是任意顺序的。而且注意返回的两个数字中间（逗号之后）都有一个空格。</p>\n\n<p>&nbsp;</p>\n\n<pre>\n<strong>示例 1:</strong>\n<strong>输入:</strong> &quot;(123)&quot;\n<strong>输出:</strong> [&quot;(1, 23)&quot;, &quot;(12, 3)&quot;, &quot;(1.2, 3)&quot;, &quot;(1, 2.3)&quot;]\n</pre>\n\n<pre>\n<strong>示例 2:</strong>\n<strong>输入:</strong> &quot;(00011)&quot;\n<strong>输出:</strong> &nbsp;[&quot;(0.001, 1)&quot;, &quot;(0, 0.011)&quot;]\n<strong>解释:</strong> \n0.0, 00, 0001 或 00.01 是不被允许的。\n</pre>\n\n<pre>\n<strong>示例 3:</strong>\n<strong>输入:</strong> &quot;(0123)&quot;\n<strong>输出:</strong> [&quot;(0, 123)&quot;, &quot;(0, 12.3)&quot;, &quot;(0, 1.23)&quot;, &quot;(0.1, 23)&quot;, &quot;(0.1, 2.3)&quot;, &quot;(0.12, 3)&quot;]\n</pre>\n\n<pre>\n<strong>示例 4:</strong>\n<strong>输入:</strong> &quot;(100)&quot;\n<strong>输出:</strong> [(10, 0)]\n<strong>解释:</strong> \n1.0 是不被允许的。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示: </strong></p>\n\n<ul>\n\t<li><code>4 &lt;= S.length &lt;= 12</code>.</li>\n\t<li><code>S[0]</code> = &quot;(&quot;, <code>S[S.length - 1]</code> = &quot;)&quot;, 且字符串&nbsp;<code>S</code>&nbsp;中的其他元素都是数字。</li>\n</ul>\n\n<p>&nbsp;</p>\n","escape-the-ghosts":"<p>你在进行一个简化版的吃豆人游戏。你从&nbsp;<code>(0, 0)</code>&nbsp;点开始出发，你的目的地是&nbsp;<code>(target[0], target[1])</code>&nbsp;。地图上有一些阻碍者，第 i 个阻碍者从&nbsp;<code>(ghosts[i][0], ghosts[i][1])</code>&nbsp;出发。</p>\n\n<p>每一回合，你和阻碍者们*可以*同时向东，西，南，北四个方向移动，每次可以移动到距离原位置1个单位的新位置。</p>\n\n<p>如果你可以在任何阻碍者抓住你之前到达目的地（阻碍者可以采取任意行动方式），则被视为逃脱成功。如果你和阻碍者同时到达了一个位置（包括目的地）都不算是逃脱成功。</p>\n\n<p>当且仅当你有可能成功逃脱时，输出 True。</p>\n\n<pre><strong>示例 1:</strong>\n<strong>输入：</strong> \nghosts = [[1, 0], [0, 3]]\ntarget = [0, 1]\n<strong>输出：</strong>true\n<strong>解释：\n</strong>你可以直接一步到达目的地(0,1)，在(1, 0)或者(0, 3)位置的阻碍者都不可能抓住你。 \n</pre>\n\n<pre><strong>示例 2:</strong>\n<strong>输入：</strong> \nghosts = [[1, 0]]\ntarget = [2, 0]\n<strong>输出：</strong>false\n<strong>解释：</strong>\n你需要走到位于(2, 0)的目的地，但是在(1, 0)的阻碍者位于你和目的地之间。 \n</pre>\n\n<pre><strong>示例 3:</strong>\n<strong>输入：</strong> \nghosts = [[2, 0]]\ntarget = [1, 0]\n<strong>输出：</strong>false\n<strong>解释：\n</strong>阻碍者可以和你同时达到目的地。 \n</pre>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>所有的点的坐标值的绝对值 &lt;=&nbsp;<code>10000</code>。</li>\n\t<li>阻碍者的数量不会超过&nbsp;<code>100</code>。</li>\n</ul>\n","all-paths-from-source-to-target":"<p>给一个有&nbsp;<code>n</code>&nbsp;个结点的有向无环图，找到所有从&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n-1</code>&nbsp;的路径并输出（不要求按顺序）</p>\n\n<p>二维数组的第 i 个数组中的单元都表示有向图中 i 号结点所能到达的下一些结点（译者注：有向图是有方向的，即规定了a&rarr;b你就不能从b&rarr;a）空就是没有下一个结点了。</p>\n\n<pre><strong>示例:</strong>\n<strong>输入:</strong> [[1,2], [3], [3], []] \n<strong>输出:</strong> [[0,1,3],[0,2,3]] \n<strong>解释:</strong> 图是这样的:\n0---&gt;1\n|    |\nv    v\n2---&gt;3\n这有两条路: 0 -&gt; 1 -&gt; 3 和 0 -&gt; 2 -&gt; 3.\n</pre>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li>结点的数字会在范围&nbsp;<code>[2, 15]</code>&nbsp;内。</li>\n\t<li>你可以把路径以任意顺序输出，但在路径内的结点的顺序必须保证。</li>\n</ul>\n","insert-into-a-cyclic-sorted-list":null,"similar-rgb-color":null,"number-of-lines-to-write-string":"<p>我们要把给定的字符串 <code>S</code>&nbsp;从左到右写到每一行上，每一行的最大宽度为100个单位，如果我们在写某个字母的时候会使这行超过了100 个单位，那么我们应该把这个字母写到下一行。我们给定了一个数组&nbsp;<code>widths</code>&nbsp;，这个数组&nbsp;widths[0] 代表 &#39;a&#39; 需要的单位，&nbsp;widths[1] 代表 &#39;b&#39; 需要的单位，...，&nbsp;widths[25] 代表 &#39;z&#39; 需要的单位。</p>\n\n<p>现在回答两个问题：至少多少行能放下<code>S</code>，以及最后一行使用的宽度是多少个单位？将你的答案作为长度为2的整数列表返回。</p>\n\n<pre>\n<strong>示例 1:</strong>\n<strong>输入:</strong> \nwidths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\nS = &quot;abcdefghijklmnopqrstuvwxyz&quot;\n<strong>输出:</strong> [3, 60]\n<strong>解释: \n</strong>所有的字符拥有相同的占用单位10。所以书写所有的26个字母，\n我们需要2个整行和占用60个单位的一行。\n</pre>\n\n<pre>\n<strong>示例 2:</strong>\n<strong>输入:</strong> \nwidths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\nS = &quot;bbbcccdddaaa&quot;\n<strong>输出:</strong> [2, 4]\n<strong>解释: \n</strong>除去字母&#39;a&#39;所有的字符都是相同的单位10，并且字符串 &quot;bbbcccdddaa&quot; 将会覆盖 9 * 10 + 2 * 4 = 98 个单位.\n最后一个字母 &#39;a&#39; 将会被写到第二行，因为第一行只剩下2个单位了。\n所以，这个答案是2行，第二行有4个单位宽度。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注:</strong></p>\n\n<ul>\n\t<li>字符串&nbsp;<code>S</code> 的长度在&nbsp;[1, 1000] 的范围。</li>\n\t<li><code>S</code> 只包含小写字母。</li>\n\t<li><code>widths</code> 是长度为&nbsp;<code>26</code>的数组。</li>\n\t<li><code>widths[i]</code>&nbsp;值的范围在&nbsp;<code>[2, 10]</code>。</li>\n</ul>\n","minimum-swaps-to-make-sequences-increasing":"<p>我们有两个长度相等且不为空的整型数组&nbsp;<code>A</code>&nbsp;和&nbsp;<code>B</code>&nbsp;。</p>\n\n<p>我们可以交换&nbsp;<code>A[i]</code>&nbsp;和&nbsp;<code>B[i]</code>&nbsp;的元素。注意这两个元素在各自的序列中应该处于相同的位置。</p>\n\n<p>在交换过一些元素之后，数组&nbsp;<code>A</code>&nbsp;和&nbsp;<code>B</code>&nbsp;都应该是严格递增的（数组严格递增的条件仅为<code>A[0] &lt; A[1] &lt; A[2] &lt; ... &lt; A[A.length - 1]</code>）。</p>\n\n<p>给定数组&nbsp;<code>A</code>&nbsp;和&nbsp;<code>B</code>&nbsp;，请返回使得两个数组均保持严格递增状态的最小交换次数。假设给定的输入总是有效的。</p>\n\n<pre>\n<strong>示例:</strong>\n<strong>输入:</strong> A = [1,3,5,4], B = [1,2,3,7]\n<strong>输出:</strong> 1\n<strong>解释: </strong>\n交换 A[3] 和 B[3] 后，两个数组如下:\nA = [1, 3, 5, 7] ， B = [1, 2, 3, 4]\n两个数组均为严格递增的。</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>A, B</code>&nbsp;两个数组的长度总是相等的，且长度的范围为&nbsp;<code>[1, 1000]</code>。</li>\n\t<li><code>A[i], B[i]</code>&nbsp;均为&nbsp;<code>[0, 2000]</code>区间内的整数。</li>\n</ul>\n","soup-servings":"<p>有&nbsp;A&nbsp;和&nbsp;B 两种类型的汤。一开始每种类型的汤有&nbsp;<code>N</code>&nbsp;毫升。有四种分配操作：</p>\n\n<ol>\n\t<li>提供 100ml 的汤A 和 0ml 的汤B。</li>\n\t<li>提供 75ml 的汤A 和 25ml 的汤B。</li>\n\t<li>提供 50ml 的汤A 和 50ml 的汤B。</li>\n\t<li>提供 25ml 的汤A 和 75ml 的汤B。</li>\n</ol>\n\n<p>当我们把汤分配给某人之后，汤就没有了。每个回合，我们将从四种概率同为0.25的操作中进行分配选择。如果汤的剩余量不足以完成某次操作，我们将尽可能分配。当两种类型的汤都分配完时，停止操作。</p>\n\n<p>注意不存在先分配100 ml汤B的操作。</p>\n\n<p>需要返回的值：&nbsp;汤A先分配完的概率 + 汤A和汤B同时分配完的概率 / 2。</p>\n\n<pre>\n<strong>示例:</strong>\n<strong>输入:</strong> N = 50\n<strong>输出:</strong> 0.625\n<strong>解释:\n</strong>如果我们选择前两个操作<strong>，</strong>A将首先变为空。对于第三个操作，A和B会同时变为空。对于第四个操作，B将首先变为空。<strong>\n</strong>所以A变为空的总概率加上A和B同时变为空的概率的一半是 0.25 *(1 + 1 + 0.5 + 0)= 0.625。\n</pre>\n\n<p><strong>注释: </strong></p>\n\n<ul>\n\t<li><code>0 &lt;= N &lt;= 10^9</code>。</li>\n\t<li>\n\t<p>返回值在&nbsp;<code>10^-6</code>&nbsp;的范围将被认为是正确的。</p>\n\t</li>\n</ul>\n","number-of-subarrays-with-bounded-maximum":"<p>给定一个元素都是正整数的数组<code>A</code>&nbsp;，正整数 <code>L</code>&nbsp;以及&nbsp;<code>R</code>&nbsp;(<code>L &lt;= R</code>)。</p>\n\n<p>求连续、非空且其中最大元素满足大于等于<code>L</code>&nbsp;小于等于<code>R</code>的子数组个数。</p>\n\n<pre><strong>例如 :</strong>\n<strong>输入:</strong> \nA = [2, 1, 4, 3]\nL = 2\nR = 3\n<strong>输出:</strong> 3\n<strong>解释:</strong> 满足条件的子数组: [2], [2, 1], [3].\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li>L, R&nbsp; 和&nbsp;<code>A[i]</code> 都是整数，范围在&nbsp;<code>[0, 10^9]</code>。</li>\n\t<li>数组&nbsp;<code>A</code>&nbsp;的长度范围在<code>[1, 50000]</code>。</li>\n</ul>\n","subdomain-visit-count":"<p>一个网站域名，如&quot;discuss.leetcode.com&quot;，包含了多个子域名。作为顶级域名，常用的有&quot;com&quot;，下一级则有&quot;leetcode.com&quot;，最低的一级为&quot;discuss.leetcode.com&quot;。当我们访问域名&quot;discuss.leetcode.com&quot;时，也同时访问了其父域名&quot;leetcode.com&quot;以及顶级域名&nbsp;&quot;com&quot;。</p>\n\n<p>给定一个带访问次数和域名的组合，要求分别计算每个域名被访问的次数。其格式为访问次数+空格+地址，例如：&quot;9001 discuss.leetcode.com&quot;。</p>\n\n<p>接下来会给出一组访问次数和域名组合的列表<code>cpdomains</code>&nbsp;。要求解析出所有域名的访问次数，输出格式和输入格式相同，不限定先后顺序。</p>\n\n<pre>\n<strong>示例 1:</strong>\n<strong>输入:</strong> \n[&quot;9001 discuss.leetcode.com&quot;]\n<strong>输出:</strong> \n[&quot;9001 discuss.leetcode.com&quot;, &quot;9001 leetcode.com&quot;, &quot;9001 com&quot;]\n<strong>说明:</strong> \n例子中仅包含一个网站域名：&quot;discuss.leetcode.com&quot;。按照前文假设，子域名&quot;leetcode.com&quot;和&quot;com&quot;都会被访问，所以它们都被访问了9001次。\n</pre>\n\n<pre>\n<strong>示例 2\n输入:</strong> \n[&quot;900 google.mail.com&quot;, &quot;50 yahoo.com&quot;, &quot;1 intel.mail.com&quot;, &quot;5 wiki.org&quot;]\n<strong>输出:</strong> \n[&quot;901 mail.com&quot;,&quot;50 yahoo.com&quot;,&quot;900 google.mail.com&quot;,&quot;5 wiki.org&quot;,&quot;5 org&quot;,&quot;1 intel.mail.com&quot;,&quot;951 com&quot;]\n<strong>说明:</strong> \n按照假设，会访问&quot;google.mail.com&quot; 900次，&quot;yahoo.com&quot; 50次，&quot;intel.mail.com&quot; 1次，&quot;wiki.org&quot; 5次。\n而对于父域名，会访问&quot;mail.com&quot; 900+1 = 901次，&quot;com&quot; 900 + 50 + 1 = 951次，和 &quot;org&quot; 5 次。\n</pre>\n\n<p><strong>注意事项：</strong></p>\n\n<ul>\n\t<li>&nbsp;<code>cpdomains</code>&nbsp;的长度小于&nbsp;<code>100</code>。</li>\n\t<li>每个域名的长度小于<code>100</code>。</li>\n\t<li>每个域名地址包含一个或两个&quot;.&quot;符号。</li>\n\t<li>输入中任意一个域名的访问次数都小于<code>10000</code>。</li>\n</ul>\n","bus-routes":"<p>我们有一系列公交路线。每一条路线 <code>routes[i]</code>&nbsp;上都有一辆公交车在上面循环行驶。例如，有一条路线&nbsp;<code>routes[0] = [1, 5, 7]</code>，表示第一辆 (下标为0) 公交车会一直按照&nbsp;1-&gt;5-&gt;7-&gt;1-&gt;5-&gt;7-&gt;1-&gt;...&nbsp;的车站路线行驶。</p>\n\n<p>假设我们从&nbsp;<code>S</code>&nbsp;车站开始（初始时不在公交车上），要去往&nbsp;<code>T</code>&nbsp;站。 期间仅可乘坐公交车，求出最少乘坐的公交车数量。返回 -1 表示不可能到达终点车站。</p>\n\n<pre>\n<strong>示例:</strong>\n<strong>输入:</strong> \nroutes = [[1, 2, 7], [3, 6, 7]]\nS = 1\nT = 6\n<strong>输出:</strong> 2\n<strong>解释:</strong> \n最优策略是先乘坐第一辆公交车到达车站 7, 然后换乘第二辆公交车到车站 6。\n</pre>\n\n<p><strong>说明: </strong></p>\n\n<ul>\n\t<li><code>1 &lt;= routes.length &lt;= 500</code>.</li>\n\t<li><code>1 &lt;= routes[i].length &lt;= 500</code>.</li>\n\t<li><code>0 &lt;= routes[i][j] &lt; 10 ^ 6</code>.</li>\n</ul>\n","transform-to-chessboard":"<p>一个 N&nbsp;x N的 <code>board</code>&nbsp;仅由&nbsp;<code>0</code>&nbsp;和&nbsp;<code>1</code>&nbsp;组成&nbsp;。每次移动，你能任意交换两列或是两行的位置。</p>\n\n<p>输出将这个矩阵变为 &ldquo;棋盘&rdquo; 所需的最小移动次数。&ldquo;棋盘&rdquo; 是指任意一格的上下左右四个方向的值均与本身不同的矩阵。如果不存在可行的变换，输出 -1。</p>\n\n<pre><strong>示例:</strong>\n<strong>输入:</strong> board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]\n<strong>输出:</strong> 2\n<strong>解释:</strong>\n一种可行的变换方式如下，从左到右：\n\n0110     1010     1010\n0110 --&gt; 1010 --&gt; 0101\n1001     0101     1010\n1001     0101     0101\n\n第一次移动交换了第一列和第二列。\n第二次移动交换了第二行和第三行。\n\n\n<strong>输入:</strong> board = [[0, 1], [1, 0]]\n<strong>输出:</strong> 0\n<strong>解释:</strong>\n注意左上角的格值为0时也是合法的棋盘，如：\n\n01\n10\n\n也是合法的棋盘.\n\n<strong>输入:</strong> board = [[1, 0], [1, 0]]\n<strong>输出:</strong> -1\n<strong>解释:</strong>\n任意的变换都不能使这个输入变为合法的棋盘。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>board</code>&nbsp;是方阵，且行列数的范围是<code>[2, 30]</code>。</li>\n\t<li><code>board[i][j]</code>&nbsp;将只包含&nbsp;<code>0</code>或&nbsp;<code>1</code>。</li>\n</ul>\n","max-increase-to-keep-city-skyline":"<p>在二维数组<code>grid</code>中，<code>grid[i][j]</code>代表位于某处的建筑物的高度。 我们被允许增加任何数量（不同建筑物的数量可能不同）的建筑物的高度。 高度 0 也被认为是建筑物。</p>\n\n<p>最后，从新数组的所有四个方向（即顶部，底部，左侧和右侧）观看的&ldquo;天际线&rdquo;必须与原始数组的天际线相同。 城市的天际线是从远处观看时，由所有建筑物形成的矩形的外部轮廓。 请看下面的例子。</p>\n\n<p>建筑物高度可以增加的最大总和是多少？</p>\n\n<pre>\n<strong>例子：</strong>\n<strong>输入：</strong> grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]\n<strong>输出：</strong> 35\n<strong>解释：</strong> \nThe grid is:\n[ [3, 0, 8, 4], \n  [2, 4, 5, 7],\n  [9, 2, 6, 3],\n  [0, 3, 1, 0] ]\n\n从数组竖直方向（即顶部，底部）看&ldquo;天际线&rdquo;是：[9, 4, 8, 7]\n从水平水平方向（即左侧，右侧）看&ldquo;天际线&rdquo;是：[8, 7, 9, 3]\n\n在不影响天际线的情况下对建筑物进行增高后，新数组如下：\n\ngridNew = [ [8, 4, 8, 7],\n            [7, 4, 7, 7],\n            [9, 4, 8, 7],\n            [3, 3, 3, 3] ]\n</pre>\n\n<p><strong>说明: </strong></p>\n\n<ul>\n\t<li><code>1 &lt; grid.length = grid[0].length &lt;= 50</code>。</li>\n\t<li>&nbsp;<code>grid[i][j]</code> 的高度范围是： <code>[0, 100]</code>。</li>\n\t<li>一座建筑物占据一个<code>grid[i][j]</code>：换言之，它们是 <code>1 x 1 x grid[i][j]</code> 的长方体。</li>\n</ul>\n","find-eventual-safe-states":"<p>在有向图中, 我们从某个节点和每个转向处开始, 沿着图的有向边走。 如果我们到达的节点是终点 (即它没有连出的有向边), 我们停止。</p>\n\n<p>现在, 如果我们最后能走到终点，那么我们的起始节点是<em>最终安全</em>的。 更具体地说, 存在一个自然数 <code>K</code>,&nbsp; 无论选择从哪里开始行走, 我们走了不到 <code>K</code> 步后必能停止在一个终点。</p>\n\n<p>哪些节点最终是安全的？ 结果返回一个有序的数组。</p>\n\n<p>该有向图有 <code>N</code> 个节点，标签为 <code>0, 1, ..., N-1</code>, 其中 <code>N</code> 是&nbsp;<code>graph</code>&nbsp;的节点数.&nbsp; 图以以下的形式给出: <code>graph[i]</code> 是节点 <code>j</code> 的一个列表，满足 <code>(i, j)</code> 是图的一条有向边。</p>\n\n<pre>\n<strong>示例：</strong>\n<strong>输入：</strong>graph = [[1,2],[2,3],[5],[0],[5],[],[]]\n<strong>输出：</strong>[2,4,5,6]\n这里是上图的示意图。\n\n</pre>\n\n<p><img alt=\"Illustration of graph\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/17/picture1.png\" style=\"height:86px; width:300px\" /></p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>graph</code> 节点数不超过 <code>10000</code>.</li>\n\t<li>图的边数不会超过 <code>32000</code>.</li>\n\t<li>每个 <code>graph[i]</code> 被排序为不同的整数列表， 在区间 <code>[0, graph.length - 1]</code>&nbsp;中选取。</li>\n</ul>\n","number-of-matching-subsequences":"<p>给定字符串 <code>S</code> 和单词字典 <code>words</code>, 求&nbsp;<code>words[i]</code>&nbsp;中是&nbsp;<code>S</code>&nbsp;的子序列的单词个数。</p>\n\n<pre>\n<strong>示例:</strong>\n<strong>输入:</strong> \nS = &quot;abcde&quot;\nwords = [&quot;a&quot;, &quot;bb&quot;, &quot;acd&quot;, &quot;ace&quot;]\n<strong>输出:</strong> 3\n<strong>解释:</strong> 有三个是&nbsp;S 的子序列的单词: &quot;a&quot;, &quot;acd&quot;, &quot;ace&quot;。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li>所有在<code>words</code>和&nbsp;<code>S</code>&nbsp;里的单词都只由小写字母组成。</li>\n\t<li><code>S</code> 的长度在&nbsp;<code>[1, 50000]</code>。</li>\n\t<li><code>words</code>&nbsp;的长度在&nbsp;<code>[1, 5000]</code>。</li>\n\t<li><code>words[i]</code>的长度在<code>[1, 50]</code>。</li>\n</ul>\n","minimum-distance-between-bst-nodes":"<p>给定一个二叉搜索树的根结点&nbsp;<code>root</code>, 返回树中任意两节点的差的最小值。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>\n<strong>输入:</strong> root = [4,2,6,1,3,null,null]\n<strong>输出:</strong> 1\n<strong>解释:</strong>\n注意，root是树结点对象(TreeNode object)，而不是数组。\n\n给定的树 [4,2,6,1,3,null,null] 可表示为下图:\n\n          4\n        /   \\\n      2      6\n     / \\    \n    1   3  \n\n最小的差值是 1, 它是节点1和节点2的差值, 也是节点3和节点2的差值。</pre>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li>二叉树的大小范围在 <code>2</code> 到&nbsp;<code>100</code>。</li>\n\t<li>二叉树总是有效的，每个节点的值都是整数，且不重复。</li>\n</ol>\n","valid-tic-tac-toe-state":"<p>用字符串数组作为井字游戏的游戏板&nbsp;<code>board</code>。当且仅当在井字游戏过程中，玩家有可能将字符放置成游戏板所显示的状态时，才返回 true。</p>\n\n<p>该游戏板是一个 3 x 3 数组，由字符&nbsp;<code>&quot; &quot;</code>，<code>&quot;X&quot;</code>&nbsp;和&nbsp;<code>&quot;O&quot;</code>&nbsp;组成。字符&nbsp;<code>&quot; &quot;</code>&nbsp;代表一个空位。</p>\n\n<p>以下是井字游戏的规则：</p>\n\n<ul>\n\t<li>玩家轮流将字符放入空位（&quot; &quot;）中。</li>\n\t<li>第一个玩家总是放字符 &ldquo;X&rdquo;，且第二个玩家总是放字符 &ldquo;O&rdquo;。</li>\n\t<li>&ldquo;X&rdquo; 和 &ldquo;O&rdquo; 只允许放置在空位中，不允许对已放有字符的位置进行填充。</li>\n\t<li>当有 3 个相同（且非空）的字符填充任何行、列或对角线时，游戏结束。</li>\n\t<li>当所有位置非空时，也算为游戏结束。</li>\n\t<li>如果游戏结束，玩家不允许再放置字符。</li>\n</ul>\n\n<pre>\n<strong>示例 1:</strong>\n<strong>输入:</strong> board = [&quot;O&nbsp; &quot;, &quot;&nbsp; &nbsp;&quot;, &quot;&nbsp; &nbsp;&quot;]\n<strong>输出:</strong> false\n<strong>解释:</strong> 第一个玩家总是放置&ldquo;X&rdquo;。\n\n<strong>示例 2:</strong>\n<strong>输入:</strong> board = [&quot;XOX&quot;, &quot; X &quot;, &quot;   &quot;]\n<strong>输出:</strong> false\n<strong>解释:</strong> 玩家应该是轮流放置的。\n\n<strong>示例 3:</strong>\n<strong>输入:</strong> board = [&quot;XXX&quot;, &quot;   &quot;, &quot;OOO&quot;]\n<strong>输出:</strong> false\n\n<strong>示例 4:</strong>\n<strong>输入:</strong> board = [&quot;XOX&quot;, &quot;O O&quot;, &quot;XOX&quot;]\n<strong>输出:</strong> true\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>游戏板&nbsp;<code>board</code>&nbsp;是长度为 3 的字符串数组，其中每个字符串&nbsp;<code>board[i]</code>&nbsp;的长度为&nbsp;3。</li>\n\t<li>&nbsp;<code>board[i][j]</code>&nbsp;是集合&nbsp;<code>{&quot; &quot;, &quot;X&quot;, &quot;O&quot;}</code>&nbsp;中的一个字符。</li>\n</ul>\n","shortest-distance-to-a-character":"<p>给定一个字符串&nbsp;<code>S</code>&nbsp;和一个字符&nbsp;<code>C</code>。返回一个代表字符串&nbsp;<code>S</code>&nbsp;中每个字符到字符串&nbsp;<code>S</code>&nbsp;中的字符&nbsp;<code>C</code>&nbsp;的最短距离的数组。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> S = &quot;loveleetcode&quot;, C = &#39;e&#39;\n<strong>输出:</strong> [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>字符串&nbsp;<code>S</code>&nbsp;的长度范围为&nbsp;<code>[1, 10000]</code>。</li>\n\t<li><code>C</code>&nbsp;是一个单字符，且保证是字符串&nbsp;<code>S</code>&nbsp;里的字符。</li>\n\t<li><code>S</code>&nbsp;和&nbsp;<code>C</code>&nbsp;中的所有字母均为小写字母。</li>\n</ol>\n","smallest-rotation-with-highest-score":"<p>给定一个数组&nbsp;<code>A</code>，我们可以将它按一个非负整数 <code>K</code>&nbsp;进行轮调，这样可以使数组变为&nbsp;<code>A[K], A[K+1], A{K+2], ... A[A.length - 1], A[0], A[1], ..., A[K-1]</code>&nbsp;的形式。此后，任何值小于或等于其索引的项都可以记作一分。</p>\n\n<p>例如，如果数组为&nbsp;<code>[2, 4, 1, 3, 0]</code>，我们按&nbsp;<code>K = 2</code>&nbsp;进行轮调后，它将变成&nbsp;<code>[1, 3, 0, 2, 4]</code>。这将记作 3 分，因为 1 &gt; 0 [no points], 3 &gt; 1 [no points], 0 &lt;= 2 [one point], 2 &lt;= 3 [one point], 4 &lt;= 4 [one point]。</p>\n\n<p>在所有可能的轮调中，返回我们所能得到的最高分数对应的轮调索引 K。如果有多个答案，返回满足条件的最小的索引 K。</p>\n\n<pre><strong>示例 1：</strong>\n<strong>输入：</strong>[2, 3, 1, 4, 0]\n<strong>输出：</strong>3\n<strong>解释：</strong>\n下面列出了每个 K 的得分：\nK = 0,  A = [2,3,1,4,0],    score 2\nK = 1,  A = [3,1,4,0,2],    score 3\nK = 2,  A = [1,4,0,2,3],    score 3\nK = 3,  A = [4,0,2,3,1],    score 4\nK = 4,  A = [0,2,3,1,4],    score 3\n所以我们应当选择&nbsp;K = 3，得分最高。</pre>\n\n<p>&nbsp;</p>\n\n<pre><strong>示例 2：</strong>\n<strong>输入：</strong>[1, 3, 0, 2, 4]\n<strong>输出：</strong>0\n<strong>解释：</strong>\nA 无论怎么变化总是有 3 分。\n所以我们将选择最小的 K，即 0。\n</pre>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>A</code>&nbsp;的长度最大为&nbsp;<code>20000</code>。</li>\n\t<li><code>A[i]</code> 的取值范围是&nbsp;<code>[0, A.length]</code>。</li>\n</ul>\n","short-encoding-of-words":"<p>给定一个单词列表，我们将这个列表编码成一个索引字符串&nbsp;<code>S</code>&nbsp;与一个索引列表 <code>A</code>。</p>\n\n<p>例如，如果这个列表是 <code>[&quot;time&quot;, &quot;me&quot;, &quot;bell&quot;]</code>，我们就可以将其表示为 <code>S = &quot;time#bell#&quot;</code> 和 <code>indexes = [0, 2, 5]</code>。</p>\n\n<p>对于每一个索引，我们可以通过从字符串 <code>S</code>&nbsp;中索引的位置开始读取字符串，直到 &quot;#&quot; 结束，来恢复我们之前的单词列表。</p>\n\n<p>那么成功对给定单词列表进行编码的最小字符串长度是多少呢？</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入:</strong> words = <code>[&quot;time&quot;, &quot;me&quot;, &quot;bell&quot;]</code>\n<strong>输出:</strong> 10\n<strong>说明:</strong> S = <code>&quot;time#bell#&quot; ， indexes = [0, 2, 5</code>] 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= words.length&nbsp;&lt;= 2000</code></li>\n\t<li><code>1 &lt;=&nbsp;words[i].length&nbsp;&lt;= 7</code></li>\n\t<li>每个单词都是小写字母 。</li>\n</ol>\n","rabbits-in-forest":"<p>森林中，每个兔子都有颜色。其中一些兔子（可能是全部）告诉你还有多少其他的兔子和自己有相同的颜色。我们将这些回答放在&nbsp;<code>answers</code>&nbsp;数组里。</p>\n\n<p>返回森林中兔子的最少数量。</p>\n\n<pre>\n<strong>示例:</strong>\n<strong>输入:</strong> answers = [1, 1, 2]\n<strong>输出:</strong> 5\n<strong>解释:</strong>\n两只回答了 &quot;1&quot; 的兔子可能有相同的颜色，设为红色。\n之后回答了 &quot;2&quot; 的兔子不会是红色，否则他们的回答会相互矛盾。\n设回答了 &quot;2&quot; 的兔子为蓝色。\n此外，森林中还应有另外 2 只蓝色兔子的回答没有包含在数组中。\n因此森林中兔子的最少数量是 5: 3 只回答的和 2 只没有回答的。\n\n<strong>输入:</strong> answers = [10, 10, 10]\n<strong>输出:</strong> 11\n\n<strong>输入:</strong> answers = []\n<strong>输出:</strong> 0\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li><code>answers</code>&nbsp;的长度最大为<code>1000</code>。</li>\n\t<li><code>answers[i]</code>&nbsp;是在&nbsp;<code>[0, 999]</code>&nbsp;范围内的整数。</li>\n</ol>\n","cheapest-flights-within-k-stops":"<p>有 <code>n</code> 个城市通过 <code>m</code> 个航班连接。每个航班都从城市 <code>u</code> 开始，以价格 <code>w</code> 抵达 <code>v</code>。</p>\n\n<p>现在给定所有的城市和航班，以及出发城市 <code>src</code> 和目的地 <code>dst</code>，你的任务是找到从 <code>src</code> 到 <code>dst</code> 最多经过 <code>k</code>&nbsp;站中转的最便宜的价格。 如果没有这样的路线，则输出 <code>-1</code>。</p>\n\n<pre><strong>示例 1:</strong>\n<strong>输入:</strong> \nn = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\nsrc = 0, dst = 2, k = 1\n<strong>输出:</strong> 200\n<strong>解释:</strong> \n城市航班图如下\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/16/995.png\" style=\"height: 180px; width: 246px;\">\n\n从城市 0 到城市 2 在 1 站中转以内的最便宜价格是 200，如图中红色所示。</pre>\n\n<pre><strong>示例 2:</strong>\n<strong>输入:</strong> \nn = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\nsrc = 0, dst = 2, k = 0\n<strong>输出:</strong> 500\n<strong>解释:</strong> \n城市航班图如下\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/16/995.png\" style=\"height: 180px; width: 246px;\">\n\n从城市 0 到城市 2 在 0 站中转以内的最便宜价格是 500，如图中蓝色所示。</pre>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n</code> 范围是 <code>[1, 100]</code>，城市标签从 <code>0</code> 到 <code>n</code><code> - 1</code>.</li>\n\t<li>航班数量范围是 <code>[0, n * (n - 1) / 2]</code>.</li>\n\t<li>每个航班的格式 <code>(src, </code><code>dst</code><code>, price)</code>.</li>\n\t<li>每个航班的价格范围是 <code>[1, 10000]</code>.</li>\n\t<li><code>k</code> 范围是 <code>[0, n - 1]</code>.</li>\n\t<li>航班没有重复，且不存在环路</li>\n</ul>\n","largest-sum-of-averages":"<p>我们将给定的数组&nbsp;<code>A</code>&nbsp;分成&nbsp;<code>K</code>&nbsp;个相邻的非空子数组 ，我们的分数由每个子数组内的平均值的总和构成。计算我们所能得到的最大分数是多少。</p>\n\n<p>注意我们必须使用 A 数组中的每一个数进行分组，并且分数不一定需要是整数。</p>\n\n<pre>\n<strong>示例:</strong>\n<strong>输入:</strong> \nA = [9,1,2,3,9]\nK = 3\n<strong>输出:</strong> 20\n<strong>解释:</strong> \nA 的最优分组是[9], [1, 2, 3], [9]. 得到的分数是 9 + (1 + 2 + 3) / 3 + 9 = 20.\n我们也可以把 A 分成[9, 1], [2], [3, 9].\n这样的分组得到的分数为 5 + 2 + 6 = 13, 但不是最大值.\n</pre>\n\n<p><strong>说明: </strong></p>\n\n<ul>\n\t<li><code>1 &lt;= A.length &lt;= 100</code>.</li>\n\t<li><code>1 &lt;= A[i] &lt;= 10000</code>.</li>\n\t<li><code>1 &lt;= K &lt;= A.length</code>.</li>\n\t<li>答案误差在&nbsp;<code>10^-6</code>&nbsp;内被视为是正确的。</li>\n</ul>\n","rotate-string":"<p>给定两个字符串, <code>A</code>&nbsp;和&nbsp;<code>B</code>。</p>\n\n<p><code>A</code>&nbsp;的旋转操作就是将&nbsp;<code>A</code> 最左边的字符移动到最右边。&nbsp;例如, 若&nbsp;<code>A = &#39;abcde&#39;</code>，在移动一次之后结果就是<code>&#39;bcdea&#39;</code>&nbsp;。如果在若干次旋转操作之后，<code>A</code>&nbsp;能变成<code>B</code>，那么返回<code>True</code>。</p>\n\n<pre>\n<strong>示例 1:</strong>\n<strong>输入:</strong> A = &#39;abcde&#39;, B = &#39;cdeab&#39;\n<strong>输出:</strong> true\n\n<strong>示例 2:</strong>\n<strong>输入:</strong> A = &#39;abcde&#39;, B = &#39;abced&#39;\n<strong>输出:</strong> false</pre>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li><code>A</code> 和&nbsp;<code>B</code>&nbsp;长度不超过&nbsp;<code>100</code>。</li>\n</ul>\n","design-linked-list":"<p>设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：<code>val</code>&nbsp;和&nbsp;<code>next</code>。<code>val</code>&nbsp;是当前节点的值，<code>next</code>&nbsp;是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性&nbsp;<code>prev</code>&nbsp;以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。</p>\n\n<p>在链表类中实现这些功能：</p>\n\n<ul>\n\t<li>get(index)：获取链表中第&nbsp;<code>index</code>&nbsp;个节点的值。如果索引无效，则返回<code>-1</code>。</li>\n\t<li>addAtHead(val)：在链表的第一个元素之前添加一个值为&nbsp;<code>val</code>&nbsp;的节点。插入后，新节点将成为链表的第一个节点。</li>\n\t<li>addAtTail(val)：将值为&nbsp;<code>val</code> 的节点追加到链表的最后一个元素。</li>\n\t<li>addAtIndex(index,val)：在链表中的第&nbsp;<code>index</code>&nbsp;个节点之前添加值为&nbsp;<code>val</code>&nbsp; 的节点。如果&nbsp;<code>index</code>&nbsp;等于链表的长度，则该节点将附加到链表的末尾。如果 <code>index</code> 大于链表长度，则不会插入节点。</li>\n\t<li>deleteAtIndex(index)：如果索引&nbsp;<code>index</code> 有效，则删除链表中的第&nbsp;<code>index</code> 个节点。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>MyLinkedList linkedList = new MyLinkedList();\nlinkedList.addAtHead(1);\nlinkedList.addAtTail(3);\nlinkedList.addAtIndex(1,2);   //链表变为1-&gt; 2-&gt; 3\nlinkedList.get(1);            //返回2\nlinkedList.deleteAtIndex(1);  //现在链表是1-&gt; 3\nlinkedList.get(1);            //返回3\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>所有值都在&nbsp;<code>[1, 1000]</code>&nbsp;之内。</li>\n\t<li>操作次数将在&nbsp;&nbsp;<code>[1, 1000]</code>&nbsp;之内。</li>\n\t<li>请不要使用内置的 LinkedList 库。</li>\n</ul>\n","design-hashset":"<p>不使用任何内建的哈希表库设计一个哈希集合</p>\n\n<p>具体地说，你的设计应该包含以下的功能</p>\n\n<ul>\n\t<li><code>add(value)</code>：向哈希集合中插入一个值。</li>\n\t<li><code>contains(value)</code> ：返回哈希集合中是否存在这个值。</li>\n\t<li><code>remove(value)</code>：将给定值从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。</li>\n</ul>\n\n<p><br>\n<strong>示例:</strong></p>\n\n<pre>MyHashSet hashSet = new MyHashSet();\nhashSet.add(1); &nbsp; &nbsp; &nbsp; &nbsp; \nhashSet.add(2); &nbsp; &nbsp; &nbsp; &nbsp; \nhashSet.contains(1); &nbsp;&nbsp;&nbsp;// 返回 true\nhashSet.contains(3); &nbsp;&nbsp;&nbsp;// 返回 false (未找到)\nhashSet.add(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\nhashSet.contains(2); &nbsp;&nbsp;&nbsp;// 返回 true\nhashSet.remove(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\nhashSet.contains(2); &nbsp;&nbsp;&nbsp;// 返回  false (已经被删除)\n</pre>\n\n<p><br>\n<strong>注意：</strong></p>\n\n<ul>\n\t<li>所有的值都在&nbsp;<code>[1, 1000000]</code>的范围内。</li>\n\t<li>操作的总数目在<code>[1, 10000]</code>范围内。</li>\n\t<li>不要使用内建的哈希集合库。</li>\n</ul>\n","custom-sort-string":"<p>字符串<code>S</code>和 <code>T</code> 只包含小写字符。在<code>S</code>中，所有字符只会出现一次。</p>\n\n<p><code>S</code> 已经根据某种规则进行了排序。我们要根据<code>S</code>中的字符顺序对<code>T</code>进行排序。更具体地说，如果<code>S</code>中<code>x</code>在<code>y</code>之前出现，那么返回的字符串中<code>x</code>也应出现在<code>y</code>之前。</p>\n\n<p>返回任意一种符合条件的字符串<code>T</code>。</p>\n\n<pre>\n<strong>示例:</strong>\n<strong>输入:</strong>\nS = &quot;cba&quot;\nT = &quot;abcd&quot;\n<strong>输出:</strong> &quot;cbad&quot;\n<strong>解释:</strong> \nS中出现了字符 &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, 所以 &quot;a&quot;, &quot;b&quot;, &quot;c&quot; 的顺序应该是 &quot;c&quot;, &quot;b&quot;, &quot;a&quot;. \n由于 &quot;d&quot; 没有在S中出现, 它可以放在T的任意位置. &quot;dcba&quot;, &quot;cdba&quot;, &quot;cbda&quot; 都是合法的输出。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>S</code>的最大长度为<code>26</code>，其中没有重复的字符。</li>\n\t<li><code>T</code>的最大长度为<code>200</code>。</li>\n\t<li><code>S</code>和<code>T</code>只包含小写字符。</li>\n</ul>\n","binary-tree-pruning":"<p>给定二叉树根结点&nbsp;<code>root</code>&nbsp;，此外树的每个结点的值要么是 0，要么是 1。</p>\n\n<p>返回移除了所有不包含 1 的子树的原二叉树。</p>\n\n<p>( 节点 X 的子树为 X 本身，以及所有 X 的后代。)</p>\n\n<pre>\n<strong>示例1:</strong>\n<strong>输入:</strong> [1,null,0,0,1]\n<strong>输出: </strong>[1,null,0,null,1]\n \n<strong>解释:</strong> \n只有红色节点满足条件&ldquo;所有不包含 1 的子树&rdquo;。\n右图为返回的答案。\n\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_2.png\" style=\"width:450px\" />\n</pre>\n\n<pre>\n<strong>示例2:</strong>\n<strong>输入:</strong> [1,0,1,0,0,0,1]\n<strong>输出: </strong>[1,null,1,null,1]\n\n\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_1.png\" style=\"width:450px\" />\n</pre>\n\n<pre>\n<strong>示例3:</strong>\n<strong>输入:</strong> [1,1,0,1,1,0,1,0]\n<strong>输出: </strong>[1,1,0,1,1,null,1]\n\n\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/05/1028.png\" style=\"width:450px\" />\n</pre>\n\n<p><strong>说明: </strong></p>\n\n<ul>\n\t<li>给定的二叉树最多有&nbsp;<code>100</code>&nbsp;个节点。</li>\n\t<li>每个节点的值只会为&nbsp;<code>0</code> 或&nbsp;<code>1</code>&nbsp;。</li>\n</ul>\n","unique-morse-code-words":"<p>国际摩尔斯密码定义一种标准编码方式，将每个字母对应于一个由一系列点和短线组成的字符串，&nbsp;比如: <code>&quot;a&quot;</code> 对应 <code>&quot;.-&quot;</code>, <code>&quot;b&quot;</code> 对应 <code>&quot;-...&quot;</code>, <code>&quot;c&quot;</code> 对应 <code>&quot;-.-.&quot;</code>, 等等。</p>\n\n<p>为了方便，所有26个英文字母对应摩尔斯密码表如下：</p>\n\n<pre>[&quot;.-&quot;,&quot;-...&quot;,&quot;-.-.&quot;,&quot;-..&quot;,&quot;.&quot;,&quot;..-.&quot;,&quot;--.&quot;,&quot;....&quot;,&quot;..&quot;,&quot;.---&quot;,&quot;-.-&quot;,&quot;.-..&quot;,&quot;--&quot;,&quot;-.&quot;,&quot;---&quot;,&quot;.--.&quot;,&quot;--.-&quot;,&quot;.-.&quot;,&quot;...&quot;,&quot;-&quot;,&quot;..-&quot;,&quot;...-&quot;,&quot;.--&quot;,&quot;-..-&quot;,&quot;-.--&quot;,&quot;--..&quot;]</pre>\n\n<p>给定一个单词列表，每个单词可以写成每个字母对应摩尔斯密码的组合。例如，&quot;cab&quot; 可以写成 &quot;-.-..--...&quot;，(即 &quot;-.-.&quot; + &quot;-...&quot; + &quot;.-&quot;字符串的结合)。我们将这样一个连接过程称作单词翻译。</p>\n\n<p>返回我们可以获得所有词不同单词翻译的数量。</p>\n\n<pre><strong>例如:</strong>\n<strong>输入:</strong> words = [&quot;gin&quot;, &quot;zen&quot;, &quot;gig&quot;, &quot;msg&quot;]\n<strong>输出:</strong> 2\n<strong>解释: </strong>\n各单词翻译如下:\n&quot;gin&quot; -&gt; &quot;--...-.&quot;\n&quot;zen&quot; -&gt; &quot;--...-.&quot;\n&quot;gig&quot; -&gt; &quot;--...--.&quot;\n&quot;msg&quot; -&gt; &quot;--...--.&quot;\n\n共有 2 种不同翻译, &quot;--...-.&quot; 和 &quot;--...--.&quot;.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li>单词列表<code>words</code>&nbsp;的长度不会超过 <code>100</code>。</li>\n\t<li>每个单词&nbsp;<code>words[i]</code>的长度范围为&nbsp;<code>[1, 12]</code>。</li>\n\t<li>每个单词&nbsp;<code>words[i]</code>只包含小写字母。</li>\n</ul>\n","letter-case-permutation":"<p>给定一个字符串<code>S</code>，通过将字符串<code>S</code>中的每个字母转变大小写，我们可以获得一个新的字符串。返回所有可能得到的字符串集合。</p>\n\n<pre>\n<strong>示例:</strong>\n<strong>输入:</strong> S = &quot;a1b2&quot;\n<strong>输出:</strong> [&quot;a1b2&quot;, &quot;a1B2&quot;, &quot;A1b2&quot;, &quot;A1B2&quot;]\n\n<strong>输入:</strong> S = &quot;3z4&quot;\n<strong>输出:</strong> [&quot;3z4&quot;, &quot;3Z4&quot;]\n\n<strong>输入:</strong> S = &quot;12345&quot;\n<strong>输出:</strong> [&quot;12345&quot;]\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li><code>S</code>&nbsp;的长度不超过<code>12</code>。</li>\n\t<li><code>S</code>&nbsp;仅由数字和字母组成。</li>\n</ul>\n","design-hashmap":"<p>不使用任何内建的哈希表库设计一个哈希映射</p>\n\n<p>具体地说，你的设计应该包含以下的功能</p>\n\n<ul>\n\t<li><code>put(key, value)</code>：向哈希映射中插入(键,值)的数值对。如果键对应的值已经存在，更新这个值。</li>\n\t<li><code>get(key)</code>：返回给定的键所对应的值，如果映射中不包含这个键，返回-1。</li>\n\t<li><code>remove(key)</code>：如果映射中存在这个键，删除这个数值对。</li>\n</ul>\n\n<p><br />\n<strong>示例：</strong></p>\n\n<pre>\nMyHashMap hashMap = new MyHashMap();\nhashMap.put(1, 1); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\nhashMap.put(2, 2); &nbsp; &nbsp; &nbsp; &nbsp; \nhashMap.get(1); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// 返回 1\nhashMap.get(3); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// 返回 -1 (未找到)\nhashMap.put(2, 1); &nbsp; &nbsp; &nbsp; &nbsp; // 更新已有的值\nhashMap.get(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// 返回 1 \nhashMap.remove(2); &nbsp; &nbsp; &nbsp; &nbsp; // 删除键为2的数据\nhashMap.get(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// 返回 -1 (未找到) \n</pre>\n\n<p><br />\n<strong>注意：</strong></p>\n\n<ul>\n\t<li>所有的值都在&nbsp;<code>[1, 1000000]</code>的范围内。</li>\n\t<li>操作的总数目在<code>[1, 10000]</code>范围内。</li>\n\t<li>不要使用内建的哈希库。</li>\n</ul>\n","serialize-and-deserialize-n-ary-tree":null,"search-in-a-sorted-array-of-unknown-size":null,"swap-adjacent-in-lr-string":"<p>在一个由 <code>&#39;L&#39;</code> , <code>&#39;R&#39;</code> 和 <code>&#39;X&#39;</code> 三个字符组成的字符串（例如<code>&quot;RXXLRXRXL&quot;</code>）中进行移动操作。一次移动操作指用一个<code>&quot;LX&quot;</code>替换一个<code>&quot;XL&quot;</code>，或者用一个<code>&quot;XR&quot;</code>替换一个<code>&quot;RX&quot;</code>。现给定起始字符串<code>start</code>和结束字符串<code>end</code>，请编写代码，当且仅当存在一系列移动操作使得<code>start</code>可以转换成<code>end</code>时， 返回<code>True</code>。</p>\n\n<p><strong>示例 :</strong></p>\n\n<pre>\n<strong>输入:</strong> start = &quot;RXXLRXRXL&quot;, end = &quot;XRLXXRRLX&quot;\n<strong>输出:</strong> True\n<strong>解释:</strong>\n我们可以通过以下几步将start转换成end:\nRXXLRXRXL -&gt;\nXRXLRXRXL -&gt;\nXRLXRXRXL -&gt;\nXRLXXRRXL -&gt;\nXRLXXRRLX\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= len(start) = len(end) &lt;= 10000</code>。</li>\n\t<li><code>start</code>和<code>end</code>中的字符串仅限于<code>&#39;L&#39;</code>, <code>&#39;R&#39;</code>和<code>&#39;X&#39;</code>。</li>\n</ol>\n","sliding-puzzle":"<p>在一个 2 x 3 的板上（<code>board</code>）有 5 块砖瓦，用数字 <code>1~5</code> 来表示, 以及一块空缺用&nbsp;<code>0</code>&nbsp;来表示.</p>\n\n<p>一次移动定义为选择&nbsp;<code>0</code>&nbsp;与一个相邻的数字（上下左右）进行交换.</p>\n\n<p>最终当板&nbsp;<code>board</code>&nbsp;的结果是&nbsp;<code>[[1,2,3],[4,5,0]]</code>&nbsp;谜板被解开。</p>\n\n<p>给出一个谜板的初始状态，返回最少可以通过多少次移动解开谜板，如果不能解开谜板，则返回 -1 。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>\n<strong>输入：</strong>board = [[1,2,3],[4,0,5]]\n<strong>输出：</strong>1\n<strong>解释：</strong>交换 0 和 5 ，1 步完成\n</pre>\n\n<pre>\n<strong>输入：</strong>board = [[1,2,3],[5,4,0]]\n<strong>输出：</strong>-1\n<strong>解释：</strong>没有办法完成谜板\n</pre>\n\n<pre>\n<strong>输入：</strong>board = [[4,1,2],[5,0,3]]\n<strong>输出：</strong>5\n<strong>解释：</strong>\n最少完成谜板的最少移动次数是 5 ，\n一种移动路径:\n尚未移动: [[4,1,2],[5,0,3]]\n移动 1 次: [[4,1,2],[0,5,3]]\n移动 2 次: [[0,1,2],[4,5,3]]\n移动 3 次: [[1,0,2],[4,5,3]]\n移动 4 次: [[1,2,0],[4,5,3]]\n移动 5 次: [[1,2,3],[4,5,0]]\n</pre>\n\n<pre>\n<strong>输入：</strong>board = [[3,2,4],[1,5,0]]\n<strong>输出：</strong>14\n</pre>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>board</code>&nbsp;是一个如上所述的 2 x 3 的数组.</li>\n\t<li><code>board[i][j]</code>&nbsp;是一个&nbsp;<code>[0, 1, 2, 3, 4, 5]</code>&nbsp;的排列.</li>\n</ul>\n","n-ary-tree-preorder-traversal":"<p>给定一个 N 叉树，返回其节点值的<em>前序遍历</em>。</p>\r\n\r\n<p>例如，给定一个&nbsp;<code>3叉树</code>&nbsp;:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>返回其前序遍历: <code>[1,3,5,6,2,4]</code>。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>说明:&nbsp;</strong>递归法很简单，你可以使用迭代法完成此题吗?</p>","split-bst":null,"binary-search":"<p>给定一个&nbsp;<code>n</code>&nbsp;个元素有序的（升序）整型数组&nbsp;<code>nums</code> 和一个目标值&nbsp;<code>target</code> &nbsp;，写一个函数搜索&nbsp;<code>nums</code>&nbsp;中的 <code>target</code>，如果目标值存在返回下标，否则返回 <code>-1</code>。</p>\n\n<p><br>\n<strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> <code>nums</code> = [-1,0,3,5,9,12], <code>target</code> = 9\n<strong>输出:</strong> 4\n<strong>解释:</strong> 9 出现在 <code>nums</code> 中并且下标为 4\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> <code>nums</code> = [-1,0,3,5,9,12], <code>target</code> = 2\n<strong>输出:</strong> -1\n<strong>解释:</strong> 2 不存在 <code>nums</code> 中因此返回 -1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>你可以假设 <code>nums</code>&nbsp;中的所有元素是不重复的。</li>\n\t<li><code>n</code>&nbsp;将在&nbsp;<code>[1, 10000]</code>之间。</li>\n\t<li><code>nums</code>&nbsp;的每个元素都将在&nbsp;<code>[-9999, 9999]</code>之间。</li>\n</ol>\n","toeplitz-matrix":"<p>如果一个矩阵的每一方向由左上到右下的对角线上具有相同元素，那么这个矩阵是<em>托普利茨矩阵</em>。</p>\n\n<p>给定一个&nbsp;<code>M x N</code>&nbsp;的矩阵，当且仅当它是<em>托普利茨矩阵</em>时返回&nbsp;<code>True</code>。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> \nmatrix = [\n&nbsp; [1,2,3,4],\n&nbsp; [5,1,2,3],\n&nbsp; [9,5,1,2]\n]\n<strong>输出:</strong> True\n<strong>解释:</strong>\n在上述矩阵中, 其对角线为:\n&quot;[9]&quot;, &quot;[5, 5]&quot;, &quot;[1, 1, 1]&quot;, &quot;[2, 2, 2]&quot;, &quot;[3, 3]&quot;, &quot;[4]&quot;。\n各条对角线上的所有元素均相同, 因此答案是True。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong>\nmatrix = [\n&nbsp; [1,2],\n&nbsp; [2,2]\n]\n<strong>输出:</strong> False\n<strong>解释: \n</strong>对角线&quot;[1, 2]&quot;上的元素不同。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>&nbsp;<code>matrix</code>&nbsp;是一个包含整数的二维数组。</li>\n\t<li><code>matrix</code>&nbsp;的行数和列数均在&nbsp;<code>[1, 20]</code>范围内。</li>\n\t<li><code>matrix[i][j]</code>&nbsp;包含的整数在&nbsp;<code>[0, 99]</code>范围内。</li>\n</ol>\n\n<p><strong>进阶:</strong></p>\n\n<ol>\n\t<li>如果矩阵存储在磁盘上，并且磁盘内存是有限的，因此一次最多只能将一行矩阵加载到内存中，该怎么办？</li>\n\t<li>如果矩阵太大以至于只能一次将部分行加载到内存中，该怎么办？</li>\n</ol>\n","global-and-local-inversions":"<p>数组&nbsp;<code>A</code>&nbsp;是&nbsp;<code>[0, 1, ..., N - 1]</code>&nbsp;的一种排列，<code>N</code> 是数组&nbsp;<code>A</code>&nbsp;的长度。全局倒置指的是 <code>i,j</code>&nbsp;满足&nbsp;<code>0 &lt;= i &lt; j &lt; N</code> 并且&nbsp;<code>A[i] &gt; A[j]</code>&nbsp;，局部倒置指的是 <code>i</code> 满足&nbsp;<code>0 &lt;= i &lt; N</code>&nbsp;并且&nbsp;<code>A[i] &gt; A[i+1]</code>&nbsp;。</p>\n\n<p>当数组&nbsp;<code>A</code>&nbsp;中全局倒置的数量等于局部倒置的数量时，返回 <code>true</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> A = [1,0,2]\n<strong>输出:</strong> true\n<strong>解释:</strong> 有 1 个全局倒置，和 1 个局部倒置。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> A = [1,2,0]\n<strong>输出:</strong> false\n<strong>解释:</strong> 有 2 个全局倒置，和 1 个局部倒置。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>A</code> 是&nbsp;<code>[0, 1, ..., A.length - 1]</code>&nbsp;的一种排列</li>\n\t<li><code>A</code> 的长度在&nbsp;<code>[1, 5000]</code>之间</li>\n\t<li>这个问题的时间限制已经减少了。</li>\n</ul>\n","construct-quad-tree":"<p>我们想要使用一棵四叉树来储存一个&nbsp;<code>N x N</code> 的布尔值网络。网络中每一格的值只会是真或假。树的根结点代表整个网络。对于每个结点, 它将被分等成四个孩子结点<strong>直到这个区域内的值都是相同的.</strong></p>\n\n<p>每个结点还有另外两个布尔变量:&nbsp;<code>isLeaf</code> 和&nbsp;<code>val</code>。<code>isLeaf</code> 当这个节点是一个叶子结点时为真。<code>val</code>&nbsp;变量储存叶子结点所代表的区域的值。</p>\n\n<p>你的任务是使用一个四叉树表示给定的网络。下面的例子将有助于你理解这个问题：</p>\n\n<p>给定下面这个<code>8 x 8</code>&nbsp;网络，我们将这样建立一个对应的四叉树：</p>\n\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/01/962_grid.png\" style=\"height:27%; width:27%\" /></p>\n\n<p>由上文的定义，它能被这样分割：</p>\n\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/01/962_grid_divided.png\" style=\"height:100%; width:100%\" /></p>\n\n<p>&nbsp;</p>\n\n<p>对应的四叉树应该像下面这样，每个结点由一对&nbsp;<code>(isLeaf, val)</code>&nbsp;所代表.</p>\n\n<p>对于非叶子结点，<code>val</code>&nbsp;可以是任意的，所以使用&nbsp;<code>*</code>&nbsp;代替。</p>\n\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/01/962_quad_tree.png\" style=\"height:100%; width:100%\" /></p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>N</code>&nbsp;将小于&nbsp;<code>1000</code>&nbsp;且确保是 2 的整次幂。</li>\n\t<li>如果你想了解更多关于四叉树的知识，你可以参考这个&nbsp;<a href=\"https://en.wikipedia.org/wiki/Quadtree\">wiki</a>&nbsp;页面。</li>\n</ol>\n","max-chunks-to-make-sorted":"<p>数组<code>arr</code>是<code>[0, 1, ..., arr.length - 1]</code>的一种排列，我们将这个数组分割成几个&ldquo;块&rdquo;，并将这些块分别进行排序。之后再连接起来，使得连接的结果和按升序排序后的原数组相同。</p>\n\n<p>我们最多能将数组分成多少块？</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> arr = [4,3,2,1,0]\n<strong>输出:</strong> 1\n<strong>解释:</strong>\n将数组分成2块或者更多块，都无法得到所需的结果。\n例如，分成 [4, 3], [2, 1, 0] 的结果是 [3, 4, 0, 1, 2]，这不是有序的数组。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> arr = [1,0,2,3,4]\n<strong>输出:</strong> 4\n<strong>解释:</strong>\n我们可以把它分成两块，例如 [1, 0], [2, 3, 4]。\n然而，分成 [1, 0], [2], [3], [4] 可以得到最多的块数。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>arr</code> 的长度在 <code>[1, 10]</code> 之间。</li>\n\t<li><code>arr[i]</code>是 <code>[0, 1, ..., arr.length - 1]</code>的一种排列。</li>\n</ul>\n","contain-virus":"<p>病毒扩散得很快，现在你的任务是尽可能地通过安装防火墙来隔离病毒。</p>\n\n<p>假设世界由二维矩阵组成，<code>0</code> 表示该区域未感染病毒，而 <code>1</code> 表示该区域已感染病毒。可以在任意 2 个四方向相邻单元之间的共享边界上安装一个防火墙（并且只有一个防火墙）。</p>\n\n<p>每天晚上，病毒会从被感染区域向相邻未感染区域扩散，除非被防火墙隔离。现由于资源有限，每天你只能安装一系列防火墙来隔离其中一个被病毒感染的区域（一个区域或连续的一片区域），且该感染区域对未感染区域的威胁最大且保证唯一。</p>\n\n<p>你需要努力使得最后有部分区域不被病毒感染，如果可以成功，那么返回需要使用的防火墙个数; 如果无法实现，则返回在世界被病毒全部感染时已安装的防火墙个数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入:</strong> grid = \n[[0,1,0,0,0,0,0,1],\n [0,1,0,0,0,0,0,1],\n [0,0,0,0,0,0,0,1],\n [0,0,0,0,0,0,0,0]]\n<strong>输出:</strong> 10\n<strong>说明:</strong>\n一共有两块被病毒感染的区域: 从左往右第一块需要 5 个防火墙，同时若该区域不隔离，晚上将感染 5 个未感染区域（即被威胁的未感染区域个数为 5）;\n第二块需要 4 个防火墙，同理被威胁的未感染区域个数是 4。因此，第一天先隔离左边的感染区域，经过一晚后，病毒传播后世界如下:\n[[0,1,0,0,0,0,1,1],\n [0,1,0,0,0,0,1,1],\n [0,0,0,0,0,0,1,1],\n [0,0,0,0,0,0,0,1]]\n第二题，只剩下一块未隔离的被感染的连续区域，此时需要安装 5 个防火墙，且安装完毕后病毒隔离任务完成。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入:</strong> grid = \n[[1,1,1],\n [1,0,1],\n [1,1,1]]\n<strong>输出:</strong> 4\n<strong>说明:</strong> \n此时只需要安装 4 面防火墙，就有一小区域可以幸存，不被病毒感染。\n注意不需要在世界边界建立防火墙。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre><strong>输入:</strong> grid = \n[[1,1,1,0,0,0,0,0,0],\n [1,0,1,0,1,1,1,1,1],\n [1,1,1,0,0,0,0,0,0]]\n<strong>输出:</strong> 13\n<strong>说明:</strong> \n在隔离右边感染区域后，隔离左边病毒区域只需要 2 个防火墙了。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>1&le;&nbsp;<code>i</code>&nbsp;&le;50，1&le;&nbsp;<code>j</code>&nbsp;&le;50.</li>\n\t<li>&nbsp;<code>grid[i][j]</code>&nbsp;只包含&nbsp;<code>0</code>&nbsp;或&nbsp;<code>1</code>&nbsp;。</li>\n\t<li>题目保证每次选取感染区域进行隔离时，一定存在唯一一个对未感染区域的威胁最大的区域。</li>\n</ol>\n\n<p>&nbsp;</p>\n","jewels-and-stones":"<p>&nbsp;给定字符串<code>J</code>&nbsp;代表石头中宝石的类型，和字符串&nbsp;<code>S</code>代表你拥有的石头。&nbsp;<code>S</code>&nbsp;中每个字符代表了一种你拥有的石头的类型，你想知道你拥有的石头中有多少是宝石。</p>\n\n<p><code>J</code>&nbsp;中的字母不重复，<code>J</code>&nbsp;和&nbsp;<code>S</code>中的所有字符都是字母。字母区分大小写，因此<code>&quot;a&quot;</code>和<code>&quot;A&quot;</code>是不同类型的石头。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> J = &quot;aA&quot;, S = &quot;aAAbbbb&quot;\n<strong>输出:</strong> 3\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> J = &quot;z&quot;, S = &quot;ZZ&quot;\n<strong>输出:</strong> 0\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>S</code>&nbsp;和&nbsp;<code>J</code>&nbsp;最多含有50个字母。</li>\n\t<li>&nbsp;<code>J</code>&nbsp;中的字符不重复。</li>\n</ul>\n","quad-tree-intersection":"<p>四叉树是一种树数据，其中每个结点恰好有四个子结点：<code>topLeft</code>、<code>topRight</code>、<code>bottomLeft</code>&nbsp;和&nbsp;<code>bottomRight</code>。四叉树通常被用来划分一个二维空间，递归地将其细分为四个象限或区域。</p>\n\n<p>我们希望在四叉树中存储 True/False 信息。四叉树用来表示 <code>N * N</code> 的布尔网格。对于每个结点, 它将被等分成四个孩子结点<strong>直到这个区域内的值都是相同的</strong>。每个节点都有另外两个布尔属性：<code>isLeaf</code>&nbsp;和&nbsp;<code>isLeaf</code>。当这个节点是一个叶子结点时&nbsp;<code>isLeaf</code>&nbsp;为真。<code>val</code>&nbsp;变量储存叶子结点所代表的区域的值。</p>\n\n<p>例如，下面是两个四叉树 A 和 B：</p>\n\n<pre>A:\n+-------+-------+   T: true\n|       |       |   F: false\n|   T   |   T   |\n|       |       |\n+-------+-------+\n|       |       |\n|   F   |   F   |\n|       |       |\n+-------+-------+\ntopLeft: T\ntopRight: T\nbottomLeft: F\nbottomRight: F\n\nB:               \n+-------+---+---+\n|       | F | F |\n|   T   +---+---+\n|       | T | T |\n+-------+---+---+\n|       |       |\n|   T   |   F   |\n|       |       |\n+-------+-------+\ntopLeft: T\ntopRight:\n     topLeft: F\n     topRight: F\n     bottomLeft: T\n     bottomRight: T\nbottomLeft: T\nbottomRight: F\n</pre>\n\n<p>&nbsp;</p>\n\n<p>你的任务是实现一个函数，该函数根据两个四叉树返回表示这两个四叉树的逻辑或(或并)的四叉树。</p>\n\n<pre>A:                 B:                 C (A or B):\n+-------+-------+  +-------+---+---+  +-------+-------+\n|       |       |  |       | F | F |  |       |       |\n|   T   |   T   |  |   T   +---+---+  |   T   |   T   |\n|       |       |  |       | T | T |  |       |       |\n+-------+-------+  +-------+---+---+  +-------+-------+\n|       |       |  |       |       |  |       |       |\n|   F   |   F   |  |   T   |   F   |  |   T   |   F   |\n|       |       |  |       |       |  |       |       |\n+-------+-------+  +-------+-------+  +-------+-------+\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>A</code>&nbsp;和&nbsp;<code>B</code>&nbsp;都表示大小为&nbsp;<code>N * N</code>&nbsp;的网格。</li>\n\t<li><code>N</code>&nbsp;将确保是 2 的整次幂。</li>\n\t<li>如果你想了解更多关于四叉树的知识，你可以参考这个&nbsp;<a href=\"https://en.wikipedia.org/wiki/Quadtree\">wiki</a>&nbsp;页面。</li>\n\t<li>逻辑或的定义如下：如果&nbsp;<code>A 为 True</code> ，或者&nbsp;<code>B 为 True</code> ，或者&nbsp;<code>A 和 B 都为 True</code>，则 &quot;A 或 B&quot; 为 True。</li>\n</ol>\n","swim-in-rising-water":"<p>在一个 N x N 的坐标方格&nbsp;<code>grid</code> 中，每一个方格的值 <code>grid[i][j]</code> 表示在位置 <code>(i,j)</code> 的平台高度。</p>\n\n<p>现在开始下雨了。当时间为&nbsp;<code>t</code>&nbsp;时，此时雨水导致水池中任意位置的水位为&nbsp;<code>t</code>&nbsp;。你可以从一个平台游向四周相邻的任意一个平台，但是前提是此时水位必须同时淹没这两个平台。假定你可以瞬间移动无限距离，也就是默认在方格内部游动是不耗时的。当然，在你游泳的时候你必须待在坐标方格里面。</p>\n\n<p>你从坐标方格的左上平台 (0，0) 出发。最少耗时多久你才能到达坐标方格的右下平台&nbsp;<code>(N-1, N-1)</code>？</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [[0,2],[1,3]]\n<strong>输出:</strong> 3\n<strong>解释:</strong>\n时间为0时，你位于坐标方格的位置为 <code>(0, 0)。</code>\n此时你不能游向任意方向，因为四个相邻方向平台的高度都大于当前时间为 0 时的水位。\n\n等时间到达 3 时，你才可以游向平台 (1, 1). 因为此时的水位是 3，坐标方格中的平台没有比水位 3 更高的，所以你可以游向坐标方格中的任意位置\n</pre>\n\n<p><strong>示例2:</strong></p>\n\n<pre>\n<strong>输入:</strong> [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]\n<strong>输入:</strong> 16\n<strong>解释:</strong>\n<strong> 0  1  2  3  4</strong>\n24 23 22 21  <strong>5</strong>\n<strong>12 13 14 15 16</strong>\n<strong>11</strong> 17 18 19 20\n<strong>10  9  8  7  6</strong>\n\n最终的路线用加粗进行了标记。\n我们必须等到时间为 16，此时才能保证平台 (0, 0) 和 (4, 4) 是连通的\n</pre>\n\n<p><strong>提示:</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= N &lt;= 50</code>.</li>\n\t<li>grid[i][j] 位于区间 [0, ..., N*N - 1] 内。</li>\n</ol>\n","minimize-max-distance-to-gas-station":null,"k-th-symbol-in-grammar":"<p>在第一行我们写上一个 <code>0</code>。接下来的每一行，将前一行中的<code>0</code>替换为<code>01</code>，<code>1</code>替换为<code>10</code>。</p>\n\n<p>给定行数&nbsp;<code>N</code>&nbsp;和序数 <code>K</code>，返回第 <code>N</code> 行中第 <code>K</code>个字符。（<code>K</code>从1开始）</p>\n\n<p><br>\n<strong>例子:</strong></p>\n\n<pre><strong>输入:</strong> N = 1, K = 1\n<strong>输出:</strong> 0\n\n<strong>输入:</strong> N = 2, K = 1\n<strong>输出:</strong> 0\n\n<strong>输入:</strong> N = 2, K = 2\n<strong>输出:</strong> 1\n\n<strong>输入:</strong> N = 4, K = 5\n<strong>输出:</strong> 1\n\n<strong>解释:</strong>\n第一行: 0\n第二行: 01\n第三行: 0110\n第四行: 01101001\n</pre>\n\n<p><br>\n<strong>注意：</strong></p>\n\n<ol>\n\t<li><code>N</code>&nbsp;的范围&nbsp;<code>[1, 30]</code>.</li>\n\t<li><code>K</code>&nbsp;的范围&nbsp;<code>[1, 2^(N-1)]</code>.</li>\n</ol>\n","basic-calculator-iii":null,"basic-calculator-iv":"<p>给定一个表达式&nbsp;<code>expression</code>&nbsp;如&nbsp;<code>expression = &quot;e + 8 - a + 5&quot;</code>&nbsp;和一个求值映射，如&nbsp;<code>{&quot;e&quot;: 1}</code>（给定的形式为&nbsp;<code>evalvars = [&quot;e&quot;]</code> 和&nbsp;<code>evalints = [1]</code>），返回表示简化表达式的标记列表，例如 <code>[&quot;-1*a&quot;,&quot;14&quot;]</code></p>\n\n<ul>\n\t<li>表达式交替使用块和符号，每个块和符号之间有一个空格。</li>\n\t<li>块要么是括号中的表达式，要么是变量，要么是非负整数。</li>\n\t<li>块是括号中的表达式，变量或非负整数。</li>\n\t<li>变量是一个由小写字母组成的字符串（不包括数字）。请注意，变量可以是多个字母，并注意变量从不具有像&nbsp;<code>&quot;2x&quot;</code>&nbsp;或&nbsp;<code>&quot;-x&quot;</code>&nbsp;这样的前导系数或一元运算符&nbsp;。</li>\n</ul>\n\n<p>表达式按通常顺序进行求值：先是括号，然后求乘法，再计算加法和减法。例如，<code>expression = &quot;1 + 2 * 3&quot;</code>&nbsp;的答案是 <code>[&quot;7&quot;]</code>。</p>\n\n<p>输出格式如下：</p>\n\n<ul>\n\t<li>对于系数非零的每个自变量项，我们按字典排序的顺序将自变量写在一个项中。例如，我们永远不会写像 <code>&ldquo;b*a*c&rdquo;</code> 这样的项，只写 <code>&ldquo;a*b*c&rdquo;</code>。</li>\n\t<li>项的次数等于被乘的自变量的数目，并计算重复项。(例如，<code>&quot;a*a*b*c&quot;</code> 的次数为 4。)。我们先写出答案的最大次数项，用字典顺序打破关系，此时忽略词的前导系数。</li>\n\t<li>项的前导系数直接放在左边，用星号将它与变量分隔开(如果存在的话)。前导系数 1 仍然要打印出来。</li>\n\t<li>格式良好的一个示例答案是&nbsp;<code>[&quot;-2*a*a*a&quot;, &quot;3*a*a*b&quot;, &quot;3*b*b&quot;, &quot;4*a&quot;, &quot;5*c&quot;, &quot;-6&quot;]</code>&nbsp;。</li>\n\t<li>系数为 0 的项（包括常数项）不包括在内。例如，&ldquo;0&rdquo; 的表达式输出为 []。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>expression = &quot;e + 8 - a + 5&quot;, evalvars = [&quot;e&quot;], evalints = [1]\n<strong>输出：</strong>[&quot;-1*a&quot;,&quot;14&quot;]\n\n<strong>输入：</strong>expression = &quot;e - 8 + temperature - pressure&quot;,\nevalvars = [&quot;e&quot;, &quot;temperature&quot;], evalints = [1, 12]\n<strong>输出：</strong>[&quot;-1*pressure&quot;,&quot;5&quot;]\n\n<strong>输入：</strong>expression = &quot;(e + 8) * (e - 8)&quot;, evalvars = [], evalints = []\n<strong>输出：</strong>[&quot;1*e*e&quot;,&quot;-64&quot;]\n\n<strong>输入：</strong>expression = &quot;7 - 7&quot;, evalvars = [], evalints = []\n<strong>输出：</strong>[]\n\n<strong>输入：</strong>expression = &quot;a * b * c + b * a * c * 4&quot;, evalvars = [], evalints = []\n<strong>输出：</strong>[&quot;5*a*b*c&quot;]\n\n<strong>输入：</strong>expression = &quot;((a - b) * (b - c) + (c - a)) * ((a - b) + (b - c) * (c - a))&quot;,\nevalvars = [], evalints = []\n<strong>输出：</strong>[&quot;-1*a*a*b*b&quot;,&quot;2*a*a*b*c&quot;,&quot;-1*a*a*c*c&quot;,&quot;1*a*b*b*b&quot;,&quot;-1*a*b*b*c&quot;,&quot;-1*a*b*c*c&quot;,&quot;1*a*c*c*c&quot;,&quot;-1*b*b*b*c&quot;,&quot;2*b*b*c*c&quot;,&quot;-1*b*c*c*c&quot;,&quot;2*a*a*b&quot;,&quot;-2*a*a*c&quot;,&quot;-2*a*b*b&quot;,&quot;2*a*c*c&quot;,&quot;1*b*b*b&quot;,&quot;-1*b*b*c&quot;,&quot;1*b*c*c&quot;,&quot;-1*c*c*c&quot;,&quot;-1*a*a&quot;,&quot;1*a*b&quot;,&quot;1*a*c&quot;,&quot;-1*b*c&quot;]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>expression</code> 的长度在&nbsp;<code>[1, 250]</code>&nbsp;范围内。</li>\n\t<li><code>evalvars, evalints</code> 在范围&nbsp;<code>[0, 100]</code>&nbsp;内，且长度相同。</li>\n</ol>\n","maximum-depth-of-n-ary-tree":"<p>给定一个 N 叉树，找到其最大深度。</p>\r\n\r\n<p>最大深度是指从根节点到最远叶子节点的最长路径上的节点总数。</p>\r\n\r\n<p>例如，给定一个&nbsp;<code>3叉树</code>&nbsp;:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>我们应返回其最大深度，3。</p>\r\n\r\n<p><strong>说明:</strong></p>\r\n\r\n<ol>\r\n\t<li>树的深度不会超过&nbsp;<code>1000</code>。</li>\r\n\t<li>树的节点总不会超过&nbsp;<code>5000</code>。</li>\r\n</ol>","kth-largest-element-in-a-stream":"<p>设计一个找到数据流中第K大元素的类（class）。注意是排序后的第K大元素，不是第K个不同的元素。</p>\n\n<p>你的&nbsp;<code>KthLargest</code>&nbsp;类需要一个同时接收整数&nbsp;<code>k</code> 和整数数组<code>nums</code>&nbsp;的构造器，它包含数据流中的初始元素。每次调用&nbsp;<code>KthLargest.add</code>，返回当前数据流中第K大的元素。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\nint k = 3;\nint[] arr = [4,5,8,2];\nKthLargest kthLargest = new KthLargest(3, arr);\nkthLargest.add(3);&nbsp; &nbsp;// returns 4\nkthLargest.add(5);&nbsp; &nbsp;// returns 5\nkthLargest.add(10);&nbsp; // returns 5\nkthLargest.add(9);&nbsp; &nbsp;// returns 8\nkthLargest.add(4);&nbsp; &nbsp;// returns 8\n</pre>\n\n<p><strong>说明: </strong><br />\n你可以假设&nbsp;<code>nums</code>&nbsp;的长度&ge;&nbsp;<code>k-1</code>&nbsp;且<code>k</code> &ge;&nbsp;1。</p>\n","number-of-corner-rectangles":null,"max-chunks-to-make-sorted-ii":"<p><em>这个问题和&ldquo;最多能完成排序的块&rdquo;相似，但给定数组中的元素可以重复，输入数组最大长度为<code>2000</code>，其中的元素最大为<code>10**8</code>。</em></p>\n\n<p><code>arr</code>是一个可能包含<strong>重复元素</strong>的整数数组，我们将这个数组分割成几个&ldquo;块&rdquo;，并将这些块分别进行排序。之后再连接起来，使得连接的结果和按升序排序后的原数组相同。</p>\n\n<p>我们最多能将数组分成多少块？</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>\n<strong>输入:</strong> arr = [5,4,3,2,1]\n<strong>输出:</strong> 1\n<strong>解释:</strong>\n将数组分成2块或者更多块，都无法得到所需的结果。\n例如，分成 [5, 4], [3, 2, 1] 的结果是 [4, 5, 1, 2, 3]，这不是有序的数组。 \n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> arr = [2,1,3,4,4]\n<strong>输出:</strong> 4\n<strong>解释:</strong>\n我们可以把它分成两块，例如 [2, 1], [3, 4, 4]。\n然而，分成 [2, 1], [3], [4], [4] 可以得到最多的块数。 \n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>arr</code>的长度在<code>[1, 2000]</code>之间。</li>\n\t<li><code>arr[i]</code>的大小在<code>[0, 10**8]</code>之间。</li>\n</ul>\n","reorganize-string":"<p>给定一个字符串<code>S</code>，检查是否能重新排布其中的字母，使得两相邻的字符不同。</p>\n\n<p>若可行，输出任意可行的结果。若不可行，返回空字符串。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>\n<strong>输入:</strong> S = &quot;aab&quot;\n<strong>输出:</strong> &quot;aba&quot;\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> S = &quot;aaab&quot;\n<strong>输出:</strong> &quot;&quot;\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>S</code> 只包含小写字母并且长度在<code>[1, 500]</code>区间内。</li>\n</ul>\n","employee-free-time":null,"find-anagram-mappings":null,"largest-plus-sign":"<p>在一个大小在 (0, 0) 到 (N-1, N-1) 的2D网格&nbsp;<code>grid</code>&nbsp;中，除了在&nbsp;<code>mines</code>&nbsp;中给出的单元为&nbsp;<code>0</code>，其他每个单元都是&nbsp;<code>1</code>。网格中包含&nbsp;<code>1</code>&nbsp;的最大的轴对齐加号标志是多少阶？返回加号标志的阶数。如果未找到加号标志，则返回 0。</p>\n\n<p>一个&nbsp;<strong>k</strong>&quot; 阶由&nbsp;<em><code>1</code></em>&nbsp;组成的&ldquo;轴对称&rdquo;加号标志具有中心网格&nbsp;&nbsp;<code>grid[x][y] = 1</code>&nbsp;，以及4个从中心向上、向下、向左、向右延伸，长度为&nbsp;<code>k-1</code>，由&nbsp;<code>1</code>&nbsp;组成的臂。下面给出&nbsp;<strong>k</strong>&quot; 阶&ldquo;轴对称&rdquo;加号标志的示例。注意，只有加号标志的所有网格要求为 1，别的网格可能为 0 也可能为 1。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>k 阶轴对称加号标志示例:</strong></p>\n\n<pre>\n阶 1:\n000\n0<strong>1</strong>0\n000\n\n阶 2:\n00000\n00<strong>1</strong>00\n0<strong>111</strong>0\n00<strong>1</strong>00\n00000\n\n阶 3:\n0000000\n000<strong>1</strong>000\n000<strong>1</strong>000\n0<strong>11111</strong>0\n000<strong>1</strong>000\n000<strong>1</strong>000\n0000000\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入:</strong> N = 5, mines = [[4, 2]]\n<strong>输出:</strong> 2\n<strong>解释:\n</strong>\n11111\n11111\n1<em><strong>1</strong></em>111\n<em><strong>111</strong></em>11\n1<em><strong>1</strong></em>011\n\n在上面的网格中，最大加号标志的阶只能是2。一个标志已在图中标出。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入:</strong> N = 2, mines = []\n<strong>输出:</strong> 1\n<strong>解释:\n\n11\n11\n</strong>\n没有 2 阶加号标志，有 1 阶加号标志。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入:</strong> N = 1, mines = [[0, 0]]\n<strong>输出:</strong> 0\n<strong>解释:\n\n0\n</strong>\n没有加号标志，返回 0 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>整数<code>N</code> 的范围：&nbsp;<code>[1, 500]</code>.</li>\n\t<li><code>mines</code> 的最大长度为&nbsp;<code>5000</code>.</li>\n\t<li><code>mines[i]</code> 是长度为2的由2个&nbsp;<code>[0, N-1]</code>&nbsp;中的数组成.</li>\n\t<li><em>(另外,使用 C, C++, 或者&nbsp;C# 编程将以稍小的时间限制进行​​判断.)</em></li>\n</ol>\n\n<p>&nbsp;</p>\n","n-ary-tree-postorder-traversal":"<p>给定一个 N 叉树，返回其节点值的<em>后序遍历</em>。</p>\r\n\r\n<p>例如，给定一个&nbsp;<code>3叉树</code>&nbsp;:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>返回其后序遍历: <code>[5,6,3,2,4,1]</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>说明:</strong>&nbsp;递归法很简单，你可以使用迭代法完成此题吗?</p>","min-cost-climbing-stairs":"<p>数组的每个索引做为一个阶梯，第&nbsp;<code>i</code>个阶梯对应着一个非负数的体力花费值&nbsp;<code>cost[i]</code>(索引从0开始)。</p>\n\n<p>每当你爬上一个阶梯你都要花费对应的体力花费值，然后你可以选择继续爬一个阶梯或者爬两个阶梯。</p>\n\n<p>您需要找到达到楼层顶部的最低花费。在开始时，你可以选择从索引为 0 或 1 的元素作为初始阶梯。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>\n<strong>输入:</strong> cost = [10, 15, 20]\n<strong>输出:</strong> 15\n<strong>解释:</strong> 最低花费是从cost[1]开始，然后走两步即可到阶梯顶，一共花费15。\n</pre>\n\n<p><strong>&nbsp;示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]\n<strong>输出:</strong> 6\n<strong>解释:</strong> 最低花费方式是从cost[0]开始，逐个经过那些1，跳过cost[3]，一共花费6。\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li><code>cost</code>&nbsp;的长度将会在&nbsp;<code>[2, 1000]</code>。</li>\n\t<li>每一个&nbsp;<code>cost[i]</code> 将会是一个Integer类型，范围为&nbsp;<code>[0, 999]</code>。</li>\n</ol>\n","pour-water":null,"insert-into-a-binary-search-tree":"<p>给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 保证原始二叉搜索树中不存在新值。</p>\n\n<p>注意，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回任意有效的结果。</p>\n\n<p>例如,&nbsp;</p>\n\n<pre>\n给定二叉搜索树:\n\n        4\n       / \\\n      2   7\n     / \\\n    1   3\n\n和 插入的值: 5\n</pre>\n\n<p>你可以返回这个二叉搜索树:</p>\n\n<pre>\n         4\n       /   \\\n      2     7\n     / \\   /\n    1   3 5\n</pre>\n\n<p>或者这个树也是有效的:</p>\n\n<pre>\n         5\n       /   \\\n      2     7\n     / \\   \n    1   3\n         \\\n          4\n</pre>\n","prime-number-of-set-bits-in-binary-representation":"<p>给定两个整数&nbsp;<code>L</code>&nbsp;和&nbsp;<code>R</code>&nbsp;，找到闭区间&nbsp;<code>[L, R]</code>&nbsp;范围内，计算置位位数为质数的整数个数。</p>\n\n<p>（注意，计算置位代表二进制表示中1的个数。例如&nbsp;<code>21</code>&nbsp;的二进制表示&nbsp;<code>10101</code>&nbsp;有 3 个计算置位。还有，1 不是质数。）</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> L = 6, R = 10\n<strong>输出:</strong> 4\n<strong>解释:</strong>\n6 -&gt; 110 (2 个计算置位，2 是质数)\n7 -&gt; 111 (3 个计算置位，3 是质数)\n9 -&gt; 1001 (2 个计算置位，2 是质数)\n10-&gt; 1010 (2 个计算置位，2 是质数)\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> L = 10, R = 15\n<strong>输出:</strong> 5\n<strong>解释:</strong>\n10 -&gt; 1010 (2 个计算置位, 2 是质数)\n11 -&gt; 1011 (3 个计算置位, 3 是质数)\n12 -&gt; 1100 (2 个计算置位, 2 是质数)\n13 -&gt; 1101 (3 个计算置位, 3 是质数)\n14 -&gt; 1110 (3 个计算置位, 3 是质数)\n15 -&gt; 1111 (4 个计算置位, 4 不是质数)\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li><code>L, R</code>&nbsp;是&nbsp;<code>L &lt;= R</code>&nbsp;且在&nbsp;<code>[1, 10^6]</code>&nbsp;中的整数。</li>\n\t<li><code>R - L</code>&nbsp;的最大值为 10000。</li>\n</ol>\n","cracking-the-safe":"<p>有一个需要密码才能打开的保险箱。密码是&nbsp;<code>n</code> 位数, 密码的每一位是&nbsp;<code>k</code>&nbsp;位序列&nbsp;<code>0, 1, ..., k-1</code>&nbsp;中的一个 。</p>\n\n<p>你可以随意输入密码，保险箱会自动记住最后&nbsp;<code>n</code>&nbsp;位输入，如果匹配，则能够打开保险箱。</p>\n\n<p>举个例子，假设密码是&nbsp;<code>&quot;345&quot;</code>，你可以输入&nbsp;<code>&quot;012345&quot;</code>&nbsp;来打开它，只是你输入了 6&nbsp;个字符.</p>\n\n<p>请返回一个能打开保险箱的最短字符串。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例1:</strong></p>\n\n<pre><strong>输入:</strong> n = 1, k = 2\n<strong>输出:</strong> &quot;01&quot;\n<strong>说明:</strong> &quot;10&quot;也可以打开保险箱。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例2:</strong></p>\n\n<pre><strong>输入:</strong> n = 2, k = 2\n<strong>输出:</strong> &quot;00110&quot;\n<strong>说明: </strong>&quot;01100&quot;, &quot;10011&quot;, &quot;11001&quot; 也能打开保险箱。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>n</code> 的范围是&nbsp;<code>[1, 4]</code>。</li>\n\t<li><code>k</code> 的范围是&nbsp;<code>[1, 10]</code>。</li>\n\t<li><code>k^n</code> 最大可能为&nbsp;<code>4096</code>。</li>\n</ol>\n\n<p>&nbsp;</p>\n","n-ary-tree-level-order-traversal":"<p>给定一个 N 叉树，返回其节点值的<em>层序遍历</em>。 (即从左到右，逐层遍历)。</p>\r\n\r\n<p>例如，给定一个&nbsp;<code>3叉树</code>&nbsp;:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>返回其层序遍历:</p>\r\n\r\n<pre>[\r\n     [1],\r\n     [3,2,4],\r\n     [5,6]\r\n]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>说明:</strong></p>\r\n\r\n<ol>\r\n\t<li>树的深度不会超过&nbsp;<code>1000</code>。</li>\r\n\t<li>树的节点总数不会超过&nbsp;<code>5000</code>。</li>\r\n</ol>","bold-words-in-string":null,"reach-a-number":"<p>在一根无限长的数轴上，你站在<code>0</code>的位置。终点在<code>target</code>的位置。</p>\n\n<p>每次你可以选择向左或向右移动。第 n 次移动（从 1 开始），可以走 n 步。</p>\n\n<p>返回到达终点需要的最小移动次数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> target = 3\n<strong>输出:</strong> 2\n<strong>解释:</strong>\n第一次移动，从 0 到 1 。\n第二次移动，从 1 到 3 。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> target = 2\n<strong>输出:</strong> 3\n<strong>解释:</strong>\n第一次移动，从 0 到 1 。\n第二次移动，从 1 到 -1 。\n第三次移动，从 -1 到 2 。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>target</code>是在<code>[-10^9, 10^9]</code>范围中的非零整数。</li>\n</ul>\n","reaching-points":"<p>从点&nbsp;<code>(x, y)</code>&nbsp;可以<strong>转换</strong>到&nbsp;<code>(x, x+y)</code>&nbsp; 或者&nbsp;<code>(x+y, y)</code>。</p>\n\n<p>给定一个起点&nbsp;<code>(sx, sy)</code>&nbsp;和一个终点&nbsp;<code>(tx, ty)</code>，如果通过一系列的<strong>转换</strong>可以从起点到达终点，则返回 <code>True&nbsp;</code>，否则返回&nbsp;<code>False</code>。</p>\n\n<pre>\n<strong>示例:</strong>\n<strong>输入:</strong> sx = 1, sy = 1, tx = 3, ty = 5\n<strong>输出:</strong> True\n<strong>解释:\n</strong>可以通过以下一系列<strong>转换</strong>从起点转换到终点：\n(1, 1) -&gt; (1, 2)\n(1, 2) -&gt; (3, 2)\n(3, 2) -&gt; (3, 5)\n\n<strong>输入:</strong> sx = 1, sy = 1, tx = 2, ty = 2\n<strong>输出:</strong> False\n\n<strong>输入:</strong> sx = 1, sy = 1, tx = 1, ty = 1\n<strong>输出:</strong> True\n\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>sx, sy, tx, ty</code>&nbsp;是范围在&nbsp;<code>[1, 10^9]</code>&nbsp;的整数。</li>\n</ul>\n","set-intersection-size-at-least-two":"<p>一个整数区间&nbsp;<code>[a, b]</code>&nbsp;&nbsp;(&nbsp;<code>a &lt; b</code>&nbsp;) 代表着从&nbsp;<code>a</code>&nbsp;到&nbsp;<code>b</code>&nbsp;的所有连续整数，包括&nbsp;<code>a</code>&nbsp;和&nbsp;<code>b</code>。</p>\n\n<p>给你一组整数区间<code>intervals</code>，请找到一个最小的集合 S，使得 S 里的元素与区间<code>intervals</code>中的每一个整数区间都至少有2个元素相交。</p>\n\n<p>输出这个最小集合S的大小。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> intervals = [[1, 3], [1, 4], [2, 5], [3, 5]]\n<strong>输出:</strong> 3\n<strong>解释:</strong>\n考虑集合 S = {2, 3, 4}. S与intervals中的四个区间都有至少2个相交的元素。\n且这是S最小的情况，故我们输出3。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> intervals = [[1, 2], [2, 3], [2, 4], [4, 5]]\n<strong>输出:</strong> 5\n<strong>解释:</strong>\n最小的集合S = {1, 2, 3, 4, 5}.\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li><code>intervals</code>&nbsp;的长度范围为<code>[1, 3000]</code>。</li>\n\t<li><code>intervals[i]</code>&nbsp;长度为&nbsp;<code>2</code>，分别代表左、右边界。</li>\n\t<li><code>intervals[i][j]</code> 的值是&nbsp;<code>[0, 10^8]</code>范围内的整数。</li>\n</ol>\n","search-in-a-binary-search-tree":"<p>给定二叉搜索树（BST）的根节点和一个值。 你需要在BST中找到节点值等于给定值的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 NULL。</p>\n\n<p>例如，</p>\n\n<pre>\n给定二叉搜索树:\n\n        4\n       / \\\n      2   7\n     / \\\n    1   3\n\n和值: 2\n</pre>\n\n<p>你应该返回如下子树:</p>\n\n<pre>\n      2     \n     / \\   \n    1   3\n</pre>\n\n<p>在上述示例中，如果要找的值是 <code>5</code>，但因为没有节点值为 <code>5</code>，我们应该返回 <code>NULL</code>。</p>\n","couples-holding-hands":"<p>N 对情侣坐在连续排列的 2N 个座位上，想要牵到对方的手。 计算最少交换座位的次数，以便每对情侣可以并肩坐在一起。 <em>一</em>次交换可选择任意两人，让他们站起来交换座位。</p>\n\n<p>人和座位用&nbsp;<code>0</code>&nbsp;到&nbsp;<code>2N-1</code>&nbsp;的整数表示，情侣们按顺序编号，第一对是&nbsp;<code>(0, 1)</code>，第二对是&nbsp;<code>(2, 3)</code>，以此类推，最后一对是&nbsp;<code>(2N-2, 2N-1)</code>。</p>\n\n<p>这些情侣的初始座位&nbsp;&nbsp;<code>row[i]</code>&nbsp;是由最初始坐在第 i 个座位上的人决定的。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> row = [0, 2, 1, 3]\n<strong>输出:</strong> 1\n<strong>解释:</strong> 我们只需要交换row[1]和row[2]的位置即可。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> row = [3, 2, 0, 1]\n<strong>输出:</strong> 0\n<strong>解释:</strong> 无需交换座位，所有的情侣都已经可以手牵手了。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li><code>len(row)</code> 是偶数且数值在&nbsp;<code>[4, 60]</code>范围内。</li>\n\t<li>可以保证<code>row</code> 是序列&nbsp;<code>0...len(row)-1</code>&nbsp;的一个全排列。</li>\n</ol>\n","encode-n-ary-tree-to-binary-tree":null,"convert-binary-search-tree-to-sorted-doubly-linked-list":null,"flatten-a-multilevel-doubly-linked-list":"<p>您将获得一个双向链表，除了下一个和前一个指针之外，它还有一个子指针，可能指向单独的双向链表。这些子列表可能有一个或多个自己的子项，依此类推，生成多级数据结构，如下面的示例所示。</p>\n\n<p>扁平化列表，使所有结点出现在单级双链表中。您将获得列表第一级的头部。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong>\n 1---2---3---4---5---6--NULL\n         |\n         7---8---9---10--NULL\n             |\n             11--12--NULL\n\n<strong>输出:</strong>\n1-2-3-7-8-11-12-9-10-4-5-6-NULL\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>以上示例的说明:</strong></p>\n\n<p>给出以下多级双向链表:</p>\n\n<pre><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/multilevellinkedlist.png\" style=\"width: 640px;\"></pre>\n\n<p>&nbsp;</p>\n\n<p>我们应该返回如下所示的扁平双向链表:</p>\n\n<pre><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/multilevellinkedlistflattened.png\" style=\"width: 1100px;\"></pre>\n","shortest-completing-word":"<p>如果单词列表（<code>words</code>）中的一个单词包含牌照（<code>licensePlate</code>）中所有的字母，那么我们称之为完整词。在所有完整词中，最短的单词我们称之为最短完整词。</p>\n\n<p>单词在匹配牌照中的字母时不区分大小写，比如牌照中的&nbsp;<code>&quot;P&quot;</code>&nbsp;依然可以匹配单词中的&nbsp;<code>&quot;p&quot;</code>&nbsp;字母。</p>\n\n<p>我们保证一定存在一个最短完整词。当有多个单词都符合最短完整词的匹配条件时取单词列表中最靠前的一个。</p>\n\n<p>牌照中可能包含多个相同的字符，比如说：对于牌照 <code>&quot;PP&quot;</code>，单词&nbsp;<code>&quot;pair&quot;</code>&nbsp;无法匹配，但是&nbsp;<code>&quot;supper&quot;</code>&nbsp;可以匹配。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>licensePlate = &quot;1s3 PSt&quot;, words = [&quot;step&quot;, &quot;steps&quot;, &quot;stripe&quot;, &quot;stepple&quot;]\n<strong>输出：</strong>&quot;steps&quot;\n<strong>说明：</strong>最短完整词应该包括 &quot;s&quot;、&quot;p&quot;、&quot;s&quot; 以及 &quot;t&quot;。对于 &quot;step&quot; 它只包含一个 &quot;s&quot; 所以它不符合条件。同时在匹配过程中我们忽略牌照中的大小写。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>licensePlate = &quot;1s3 456&quot;, words = [&quot;looks&quot;, &quot;pest&quot;, &quot;stew&quot;, &quot;show&quot;]\n<strong>输出：</strong>&quot;pest&quot;\n<strong>说明：</strong>有三个单词都符合完整词的定义，但是我们返回最先出现的单词。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>牌照<code>（licensePlate）</code>的长度在区域<code>[1, 7]</code>中。</li>\n\t<li>牌照<code>（licensePlate）</code>将会包含数字、空格、或者字母（大写和小写）。</li>\n\t<li>单词列表<code>（words）</code>长度在区间&nbsp;<code>[10, 1000]</code>&nbsp;中。</li>\n\t<li>每一个单词&nbsp;<code>words[i]</code>&nbsp;都是小写，并且长度在区间&nbsp;<code>[1, 15]</code>&nbsp;中。</li>\n</ol>\n\n<p>&nbsp;</p>\n","ip-to-cidr":null,"pyramid-transition-matrix":"<p>现在，我们用一些方块来堆砌一个金字塔。 每个方块用仅包含一个字母的字符串表示，例如 &ldquo;Z&rdquo;。</p>\n\n<p>使用三元组表示金字塔的堆砌规则如下：</p>\n\n<p>(A, B, C) 表示，&ldquo;C&rdquo;为顶层方块，方块&ldquo;A&rdquo;、&ldquo;B&rdquo;分别作为方块&ldquo;C&rdquo;下一层的的左、右子块。当且仅当(A, B, C)是被允许的三元组，我们才可以将其堆砌上。</p>\n\n<p>初始时，给定金字塔的基层&nbsp;<code>bottom</code>，用一个字符串表示。一个允许的三元组列表&nbsp;<code>allowed</code>，每个三元组用一个长度为 3 的字符串表示。</p>\n\n<p>如果可以由基层一直堆到塔尖返回true，否则返回false。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> bottom = &quot;XYZ&quot;, allowed = [&quot;XYD&quot;, &quot;YZE&quot;, &quot;DEA&quot;, &quot;FFF&quot;]\n<strong>输出:</strong> true\n<strong>解析:</strong>\n可以堆砌成这样的金字塔:\n    A\n   / \\\n  D   E\n / \\ / \\\nX   Y   Z\n\n因为符合(&#39;X&#39;, &#39;Y&#39;, &#39;D&#39;), (&#39;Y&#39;, &#39;Z&#39;, &#39;E&#39;) 和 (&#39;D&#39;, &#39;E&#39;, &#39;A&#39;) 三种规则。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> bottom = &quot;XXYX&quot;, allowed = [&quot;XXX&quot;, &quot;XXY&quot;, &quot;XYX&quot;, &quot;XYY&quot;, &quot;YXZ&quot;]\n<strong>输出:</strong> false\n<strong>解析:</strong>\n无法一直堆到塔尖。\n注意, 允许存在三元组(A, B, C)和 (A, B, D) ，其中 C != D.\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li><code>bottom</code> 的长度范围在&nbsp;<code>[2, 8]</code>。</li>\n\t<li><code>allowed</code> 的长度范围在<code>[0, 200]</code>。</li>\n\t<li>方块的标记字母范围为<code>{&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;, &#39;G&#39;}</code>。</li>\n</ol>\n","largest-number-at-least-twice-of-others":"<p>在一个给定的数组<code>nums</code>中，总是存在一个最大元素 。</p>\n\n<p>查找数组中的最大元素是否至少是数组中每个其他数字的两倍。</p>\n\n<p>如果是，则返回最大元素的索引，否则返回-1。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> nums = [3, 6, 1, 0]\n<strong>输出:</strong> 1\n<strong>解释:</strong> 6是最大的整数, 对于数组中的其他整数,\n6大于数组中其他元素的两倍。6的索引是1, 所以我们返回1.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> nums = [1, 2, 3, 4]\n<strong>输出:</strong> -1\n<strong>解释:</strong> 4没有超过3的两倍大, 所以我们返回 -1.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示:</strong></p>\n\n<ol>\n\t<li><code>nums</code>&nbsp;的长度范围在<code>[1, 50]</code>.</li>\n\t<li>每个&nbsp;<code>nums[i]</code>&nbsp;的整数范围在&nbsp;<code>[0, 99]</code>.</li>\n</ol>\n","open-the-lock":"<p>你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： <code>&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;</code> 。每个拨轮可以自由旋转：例如把 <code>&#39;9&#39;</code> 变为&nbsp; <code>&#39;0&#39;</code><font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\"><span style=\"background-color:#ffffff; font-size:14px\">，</span></font><code>&#39;0&#39;</code> 变为 <code>&#39;9&#39;</code> 。每次旋转都只能旋转一个拨轮的一位数字。</p>\n\n<p>锁的初始数字为 <code>&#39;0000&#39;</code> ，一个代表四个拨轮的数字的字符串。</p>\n\n<p>列表 <code>deadends</code> 包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。</p>\n\n<p>字符串 <code>target</code> 代表可以解锁的数字，你需要给出最小的旋转次数，如果无论如何不能解锁，返回 -1。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入：</strong>deadends = [&quot;0201&quot;,&quot;0101&quot;,&quot;0102&quot;,&quot;1212&quot;,&quot;2002&quot;], target = &quot;0202&quot;\n<strong>输出：</strong>6\n<strong>解释：</strong>\n可能的移动序列为 &quot;0000&quot; -&gt; &quot;1000&quot; -&gt; &quot;1100&quot; -&gt; &quot;1200&quot; -&gt; &quot;1201&quot; -&gt; &quot;1202&quot; -&gt; &quot;0202&quot;。\n注意 &quot;0000&quot; -&gt; &quot;0001&quot; -&gt; &quot;0002&quot; -&gt; &quot;0102&quot; -&gt; &quot;0202&quot; 这样的序列是不能解锁的，\n因为当拨动到 &quot;0102&quot; 时这个锁就会被锁定。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> deadends = [&quot;8888&quot;], target = &quot;0009&quot;\n<strong>输出：</strong>1\n<strong>解释：</strong>\n把最后一位反向旋转一次即可 &quot;0000&quot; -&gt; &quot;0009&quot;。\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong> deadends = [&quot;8887&quot;,&quot;8889&quot;,&quot;8878&quot;,&quot;8898&quot;,&quot;8788&quot;,&quot;8988&quot;,&quot;7888&quot;,&quot;9888&quot;], target = &quot;8888&quot;\n<strong>输出：</strong>-1\n<strong>解释：\n</strong>无法旋转到目标数字且不被锁定。\n</pre>\n\n<p><strong>示例 4:</strong></p>\n\n<pre>\n<strong>输入:</strong> deadends = [&quot;0000&quot;], target = &quot;8888&quot;\n<strong>输出：</strong>-1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>死亡列表 <code>deadends</code> 的长度范围为 <code>[1, 500]</code>。</li>\n\t<li>目标数字 <code>target</code> 不会在 <code>deadends</code> 之中。</li>\n\t<li>每个 <code>deadends</code> 和 <code>target</code> 中的字符串的数字会在 10,000 个可能的情况 <code>&#39;0000&#39;</code> 到 <code>&#39;9999&#39;</code> 中产生。</li>\n</ol>\n","special-binary-string":"<p>特殊的二进制序列是具有以下两个性质的二进制序列：</p>\n\n<ul>\n\t<li>0 的数量与 1 的数量相等。</li>\n\t<li>二进制序列的每一个前缀码中 1 的数量要大于等于 0 的数量。</li>\n</ul>\n\n<p>给定一个特殊的二进制序列&nbsp;<code>S</code>，以字符串形式表示。定义一个<em>操作 </em>为首先选择&nbsp;<code>S</code>&nbsp;的两个连续且非空的特殊的子串，然后将它们交换。（两个子串为连续的当且仅当第一个子串的最后一个字符恰好为第二个子串的第一个字符的前一个字符。)</p>\n\n<p>在任意次数的操作之后，交换后的字符串按照字典序排列的最大的结果是什么？</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> S = &quot;11011000&quot;\n<strong>输出:</strong> &quot;11100100&quot;\n<strong>解释:</strong>\n将子串 &quot;10&quot; （在S[1]出现） 和 &quot;1100&quot; （在S[3]出现）进行交换。\n这是在进行若干次操作后按字典序排列最大的结果。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li><code>S</code>&nbsp;的长度不超过&nbsp;<code>50</code>。</li>\n\t<li><code>S</code>&nbsp;保证为一个满足上述定义的<em>特殊 </em>的二进制序列。</li>\n</ol>\n","partition-labels":"<p>字符串 <code>S</code> 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一个字母只会出现在其中的一个片段。返回一个表示每个字符串片段的长度的列表。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> S = &quot;ababcbacadefegdehijhklij&quot;\n<strong>输出:</strong> [9,7,8]\n<strong>解释:</strong>\n划分结果为 &quot;ababcbaca&quot;, &quot;defegde&quot;, &quot;hijhklij&quot;。\n每个字母最多出现在一个片段中。\n像 &quot;ababcbacadefegde&quot;, &quot;hijhklij&quot; 的划分是错误的，因为划分的片段数较少。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li><code>S</code>的长度在<code>[1, 500]</code>之间。</li>\n\t<li><code>S</code>只包含小写字母<code>&#39;a&#39;</code>到<code>&#39;z&#39;</code>。</li>\n</ol>\n","candy-crush":null,"asteroid-collision":"<p>给定一个整数数组 <code>asteroids</code>，表示在同一行的行星。</p>\n\n<p>对于数组中的每一个元素，其绝对值表示行星的大小，正负表示行星的移动方向（正表示向右移动，负表示向左移动）。每一颗行星以相同的速度移动。</p>\n\n<p>找出碰撞后剩下的所有行星。碰撞规则：两个行星相互碰撞，较小的行星会爆炸。如果两颗行星大小相同，则两颗行星都会爆炸。两颗移动方向相同的行星，永远不会发生碰撞。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> \nasteroids = [5, 10, -5]\n<strong>输出:</strong> [5, 10]\n<strong>解释:</strong> \n10 和 -5 碰撞后只剩下 10。 5 和 10 永远不会发生碰撞。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> \nasteroids = [8, -8]\n<strong>输出:</strong> []\n<strong>解释:</strong> \n8 和 -8 碰撞后，两者都发生爆炸。\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong> \nasteroids = [10, 2, -5]\n<strong>输出:</strong> [10]\n<strong>解释:</strong> \n2 和 -5 发生碰撞后剩下 -5。10 和 -5 发生碰撞后剩下 10。\n</pre>\n\n<p><strong>示例 4:</strong></p>\n\n<pre>\n<strong>输入:</strong> \nasteroids = [-2, -1, 1, 2]\n<strong>输出:</strong> [-2, -1, 1, 2]\n<strong>解释:</strong> \n-2 和 -1 向左移动，而 1 和 2 向右移动。\n由于移动方向相同的行星不会发生碰撞，所以最终没有行星发生碰撞。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>数组&nbsp;<code>asteroids</code> 的长度不超过&nbsp;<code>10000</code>。</li>\n\t<li>每一颗行星的大小都是非零整数，范围是&nbsp;<code>[-1000, 1000]</code>&nbsp;。</li>\n</ul>\n","best-time-to-buy-and-sell-stock-with-transaction-fee":"<p>给定一个整数数组&nbsp;<code>prices</code>，其中第&nbsp;<code>i</code>&nbsp;个元素代表了第&nbsp;<code>i</code>&nbsp;天的股票价格 ；非负整数&nbsp;<code>fee</code> 代表了交易股票的手续费用。</p>\n\n<p>你可以无限次地完成交易，但是你每次交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。</p>\n\n<p>返回获得利润的最大值。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> prices = [1, 3, 2, 8, 4, 9], fee = 2\n<strong>输出:</strong> 8\n<strong>解释:</strong> 能够达到的最大利润:  \n在此处买入&nbsp;prices[0] = 1\n在此处卖出 prices[3] = 8\n在此处买入 prices[4] = 4\n在此处卖出 prices[5] = 9\n总利润:&nbsp;((8 - 1) - 2) + ((9 - 4) - 2) = 8.</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>0 &lt; prices.length &lt;= 50000</code>.</li>\n\t<li><code>0 &lt; prices[i] &lt; 50000</code>.</li>\n\t<li><code>0 &lt;= fee &lt; 50000</code>.</li>\n</ul>\n","split-linked-list-in-parts":"<p>给定一个头结点为 <code>root</code> 的链表, 编写一个函数以将链表分隔为 <code>k</code> 个连续的部分。</p>\n\n<p>每部分的长度应该尽可能的相等: 任意两部分的长度差距不能超过 1，也就是说可能有些部分为 null。</p>\n\n<p>这k个部分应该按照在链表中出现的顺序进行输出，并且排在前面的部分的长度应该大于或等于后面的长度。</p>\n\n<p>返回一个符合上述规则的链表的列表。</p>\n\n<p>举例： 1-&gt;2-&gt;3-&gt;4, k = 5 // 5 结果 [ [1], [2], [3], [4], null ]</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入:</strong> \nroot = [1, 2, 3], k = 5\n<strong>输出:</strong> [[1],[2],[3],[],[]]\n<strong>解释:</strong>\n输入输出各部分都应该是链表，而不是数组。\n例如, 输入的结点 root 的 val= 1, root.next.val = 2, \\root.next.next.val = 3, 且 root.next.next.next = null。\n第一个输出 output[0] 是 output[0].val = 1, output[0].next = null。\n最后一个元素 output[4] 为 null, 它代表了最后一个部分为空链表。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入:</strong> \nroot = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3\n<strong>输出:</strong> [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]\n<strong>解释:</strong>\n输入被分成了几个连续的部分，并且每部分的长度相差不超过1.前面部分的长度大于等于后面部分的长度。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li><code>root</code> 的长度范围：&nbsp;<code>[0, 1000]</code>.</li>\n\t<li>输入的每个节点的大小范围：<code>[0, 999]</code>.</li>\n\t<li><code>k</code>&nbsp;的取值范围：&nbsp;<code>[1, 50]</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n","monotone-increasing-digits":"<p>给定一个非负整数&nbsp;<code>N</code>，找出小于或等于&nbsp;<code>N</code>&nbsp;的最大的整数，同时这个整数需要满足其各个位数上的数字是单调递增。</p>\n\n<p>（当且仅当每个相邻位数上的数字&nbsp;<code>x</code>&nbsp;和&nbsp;<code>y</code>&nbsp;满足&nbsp;<code>x &lt;= y</code>&nbsp;时，我们称这个整数是单调递增的。）</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> N = 10\n<strong>输出:</strong> 9\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> N = 1234\n<strong>输出:</strong> 1234\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> N = 332\n<strong>输出:</strong> 299\n</pre>\n\n<p><strong>说明:</strong> <code>N</code>&nbsp;是在&nbsp;<code>[0, 10^9]</code>&nbsp;范围内的一个整数。</p>\n","network-delay-time":"<p>有&nbsp;<code>N</code>&nbsp;个网络节点，标记为&nbsp;<code>1</code>&nbsp;到&nbsp;<code>N</code>。</p>\n\n<p>给定一个列表&nbsp;<code>times</code>，表示信号经过<strong>有向</strong>边的传递时间。&nbsp;<code>times[i] = (u, v, w)</code>，其中&nbsp;<code>u</code>&nbsp;是源节点，<code>v</code>&nbsp;是目标节点， <code>w</code>&nbsp;是一个信号从源节点传递到目标节点的时间。</p>\n\n<p>现在，我们向当前的节点&nbsp;<code>K</code>&nbsp;发送了一个信号。需要多久才能使所有节点都收到信号？如果不能使所有节点收到信号，返回&nbsp;<code>-1</code>。</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li><code>N</code>&nbsp;的范围在&nbsp;<code>[1, 100]</code>&nbsp;之间。</li>\n\t<li><code>K</code>&nbsp;的范围在&nbsp;<code>[1, N]</code>&nbsp;之间。</li>\n\t<li><code>times</code>&nbsp;的长度在&nbsp;<code>[1, 6000]</code>&nbsp;之间。</li>\n\t<li>所有的边&nbsp;<code>times[i] = (u, v, w)</code>&nbsp;都有&nbsp;<code>1 &lt;= u, v &lt;= N</code>&nbsp;且&nbsp;<code>1 &lt;= w &lt;= 100</code>。</li>\n</ol>\n","1-bit-and-2-bit-characters":"<p>有两种特殊字符。第一种字符可以用一比特<code>0</code>来表示。第二种字符可以用两比特(<code>10</code>&nbsp;或&nbsp;<code>11</code>)来表示。</p>\n\n<p>现给一个由若干比特组成的字符串。问最后一个字符是否必定为一个一比特字符。给定的字符串总是由0结束。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>\n<strong>输入:</strong> \nbits = [1, 0, 0]\n<strong>输出:</strong> True\n<strong>解释:</strong> \n唯一的编码方式是一个两比特字符和一个一比特字符。所以最后一个字符是一比特字符。\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre>\n<strong>输入:</strong> \nbits = [1, 1, 1, 0]\n<strong>输出:</strong> False\n<strong>解释:</strong> \n唯一的编码方式是两比特字符和两比特字符。所以最后一个字符不是一比特字符。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= len(bits) &lt;= 1000</code>.</li>\n\t<li><code>bits[i]</code> 总是<code>0</code> 或&nbsp;<code>1</code>.</li>\n</ul>\n","find-k-th-smallest-pair-distance":"<p>给定一个整数数组，返回所有数对之间的第 k 个最小<strong>距离</strong>。一对 (A, B) 的距离被定义为 A 和 B 之间的绝对差值。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入：</strong>\nnums = [1,3,1]\nk = 1\n<strong>输出：0</strong> \n<strong>解释：</strong>\n所有数对如下：\n(1,3) -&gt; 2\n(1,1) -&gt; 0\n(3,1) -&gt; 2\n因此第 1 个最小距离的数对是 (1,1)，它们之间的距离为 0。\n</pre>\n\n<p><strong>提示:</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= len(nums) &lt;= 10000</code>.</li>\n\t<li><code>0 &lt;= nums[i] &lt; 1000000</code>.</li>\n\t<li><code>1 &lt;= k &lt;= len(nums) * (len(nums) - 1) / 2</code>.</li>\n</ol>\n","range-module":"<p>Range 模块是跟踪数字范围的模块。你的任务是以一种有效的方式设计和实现以下接口。</p>\n\n<ul>\n\t<li><code>addRange(int left, int right)</code> 添加半开区间&nbsp;<code>[left, right)</code>，跟踪该区间中的每个实数。添加与当前跟踪的数字部分重叠的区间时，应当添加在区间&nbsp;<code>[left, right)</code>&nbsp;中尚未跟踪的任何数字到该区间中。</li>\n\t<li><code>queryRange(int left, int right)</code>&nbsp;只有在当前正在跟踪区间&nbsp;<code>[left, right)</code>&nbsp;中的每一个实数时，才返回 true。</li>\n\t<li><code>removeRange(int left, int right)</code>&nbsp;停止跟踪区间&nbsp;<code>[left, right)</code>&nbsp;中当前正在跟踪的每个实数。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>addRange(10, 20)</strong>: null\n<strong>removeRange(14, 16)</strong>: null\n<strong>queryRange(10, 14)</strong>: true （区间 [10, 14) 中的每个数都正在被跟踪）\n<strong>queryRange(13, 15)</strong>: false （未跟踪区间 [13, 15) 中像 14, 14.03, 14.17 这样的数字）\n<strong>queryRange(16, 17)</strong>: true （尽管执行了删除操作，区间 [16, 17) 中的数字 16 仍然会被跟踪）\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>半开区间&nbsp;<code>[left, right)</code>&nbsp;表示所有满足&nbsp;<code>left &lt;= x &lt; right</code>&nbsp;的实数。</li>\n\t<li>对&nbsp;<code>addRange, queryRange, removeRange</code>&nbsp;的所有调用中&nbsp;<code>0 &lt; left &lt; right &lt; 10^9</code>。</li>\n\t<li>在单个测试用例中，对&nbsp;<code>addRange</code>&nbsp;的调用总数不超过&nbsp;<code>1000</code>&nbsp;次。</li>\n\t<li>在单个测试用例中，对&nbsp; <code>queryRange</code> 的调用总数不超过 <code>5000</code> 次。</li>\n\t<li>在单个测试用例中，对 <code>removeRange</code> 的调用总数不超过&nbsp;<code>1000</code>&nbsp;次。</li>\n</ul>\n\n<p>&nbsp;</p>\n","my-calendar-ii":"<p>实现一个 <code>MyCalendar</code> 类来存放你的日程安排。如果要添加的时间内不会导致三重预订时，则可以存储这个新的日程安排。</p>\n\n<p><code>MyCalendar</code> 有一个 <code>book(int start, int end)</code>方法。它意味着在start到end时间内增加一个日程安排，注意，这里的时间是半开区间，即 <code>[start, end)</code>, 实数&nbsp;<code>x</code> 的范围为， &nbsp;<code>start &lt;= x &lt; end</code>。</p>\n\n<p>当三个日程安排有一些时间上的交叉时（例如三个日程安排都在同一时间内），就会产生三重预订。</p>\n\n<p>每次调用 <code>MyCalendar.book</code>方法时，如果可以将日程安排成功添加到日历中而不会导致三重预订，返回 <code>true</code>。否则，返回 <code>false</code> 并且不要将该日程安排添加到日历中。</p>\n\n<p>请按照以下步骤调用<code>MyCalendar</code> 类: <code>MyCalendar cal = new MyCalendar();</code> <code>MyCalendar.book(start, end)</code></p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>MyCalendar();\nMyCalendar.book(10, 20); // returns true\nMyCalendar.book(50, 60); // returns true\nMyCalendar.book(10, 40); // returns true\nMyCalendar.book(5, 15); // returns false\nMyCalendar.book(5, 10); // returns true\nMyCalendar.book(25, 55); // returns true\n<strong>解释:</strong> \n前两个日程安排可以添加至日历中。 第三个日程安排会导致双重预订，但可以添加至日历中。\n第四个日程安排活动（5,15）不能添加至日历中，因为它会导致三重预订。\n第五个日程安排（5,10）可以添加至日历中，因为它未使用已经双重预订的时间10。\n第六个日程安排（25,55）可以添加至日历中，因为时间 [25,40] 将和第三个日程安排双重预订；\n时间 [40,50] 将单独预订，时间 [50,55）将和第二个日程安排双重预订。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>每个测试用例，调用&nbsp;<code>MyCalendar.book</code>&nbsp;函数最多不超过&nbsp;<code>100</code>次。</li>\n\t<li>调用函数&nbsp;<code>MyCalendar.book(start, end)</code>时，&nbsp;<code>start</code> 和&nbsp;<code>end</code> 的取值范围为&nbsp;<code>[0, 10^9]</code>。</li>\n</ul>\n","flood-fill":"<p>有一幅以二维整数数组表示的图画，每一个整数表示该图画的像素值大小，数值在 0 到 65535 之间。</p>\n\n<p>给你一个坐标&nbsp;<code>(sr, sc)</code>&nbsp;表示图像渲染开始的像素值（行 ，列）和一个新的颜色值&nbsp;<code>newColor</code>，让你重新上色这幅图像。</p>\n\n<p>为了完成上色工作，从初始坐标开始，记录初始坐标的上下左右四个方向上像素值与初始坐标相同的相连像素点，接着再记录这四个方向上符合条件的像素点与他们对应四个方向上像素值与初始坐标相同的相连像素点，&hellip;&hellip;，重复该过程。将所有有记录的像素点的颜色值改为新的颜色值。</p>\n\n<p>最后返回经过上色渲染后的图像。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> \nimage = [[1,1,1],[1,1,0],[1,0,1]]\nsr = 1, sc = 1, newColor = 2\n<strong>输出:</strong> [[2,2,2],[2,2,0],[2,0,1]]\n<strong>解析:</strong> \n在图像的正中间，(坐标(sr,sc)=(1,1)),\n在路径上所有符合条件的像素点的颜色都被更改成2。\n注意，右下角的像素没有更改为2，\n因为它不是在上下左右四个方向上与初始点相连的像素点。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>image</code> 和&nbsp;<code>image[0]</code>&nbsp;的长度在范围&nbsp;<code>[1, 50]</code> 内。</li>\n\t<li>给出的初始点将满足&nbsp;<code>0 &lt;= sr &lt; image.length</code> 和&nbsp;<code>0 &lt;= sc &lt; image[0].length</code>。</li>\n\t<li><code>image[i][j]</code> 和&nbsp;<code>newColor</code>&nbsp;表示的颜色值在范围&nbsp;<code>[0, 65535]</code>内。</li>\n</ul>\n","sentence-similarity-ii":null,"minimum-window-subsequence":null,"parse-lisp-expression":"<p>给定一个类似 Lisp 语句的表达式 <code>expression</code>，求出其计算结果。</p>\n\n<p>表达式语法如下所示:</p>\n\n<ul>\n\t<li>表达式可以为整数，let 语法，add 语法，mult 语法。表达式的结果总是一个整数。</li>\n\t<li>(整数可以是正整数、负整数、0)</li>\n\t<li>let 语法表示为&nbsp;<code>(let v1 e1 v2 e2 ... vn en expr)</code>,&nbsp;其中&nbsp;<code>let</code>语法总是以字符串&nbsp;<code>&quot;let&quot;</code>来表示，接下来会跟随一个或多个交替变量或表达式，也就是说，第一个变量&nbsp;<code>v1</code>被分配为表达式&nbsp;<code>e1</code>&nbsp;的值，第二个变量&nbsp;<code>v2</code>&nbsp;被分配为表达式&nbsp;<code>e2</code>&nbsp;的值，<strong>以此类推</strong>；最终 let 语法的值为&nbsp;<code>expr</code>表达式的值。</li>\n\t<li>add语法表示为&nbsp;<code>(add e1 e2)</code>，其中&nbsp;<code>add</code>&nbsp;语法总是以字符串&nbsp;<code>&quot;add&quot;</code>来表示，该语法总是有两个表达式<code>e1</code><font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\"><span style=\"background-color:#ffffff; font-size:14px\">、</span></font><code>e2</code>, 该语法的最终结果是&nbsp;<code>e1</code> 表达式的值与&nbsp;<code>e2</code>&nbsp;表达式的值之<strong>和</strong>。</li>\n\t<li>mult语法表示为&nbsp;<code>(mult e1 e2)</code>&nbsp;，其中&nbsp;<code>mult</code>&nbsp;语法总是以字符串<code>&quot;mult&quot;</code>表示， 该语法总是有两个表达式 <code>e1</code>、<code>e2</code>，该语法的最终结果是&nbsp;<code>e1</code> 表达式的值与&nbsp;<code>e2</code>&nbsp;表达式的值之<strong>积</strong>。</li>\n\t<li>在该题目中，变量的命名以小写字符开始，之后跟随0个或多个小写字符或数字。为了方便，&quot;add&quot;，&quot;let&quot;，&quot;mult&quot;会被定义为&quot;关键字&quot;，不会在表达式的变量命名中出现。</li>\n\t<li>最后，要说一下范围的概念。在做计算时，<strong>需要注意优先级</strong>，在最内层(根据括号)的表达式的值应该先计算,然后依次计算外层的表达式。我们将保证每一个测试的表达式都是合法的。有关范围的更多详细信息，请参阅示例。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\n<strong>输入:</strong> (add 1 2)\n<strong>输出:</strong> 3\n\n<strong>输入:</strong> (mult 3 (add 2 3))\n<strong>输出:</strong> 15\n\n<strong>输入:</strong> (let x 2 (mult x 5))\n<strong>输出:</strong> 10\n\n<strong>输入:</strong> (let x 2 (mult x (let x 3 y 4 (add x y))))\n<strong>输出:</strong> 14\n<strong>解释:</strong> \n表达式 (add x y), 在获取 x 值时, 我们应当由最内层依次向外计算, 首先遇到了 x=3, 所以此处的 x 值是 3.\n\n\n<strong>输入:</strong> (let x 3 x 2 x)\n<strong>输出:</strong> 2\n<strong>解释:</strong> let 语句中的赋值运算按顺序处理即可\n\n<strong>输入:</strong> (let x 1 y 2 x (add x y) (add x y))\n<strong>输出:</strong> 5\n<strong>解释:</strong> \n第一个 (add x y) 计算结果是 3，并且将此值赋给了 x 。\n第二个 (add x y) 计算结果就是 3+2 = 5 。\n\n<strong>输入:</strong> (let x 2 (add (let x 3 (let x 4 x)) x))\n<strong>输出:</strong> 6\n<strong>解释:</strong> \n(let x 4 x) 中的 x 的作用范围仅在()之内。所以最终做加法操作时，x 的值是 2 。\n\n<strong>输入:</strong> (let a1 3 b2 (add a1 1) b2) \n<strong>输出: </strong>4\n<strong>解释:</strong> \n变量命名时可以在第一个小写字母后跟随数字.\n\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li>我们给定的&nbsp;<code>expression</code>&nbsp;表达式都是格式化后的：表达式前后没有多余的空格，表达式的不同部分(关键字、变量、表达式)之间仅使用一个空格分割，并且在相邻括号之间也没有空格。我们给定的表达式均为合法的且最终结果为整数。</li>\n\t<li>我们给定的表达式长度最多为 2000&nbsp;(表达式也不会为空，因为那不是一个合法的表达式)。</li>\n\t<li>最终的结果和中间的计算结果都将是一个 32 位整数。</li>\n</ul>\n\n<p>&nbsp;</p>\n","closest-leaf-in-a-binary-tree":null,"number-of-distinct-islands-ii":null,"my-calendar-iii":"<p>实现一个 <code>MyCalendar</code> 类来存放你的日程安排，你可以一直添加新的日程安排。</p>\n\n<p><code>MyCalendar</code> 有一个 <code>book(int start, int end)</code>方法。它意味着在start到end时间内增加一个日程安排，注意，这里的时间是半开区间，即 <code>[start, end)</code>, 实数&nbsp;<code>x</code> 的范围为， &nbsp;<code>start &lt;= x &lt; end</code>。</p>\n\n<p>当 <strong>K</strong> 个日程安排有一些时间上的交叉时（例如K个日程安排都在同一时间内），就会产生 <strong>K</strong> 次预订。</p>\n\n<p>每次调用 <code>MyCalendar.book</code>方法时，返回一个整数 <code>K</code> ，表示最大的 <code>K</code> 次预订。</p>\n\n<p>请按照以下步骤调用<code>MyCalendar</code> 类: <code>MyCalendar cal = new MyCalendar();</code> <code>MyCalendar.book(start, end)</code></p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\nMyCalendarThree();\nMyCalendarThree.book(10, 20); // returns 1\nMyCalendarThree.book(50, 60); // returns 1\nMyCalendarThree.book(10, 40); // returns 2\nMyCalendarThree.book(5, 15); // returns 3\nMyCalendarThree.book(5, 10); // returns 3\nMyCalendarThree.book(25, 55); // returns 3\n<strong>解释:</strong> \n前两个日程安排可以预订并且不相交，所以最大的K次预订是1。\n第三个日程安排[10,40]与第一个日程安排相交，最高的K次预订为2。\n其余的日程安排的最高K次预订仅为3。\n请注意，最后一次日程安排可能会导致局部最高K次预订为2，但答案仍然是3，原因是从开始到最后，时间[10,20]，[10,40]和[5,15]仍然会导致3次预订。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>每个测试用例，调用&nbsp;<code>MyCalendar.book</code>&nbsp;函数最多不超过&nbsp;<code>400</code>次。</li>\n\t<li>调用函数&nbsp;<code>MyCalendar.book(start, end)</code>时，&nbsp;<code>start</code> 和&nbsp;<code>end</code> 的取值范围为&nbsp;<code>[0, 10^9]</code>。</li>\n</ul>\n","count-binary-substrings":"<p>给定一个字符串&nbsp;<code>s</code>，计算具有相同数量0和1的非空(连续)子字符串的数量，并且这些子字符串中的所有0和所有1都是组合在一起的。</p>\n\n<p>重复出现的子串要计算它们出现的次数。</p>\n\n<p><strong>示例 1 :</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;00110011&quot;\n<strong>输出:</strong> 6\n<strong>解释:</strong> 有6个子串具有相同数量的连续1和0：&ldquo;0011&rdquo;，&ldquo;01&rdquo;，&ldquo;1100&rdquo;，&ldquo;10&rdquo;，&ldquo;0011&rdquo; 和 &ldquo;01&rdquo;。\n\n请注意，一些重复出现的子串要计算它们出现的次数。\n\n另外，&ldquo;00110011&rdquo;不是有效的子串，因为所有的0（和1）没有组合在一起。\n</pre>\n\n<p><strong>示例 2 :</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;10101&quot;\n<strong>输出:</strong> 4\n<strong>解释:</strong> 有4个子串：&ldquo;10&rdquo;，&ldquo;01&rdquo;，&ldquo;10&rdquo;，&ldquo;01&rdquo;，它们具有相同数量的连续1和0。\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li><code>s.length</code>&nbsp;在1到50,000之间。</li>\n\t<li><code>s</code>&nbsp;只包含&ldquo;0&rdquo;或&ldquo;1&rdquo;字符。</li>\n</ul>\n","sentence-similarity":null,"falling-squares":"<p>在无限长的数轴（即 x 轴）上，我们根据给定的顺序放置对应的正方形方块。</p>\n\n<p>第 <code>i</code> 个掉落的方块（<code>positions[i] = (left, side_length)</code>）是正方形，其中&nbsp;<code>left 表示该方块最左边的点位置(positions[i][0])，side_length 表示该方块的边长(positions[i][1])。</code></p>\n\n<p>每个方块的底部边缘平行于数轴（即 x 轴），并且从一个比目前所有的落地方块更高的高度掉落而下。在上一个方块结束掉落，并保持静止后，才开始掉落新方块。</p>\n\n<p>方块的底边具有非常大的粘性，并将保持固定在它们所接触的任何长度表面上（无论是数轴还是其他方块）。邻接掉落的边不会过早地粘合在一起，<code>因为只有底边才具有粘性。</code></p>\n\n<p>&nbsp;</p>\n\n<p>返回一个堆叠高度列表&nbsp;<code>ans</code> 。每一个堆叠高度&nbsp;<code>ans[i]</code>&nbsp;表示在通过&nbsp;<code>positions[0], positions[1], ..., positions[i]</code>&nbsp;表示的方块掉落结束后，目前所有已经落稳的方块堆叠的最高高度。</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [[1, 2], [2, 3], [6, 1]]\n<strong>输出:</strong> [2, 5, 5]\n<strong>解释:\n\n</strong>第一个方块 <code>positions[0] = [1, 2] </code>掉落：\n<code>_aa\n_aa\n-------\n</code>方块最大高度为 2 。\n\n第二个方块 <code>positions[1] = [2, 3] </code>掉落：\n<code>__aaa\n__aaa\n__aaa\n_aa__\n_aa__\n--------------\n</code>方块最大高度为5。\n大的方块保持在较小的方块的顶部，不论它的重心在哪里，因为方块的底部边缘有非常大的粘性。\n\n第三个方块 <code>positions[1] = [6, 1] </code>掉落：\n<code>__aaa\n__aaa\n__aaa\n_aa\n_aa___a\n-------------- \n</code>方块最大高度为5。\n\n因此，我们返回结果<code>[2, 5, 5]。</code>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [[100, 100], [200, 100]]\n<strong>输出:</strong> [100, 100]\n<strong>解释:</strong> 相邻的方块不会过早地卡住，只有它们的底部边缘才能粘在表面上。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= positions.length &lt;= 1000</code>.</li>\n\t<li><code>1 &lt;= positions[i][0] &lt;= 10^8</code>.</li>\n\t<li><code>1 &lt;= positions[i][1] &lt;= 10^6</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n","find-smallest-letter-greater-than-target":"<p>给定一个只包含小写字母的有序数组<code>letters</code>&nbsp;和一个目标字母&nbsp;<code>target</code>，寻找有序数组里面比目标字母大的最小字母。</p>\n\n<p>数组里字母的顺序是循环的。举个例子，如果目标字母<code>target = &#39;z&#39;</code> 并且有序数组为&nbsp;<code>letters = [&#39;a&#39;, &#39;b&#39;]</code>，则答案返回&nbsp;<code>&#39;a&#39;</code>。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\n<strong>输入:</strong>\nletters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]\ntarget = &quot;a&quot;\n<strong>输出:</strong> &quot;c&quot;\n\n<strong>输入:</strong>\nletters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]\ntarget = &quot;c&quot;\n<strong>输出:</strong> &quot;f&quot;\n\n<strong>输入:</strong>\nletters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]\ntarget = &quot;d&quot;\n<strong>输出:</strong> &quot;f&quot;\n\n<strong>输入:</strong>\nletters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]\ntarget = &quot;g&quot;\n<strong>输出:</strong> &quot;j&quot;\n\n<strong>输入:</strong>\nletters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]\ntarget = &quot;j&quot;\n<strong>输出:</strong> &quot;c&quot;\n\n<strong>输入:</strong>\nletters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]\ntarget = &quot;k&quot;\n<strong>输出:</strong> &quot;c&quot;\n</pre>\n\n<p><strong>注:</strong></p>\n\n<ol>\n\t<li><code>letters</code>长度范围在<code>[2, 10000]</code>区间内。</li>\n\t<li><code>letters</code> 仅由小写字母组成，最少包含两个不同的字母。</li>\n\t<li>目标字母<code>target</code> 是一个小写字母。</li>\n</ol>\n","max-stack":null,"find-pivot-index":"<p>给定一个整数类型的数组&nbsp;<code>nums</code>，请编写一个能够返回数组<strong>&ldquo;中心索引&rdquo;</strong>的方法。</p>\n\n<p>我们是这样定义数组<strong>中心索引</strong>的：数组中心索引的左侧所有元素相加的和等于右侧所有元素相加的和。</p>\n\n<p>如果数组不存在中心索引，那么我们应该返回 -1。如果数组有多个中心索引，那么我们应该返回最靠近左边的那一个。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> \nnums = [1, 7, 3, 6, 5, 6]\n<strong>输出:</strong> 3\n<strong>解释:</strong> \n索引3 (nums[3] = 6) 的左侧数之和(1 + 7 + 3 = 11)，与右侧数之和(5 + 6 = 11)相等。\n同时, 3 也是第一个符合要求的中心索引。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> \nnums = [1, 2, 3]\n<strong>输出:</strong> -1\n<strong>解释:</strong> \n数组中不存在满足此条件的中心索引。</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li><code>nums</code> 的长度范围为&nbsp;<code>[0, 10000]</code>。</li>\n\t<li>任何一个&nbsp;<code>nums[i]</code> 将会是一个范围在&nbsp;<code>[-1000, 1000]</code>的整数。</li>\n</ul>\n","partition-to-k-equal-sum-subsets":"<p>给定一个整数数组&nbsp;&nbsp;<code>nums</code> 和一个正整数 <code>k</code>，找出是否有可能把这个数组分成 <code>k</code> 个非空子集，其总和都相等。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong> nums = [4, 3, 2, 3, 5, 2, 1], k = 4\n<strong>输出：</strong> True\n<strong>说明：</strong> 有可能将其分成 4 个子集（5），（1,4），（2,3），（2,3）等于总和。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= len(nums) &lt;= 16</code></li>\n\t<li><code>0 &lt; nums[i] &lt; 10000</code></li>\n</ul>\n","stickers-to-spell-word":"<p>我们给出了 N 种不同类型的贴纸。每个贴纸上都有一个小写的英文单词。</p>\n\n<p>你希望从自己的贴纸集合中裁剪单个字母并重新排列它们，从而拼写出给定的目标字符串 <code>target</code>。</p>\n\n<p>如果你愿意的话，你可以不止一次地使用每一张贴纸，而且每一张贴纸的数量都是无限的。</p>\n\n<p>拼出目标&nbsp;<code>target</code> 所需的最小贴纸数量是多少？如果任务不可能，则返回 -1。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p>输入：</p>\n\n<pre>[&quot;with&quot;, &quot;example&quot;, &quot;science&quot;], &quot;thehat&quot;\n</pre>\n\n<p>输出：</p>\n\n<pre>3\n</pre>\n\n<p>解释：</p>\n\n<pre>我们可以使用 2 个 &quot;with&quot; 贴纸，和 1 个 &quot;example&quot; 贴纸。\n把贴纸上的字母剪下来并重新排列后，就可以形成目标 &ldquo;thehat&ldquo; 了。\n此外，这是形成目标字符串所需的最小贴纸数量。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p>输入：</p>\n\n<pre>[&quot;notice&quot;, &quot;possible&quot;], &quot;basicbasic&quot;\n</pre>\n\n<p>输出：</p>\n\n<pre>-1\n</pre>\n\n<p>解释：</p>\n\n<pre>我们不能通过剪切给定贴纸的字母来形成目标&ldquo;basicbasic&rdquo;。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>stickers</code> 长度范围是&nbsp;<code>[1, 50]</code>。</li>\n\t<li><code>stickers</code> 由小写英文单词组成（不带撇号）。</li>\n\t<li><code>target</code> 的长度在&nbsp;<code>[1, 15]</code>&nbsp;范围内，由小写字母组成。</li>\n\t<li>在所有的测试案例中，所有的单词都是从 1000 个最常见的美国英语单词中随机选取的，目标是两个随机单词的串联。</li>\n\t<li>时间限制可能比平时更具挑战性。预计 50 个贴纸的测试案例平均可在35ms内解决。</li>\n</ul>\n\n<p>&nbsp;</p>\n","maximum-sum-of-3-non-overlapping-subarrays":"<p>给定数组&nbsp;<code>nums</code>&nbsp;由正整数组成，找到三个互不重叠的子数组的最大和。</p>\n\n<p>每个子数组的长度为<code>k</code>，我们要使这<code>3*k</code>个项的和最大化。</p>\n\n<p>返回每个区间起始索引的列表（索引从 0 开始）。如果有多个结果，返回字典序最小的一个。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,2,1,2,6,7,5,1], 2\n<strong>输出:</strong> [0, 3, 5]\n<strong>解释:</strong> 子数组 [1, 2], [2, 6], [7, 5] 对应的起始索引为 [0, 3, 5]。\n我们也可以取 [2, 1], 但是结果 [1, 3, 5] 在字典序上更大。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>nums.length</code>的范围在<code>[1, 20000]</code>之间。</li>\n\t<li><code>nums[i]</code>的范围在<code>[1, 65535]</code>之间。</li>\n\t<li><code>k</code>的范围在<code>[1, floor(nums.length / 3)]</code>之间。</li>\n</ul>\n","maximum-length-of-repeated-subarray":"<p>给两个整数数组&nbsp;<code>A</code>&nbsp;和&nbsp;<code>B</code>&nbsp;，返回两个数组中公共的、长度最长的子数组的长度。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong>\nA: [1,2,3,2,1]\nB: [3,2,1,4,7]\n<strong>输出:</strong> 3\n<strong>解释:</strong> \n长度最长的公共子数组是 [3, 2, 1]。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>1 &lt;= len(A), len(B) &lt;= 1000</li>\n\t<li>0 &lt;= A[i], B[i] &lt; 100</li>\n</ol>\n","delete-and-earn":"<p>给定一个整数数组&nbsp;<code>nums</code>&nbsp;，你可以对它进行一些操作。</p>\n\n<p>每次操作中，选择任意一个&nbsp;<code>nums[i]</code>&nbsp;，删除它并获得&nbsp;<code>nums[i]</code>&nbsp;的点数。之后，你必须删除<strong>每个</strong>等于&nbsp;<code>nums[i] - 1</code>&nbsp;或&nbsp;<code>nums[i] + 1</code>&nbsp;的元素。</p>\n\n<p>开始你拥有 0 个点数。返回你能通过这些操作获得的最大点数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> nums = [3, 4, 2]\n<strong>输出:</strong> 6\n<strong>解释:</strong> \n删除 4 来获得 4 个点数，因此 3 也被删除。\n之后，删除 2 来获得 2 个点数。总共获得 6 个点数。\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre>\n<strong>输入:</strong> nums = [2, 2, 3, 3, 3, 4]\n<strong>输出:</strong> 9\n<strong>解释:</strong> \n删除 3 来获得 3 个点数，接着要删除两个 2 和 4 。\n之后，再次删除 3 获得 3 个点数，再次删除 3 获得 3 个点数。\n总共获得 9 个点数。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>nums</code>的长度最大为<code>20000</code>。</li>\n\t<li>每个整数<code>nums[i]</code>的大小都在<code>[1, 10000]</code>范围内。</li>\n</ul>\n","self-dividing-numbers":"<p><em>自除数&nbsp;</em>是指可以被它包含的每一位数除尽的数。</p>\n\n<p>例如，128 是一个自除数，因为&nbsp;<code>128 % 1 == 0</code>，<code>128 % 2 == 0</code>，<code>128 % 8 == 0</code>。</p>\n\n<p>还有，自除数不允许包含 0 。</p>\n\n<p>给定上边界和下边界数字，输出一个列表，列表的元素是边界（含边界）内所有的自除数。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong> \n上边界left = 1, 下边界right = 22\n<strong>输出：</strong> [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li>每个输入参数的边界满足&nbsp;<code>1 &lt;= left &lt;= right &lt;= 10000</code>。</li>\n</ul>\n","count-different-palindromic-subsequences":"<p>给定一个字符串 S，找出 S 中不同的非空回文子字符串个数，并<strong>返回该数字与 <code>10^9 + 7 </code>的模。</strong></p>\n\n<p>通过从 S 中删除 0 个或多个字符来获得子字符串。</p>\n\n<p>如果一个字符串字符序列与它的反转字符串字符序列一致，那么它是回文字符串。</p>\n\n<p>如果对于某个&nbsp;<code>i</code>， <code>A_i != B_i</code>，那么<code>A_1, A_2, ...</code> 和&nbsp;<code>B_1, B_2, ...</code> 这两个字符串是不同的。</p>\n\n<p><strong>示例1:</strong></p>\n\n<pre><strong>输入:</strong> \nS = &#39;bccb&#39;\n<strong>输出:</strong> 6\n<strong>解释:</strong> \n6个不同的非空回文子字符串分别为： &#39;b&#39;, &#39;c&#39;, &#39;bb&#39;, &#39;cc&#39;, &#39;bcb&#39;, &#39;bccb&#39;。\n注意： &#39;bcb&#39; 虽然出现两次但仅计数一次。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>样例2:</strong></p>\n\n<pre><strong>输入:</strong> \nS = &#39;abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba&#39;\n<strong>输出:</strong> 104860361\n<strong>解释:</strong> \n共有 3104860382 个不同的非空回文子字符串，对 10^9 + 7 取模为 104860361。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>字符串&nbsp;<code>S</code>&nbsp;的长度将在<code>[1, 1000]</code>范围内。</li>\n\t<li>每个字符<code>S[i]</code>将会是集合&nbsp;<code>{&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;}</code>&nbsp;中的某一个。</li>\n</ul>\n\n<p>&nbsp;</p>\n","my-calendar-i":"<p>实现一个 <code>MyCalendar</code> 类来存放你的日程安排。如果要添加的时间内没有其他安排，则可以存储这个新的日程安排。</p>\n\n<p><code>MyCalendar</code> 有一个 <code>book(int start, int end)</code>方法。它意味着在 start 到 end 时间内增加一个日程安排，注意，这里的时间是半开区间，即 <code>[start, end)</code>, 实数&nbsp;<code>x</code> 的范围为， &nbsp;<code>start &lt;= x &lt; end</code>。</p>\n\n<p>当两个日程安排有一些时间上的交叉时（例如两个日程安排都在同一时间内），就会产生重复预订。</p>\n\n<p>每次调用 <code>MyCalendar.book</code>方法时，如果可以将日程安排成功添加到日历中而不会导致重复预订，返回 <code>true</code>。否则，返回 <code>false</code>&nbsp;并且不要将该日程安排添加到日历中。</p>\n\n<p>请按照以下步骤调用 <code>MyCalendar</code> 类: <code>MyCalendar cal = new MyCalendar();</code> <code>MyCalendar.book(start, end)</code></p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>MyCalendar();\nMyCalendar.book(10, 20); // returns true\nMyCalendar.book(15, 25); // returns false\nMyCalendar.book(20, 30); // returns true\n<strong>解释:</strong> \n第一个日程安排可以添加到日历中.  第二个日程安排不能添加到日历中，因为时间 15 已经被第一个日程安排预定了。\n第三个日程安排可以添加到日历中，因为第一个日程安排并不包含时间 20 。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>每个测试用例，调用&nbsp;<code>MyCalendar.book</code>&nbsp;函数最多不超过&nbsp;<code>100</code>次。</li>\n\t<li>调用函数&nbsp;<code>MyCalendar.book(start, end)</code>时，&nbsp;<code>start</code> 和&nbsp;<code>end</code> 的取值范围为&nbsp;<code>[0, 10^9]</code>。</li>\n</ul>\n","minimum-ascii-delete-sum-for-two-strings":"<p>给定两个字符串<code>s1, s2</code>，找到使两个字符串相等所需删除字符的ASCII值的最小和。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> s1 = &quot;sea&quot;, s2 = &quot;eat&quot;\n<strong>输出:</strong> 231\n<strong>解释:</strong> 在 &quot;sea&quot; 中删除 &quot;s&quot; 并将 &quot;s&quot; 的值(115)加入总和。\n在 &quot;eat&quot; 中删除 &quot;t&quot; 并将 116 加入总和。\n结束时，两个字符串相等，115 + 116 = 231 就是符合条件的最小和。\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre>\n<strong>输入:</strong> s1 = &quot;delete&quot;, s2 = &quot;leet&quot;\n<strong>输出:</strong> 403\n<strong>解释:</strong> 在 &quot;delete&quot; 中删除 &quot;dee&quot; 字符串变成 &quot;let&quot;，\n将 100[d]+101[e]+101[e] 加入总和。在 &quot;leet&quot; 中删除 &quot;e&quot; 将 101[e] 加入总和。\n结束时，两个字符串都等于 &quot;let&quot;，结果即为 100+101+101+101 = 403 。\n如果改为将两个字符串转换为 &quot;lee&quot; 或 &quot;eet&quot;，我们会得到 433 或 417 的结果，比答案更大。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>0 &lt; s1.length, s2.length &lt;= 1000</code>。</li>\n\t<li>所有字符串中的字符ASCII值在<code>[97, 122]</code>之间。</li>\n</ul>\n","top-k-frequent-words":"<p>给一非空的单词列表，返回前&nbsp;<em>k&nbsp;</em>个出现次数最多的单词。</p>\n\n<p>返回的答案应该按单词出现频率由高到低排序。如果不同的单词有相同出现频率，按字母顺序排序。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入:</strong> [&quot;i&quot;, &quot;love&quot;, &quot;leetcode&quot;, &quot;i&quot;, &quot;love&quot;, &quot;coding&quot;], k = 2\n<strong>输出:</strong> [&quot;i&quot;, &quot;love&quot;]\n<strong>解析:</strong> &quot;i&quot; 和 &quot;love&quot; 为出现次数最多的两个单词，均为2次。\n    注意，按字母顺序 &quot;i&quot; 在 &quot;love&quot; 之前。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入:</strong> [&quot;the&quot;, &quot;day&quot;, &quot;is&quot;, &quot;sunny&quot;, &quot;the&quot;, &quot;the&quot;, &quot;the&quot;, &quot;sunny&quot;, &quot;is&quot;, &quot;is&quot;], k = 4\n<strong>输出:</strong> [&quot;the&quot;, &quot;is&quot;, &quot;sunny&quot;, &quot;day&quot;]\n<strong>解析:</strong> &quot;the&quot;, &quot;is&quot;, &quot;sunny&quot; 和 &quot;day&quot; 是出现次数最多的四个单词，\n    出现次数依次为 4, 3, 2 和 1 次。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li>假定 <em>k</em> 总为有效值， 1 &le; <em>k</em> &le; 集合元素数。</li>\n\t<li>输入的单词均由小写字母组成。</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>扩展练习：</strong></p>\n\n<ol>\n\t<li>尝试以&nbsp;<em>O</em>(<em>n</em> log <em>k</em>) 时间复杂度和&nbsp;<em>O</em>(<em>n</em>) 空间复杂度解决。</li>\n</ol>\n","number-of-atoms":"<p>给定一个化学式<code>formula</code>（作为字符串），返回每种原子的数量。</p>\n\n<p>原子总是以一个大写字母开始，接着跟随0个或任意个小写字母，表示原子的名字。</p>\n\n<p>如果数量大于 1，原子后会跟着数字表示原子的数量。如果数量等于 1 则不会跟数字。例如，H2O 和 H2O2 是可行的，但 H1O2 这个表达是不可行的。</p>\n\n<p>两个化学式连在一起是新的化学式。例如&nbsp;H2O2He3Mg4 也是化学式。</p>\n\n<p>一个括号中的化学式和数字（可选择性添加）也是化学式。例如 (H2O2) 和 (H2O2)3 是化学式。</p>\n\n<p>给定一个化学式，输出所有原子的数量。格式为：第一个（按字典序）原子的名子，跟着它的数量（如果数量大于 1），然后是第二个原子的名字（按字典序），跟着它的数量（如果数量大于 1），以此类推。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> \nformula = &quot;H2O&quot;\n<strong>输出:</strong> &quot;H2O&quot;\n<strong>解释:</strong> \n原子的数量是 {&#39;H&#39;: 2, &#39;O&#39;: 1}。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> \nformula = &quot;Mg(OH)2&quot;\n<strong>输出:</strong> &quot;H2MgO2&quot;\n<strong>解释:</strong> \n原子的数量是 {&#39;H&#39;: 2, &#39;Mg&#39;: 1, &#39;O&#39;: 2}。\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong> \nformula = &quot;K4(ON(SO3)2)2&quot;\n<strong>输出:</strong> &quot;K4N2O14S4&quot;\n<strong>解释:</strong> \n原子的数量是 {&#39;K&#39;: 4, &#39;N&#39;: 2, &#39;O&#39;: 14, &#39;S&#39;: 4}。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li>所有原子的第一个字母为大写，剩余字母都是小写。</li>\n\t<li><code>formula</code>的长度在<code>[1, 1000]</code>之间。</li>\n\t<li><code>formula</code>只包含字母、数字和圆括号，并且题目中给定的是合法的化学式。</li>\n</ul>\n","employee-importance":"<p>给定一个保存员工信息的数据结构，它包含了员工<strong>唯一的id</strong>，<strong>重要度&nbsp;</strong>和 <strong>直系下属的id</strong>。</p>\n\n<p>比如，员工1是员工2的领导，员工2是员工3的领导。他们相应的重要度为15, 10, 5。那么员工1的数据结构是[1, 15, [2]]，员工2的数据结构是[2, 10, [3]]，员工3的数据结构是[3, 5, []]。注意虽然员工3也是员工1的一个下属，但是由于<strong>并不是直系</strong>下属，因此没有体现在员工1的数据结构中。</p>\n\n<p>现在输入一个公司的所有员工信息，以及单个员工id，返回这个员工和他所有下属的重要度之和。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1\n<strong>输出:</strong> 11\n<strong>解释:</strong>\n员工1自身的重要度是5，他有两个直系下属2和3，而且2和3的重要度均为3。因此员工1的总重要度是 5 + 3 + 3 = 11。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>一个员工最多有一个<strong>直系</strong>领导，但是可以有多个<strong>直系</strong>下属</li>\n\t<li>员工数量不超过2000。</li>\n</ol>\n","cherry-pickup":"<p>一个N x N的网格<code>(grid)</code>&nbsp;代表了一块樱桃地，每个格子由以下三种数字的一种来表示：</p>\n\n<ul>\n\t<li>0 表示这个格子是空的，所以你可以穿过它。</li>\n\t<li>1 表示这个格子里装着一个樱桃，你可以摘到樱桃然后穿过它。</li>\n\t<li>-1 表示这个格子里有荆棘，挡着你的路。</li>\n</ul>\n\n<p>你的任务是在遵守下列规则的情况下，尽可能的摘到最多樱桃：</p>\n\n<ul>\n\t<li>从位置&nbsp;(0, 0) 出发，最后到达 (N-1, N-1) ，只能向下或向右走，并且只能穿越有效的格子（即只可以穿过值为0或者1的格子）；</li>\n\t<li>当到达 (N-1, N-1) 后，你要继续走，直到返回到 (0, 0) ，只能向上或向左走，并且只能穿越有效的格子；</li>\n\t<li>当你经过一个格子且这个格子包含一个樱桃时，你将摘到樱桃并且这个格子会变成空的（值变为0）；</li>\n\t<li>如果在 (0, 0) 和 (N-1, N-1) 之间不存在一条可经过的路径，则没有任何一个樱桃能被摘到。</li>\n</ul>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> grid =\n[[0, 1, -1],\n [1, 0, -1],\n [1, 1,  1]]\n<strong>输出:</strong> 5\n<strong>解释：</strong> \n玩家从（0,0）点出发，经过了向下走，向下走，向右走，向右走，到达了点(2, 2)。\n在这趟单程中，总共摘到了4颗樱桃，矩阵变成了[[0,1,-1],[0,0,-1],[0,0,0]]。\n接着，这名玩家向左走，向上走，向上走，向左走，返回了起始点，又摘到了1颗樱桃。\n在旅程中，总共摘到了5颗樱桃，这是可以摘到的最大值了。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li><code>grid</code> 是一个&nbsp;<code>N</code> * <code>N</code> 的二维数组，N的取值范围是<code>1 &lt;= N &lt;= 50</code>。</li>\n\t<li>每一个&nbsp;<code>grid[i][j]</code> 都是集合&nbsp;<code>{-1, 0, 1}</code>其中的一个数。</li>\n\t<li>可以保证起点&nbsp;<code>grid[0][0]</code>&nbsp;和终点&nbsp;<code>grid[N-1][N-1]</code>&nbsp;的值都不会是 -1。</li>\n</ul>\n","subarray-product-less-than-k":"<p>给定一个正整数数组&nbsp;<code>nums</code>。</p>\n\n<p>找出该数组内乘积小于&nbsp;<code>k</code>&nbsp;的连续的子数组的个数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> nums = [10,5,2,6], k = 100\n<strong>输出:</strong> 8\n<strong>解释:</strong> 8个乘积小于100的子数组分别为: [10], [5], [2], [6], [10,5], [5,2], [2,6], [5,2,6]。\n需要注意的是 [10,5,2] 并不是乘积小于100的子数组。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li><code>0 &lt; nums.length &lt;= 50000</code></li>\n\t<li><code>0 &lt; nums[i] &lt; 1000</code></li>\n\t<li><code>0 &lt;= k &lt; 10^6</code></li>\n</ul>\n","max-area-of-island":"<p>给定一个包含了一些 0 和 1的非空二维数组&nbsp;<code>grid</code>&nbsp;, 一个&nbsp;<strong>岛屿</strong>&nbsp;是由四个方向 (水平或垂直) 的&nbsp;<code>1</code>&nbsp;(代表土地) 构成的组合。你可以假设二维矩阵的四个边缘都被水包围着。</p>\n\n<p>找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为0。)</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n[[0,0,1,0,0,0,0,1,0,0,0,0,0],\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\n [0,1,1,0,1,0,0,0,0,0,0,0,0],\n [0,1,0,0,1,1,0,0,<strong>1</strong>,0,<strong>1</strong>,0,0],\n [0,1,0,0,1,1,0,0,<strong>1</strong>,<strong>1</strong>,<strong>1</strong>,0,0],\n [0,0,0,0,0,0,0,0,0,0,<strong>1</strong>,0,0],\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\n [0,0,0,0,0,0,0,1,1,0,0,0,0]]\n</pre>\n\n<p>对于上面这个给定矩阵应返回&nbsp;<code>6</code>。注意答案不应该是11，因为岛屿只能包含水平或垂直的四个方向的&lsquo;1&rsquo;。</p>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n[[0,0,0,0,0,0,0,0]]</pre>\n\n<p>对于上面这个给定的矩阵, 返回&nbsp;<code>0</code>。</p>\n\n<p><strong>注意:&nbsp;</strong>给定的矩阵<code>grid</code>&nbsp;的长度和宽度都不超过 50。</p>\n","repeated-string-match":"<p>给定两个字符串 A 和 B, 寻找重复叠加字符串A的最小次数，使得字符串B成为叠加后的字符串A的子串，如果不存在则返回 -1。</p>\n\n<p>举个例子，A = &quot;abcd&quot;，B = &quot;cdabcdab&quot;。</p>\n\n<p>答案为 3，&nbsp;因为 A 重复叠加三遍后为&nbsp;&ldquo;abcdabcdabcd&rdquo;，此时 B 是其子串；A 重复叠加两遍后为&quot;abcdabcd&quot;，B 并不是其子串。</p>\n\n<p><strong>注意:</strong></p>\n\n<p>&nbsp;<code>A</code>&nbsp;与&nbsp;<code>B</code>&nbsp;字符串的长度在1和10000区间范围内。</p>\n","degree-of-an-array":"<p>给定一个非空且只包含非负数的整数数组&nbsp;<code>nums</code>, 数组的度的定义是指数组里任一元素出现频数的最大值。</p>\n\n<p>你的任务是找到与&nbsp;<code>nums</code>&nbsp;拥有相同大小的度的最短连续子数组，返回其长度。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1, 2, 2, 3, 1]\n<strong>输出:</strong> 2\n<strong>解释:</strong> \n输入数组的度是2，因为元素1和2的出现频数最大，均为2.\n连续子数组里面拥有相同度的有如下所示:\n[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]\n最短连续子数组[2, 2]的长度为2，所以返回2.\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,2,2,3,1,4,2]\n<strong>输出:</strong> 6\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>nums.length</code>&nbsp;在1到50,000区间范围内。</li>\n\t<li><code>nums[i]</code>&nbsp;是一个在0到49,999范围内的整数。</li>\n</ul>\n","binary-number-with-alternating-bits":"<p>给定一个正整数，检查他是否为交替位二进制数：换句话说，就是他的二进制数相邻的两个位数永不相等。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> 5\n<strong>输出:</strong> True\n<strong>解释:</strong>\n5的二进制数是: 101\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> 7\n<strong>输出:</strong> False\n<strong>解释:</strong>\n7的二进制数是: 111\n</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre>\n<strong>输入:</strong> 11\n<strong>输出:</strong> False\n<strong>解释:</strong>\n11的二进制数是: 1011\n</pre>\n\n<p><strong>&nbsp;示例 4:</strong></p>\n\n<pre>\n<strong>输入:</strong> 10\n<strong>输出:</strong> True\n<strong>解释:</strong>\n10的二进制数是: 1010\n</pre>\n","daily-temperatures":"<p>根据每日 <code>气温</code> 列表，请重新生成一个列表，对应位置的输入是你需要再等待多久温度才会升高的天数。如果之后都不会升高，请输入&nbsp;<code>0</code> 来代替。</p>\n\n<p>例如，给定一个列表&nbsp;<code>temperatures = [73, 74, 75, 71, 69, 72, 76, 73]</code>，你的输出应该是&nbsp;<code>[1, 1, 4, 2, 1, 1, 0, 0]</code>。</p>\n\n<p><strong>提示：</strong><code>气温</code> 列表长度的范围是&nbsp;<code>[1, 30000]</code>。每个气温的值的都是&nbsp;<code>[30, 100]</code>&nbsp;范围内的整数。</p>\n","prefix-and-suffix-search":"<p>给定多个&nbsp;<code>words</code>，<code>words[i]</code>&nbsp;的权重为&nbsp;<code>i</code>&nbsp;。</p>\n\n<p>设计一个类&nbsp;<code>WordFilter</code>&nbsp;实现函数<code>WordFilter.f(String prefix, String suffix)</code>。这个函数将返回具有前缀&nbsp;<code>prefix</code>&nbsp;和后缀<code>suffix</code>&nbsp;的词的最大权重。如果没有这样的词，返回 -1。</p>\n\n<p><strong>例子:</strong></p>\n\n<pre>\n<strong>输入:</strong>\nWordFilter([&quot;apple&quot;])\nWordFilter.f(&quot;a&quot;, &quot;e&quot;) // 返回 0\nWordFilter.f(&quot;b&quot;, &quot;&quot;) // 返回 -1\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li><code>words</code>的长度在<code>[1, 15000]</code>之间。</li>\n\t<li>对于每个测试用例，最多会有<code>words.length</code>次对<code>WordFilter.f</code>的调用。</li>\n\t<li><code>words[i]</code>的长度在<code>[1, 10]</code>之间。</li>\n\t<li><code>prefix, suffix</code>的长度在<code>[0, 10]</code>之前。</li>\n\t<li><code>words[i]</code>和<code>prefix, suffix</code>只包含小写字母。</li>\n</ol>\n","knight-probability-in-chessboard":"<p>已知一个&nbsp;<code>N</code>x<code>N</code>&nbsp;的国际象棋棋盘，棋盘的行号和列号都是从 0 开始。即最左上角的格子记为&nbsp;<code>(0, 0)</code>，最右下角的记为&nbsp;<code>(N-1, N-1)</code>。&nbsp;</p>\n\n<p>现有一个 &ldquo;马&rdquo;（也译作 &ldquo;骑士&rdquo;）位于&nbsp;<code>(r, c)</code>&nbsp;，并打算进行&nbsp;<code>K</code> 次移动。&nbsp;</p>\n\n<p>如下图所示，国际象棋的 &ldquo;马&rdquo; 每一步先沿水平或垂直方向移动 2 个格子，然后向与之相垂直的方向再移动 1 个格子，共有 8 个可选的位置。</p>\n\n<p>&nbsp;</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/knight.png\" style=\"height: 200px; width: 200px;\"></p>\n\n<p>&nbsp;</p>\n\n<p>现在 &ldquo;马&rdquo; 每一步都从可选的位置（包括棋盘外部的）中独立随机地选择一个进行移动，直到移动了&nbsp;<code>K</code>&nbsp;次或跳到了棋盘外面。</p>\n\n<p>求移动结束后，&ldquo;马&rdquo; 仍留在棋盘上的概率。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入:</strong> 3, 2, 0, 0\n<strong>输出:</strong> 0.0625\n<strong>解释:</strong> \n输入的数据依次为 N, K, r, c\n第 1 步时，有且只有 2 种走法令 &ldquo;马&rdquo; 可以留在棋盘上（跳到（1,2）或（2,1））。对于以上的两种情况，各自在第2步均有且只有2种走法令 &ldquo;马&rdquo; 仍然留在棋盘上。\n所以 &ldquo;马&rdquo; 在结束后仍在棋盘上的概率为 0.0625。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li><code>N</code> 的取值范围为 [1, 25]</li>\n\t<li><code>K</code>&nbsp;的取值范围为 [0, 100]</li>\n\t<li>开始时，&ldquo;马&rdquo; 总是位于棋盘上</li>\n</ul>\n","number-of-distinct-islands":null,"to-lower-case":"<p>实现函数 ToLowerCase()，该函数接收一个字符串参数 str，并将该字符串中的大写字母转换成小写字母，之后返回新的字符串。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入: </strong>&quot;Hello&quot;\n<strong>输出: </strong>&quot;hello&quot;</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入: </strong>&quot;here&quot;\n<strong>输出: </strong>&quot;here&quot;</pre>\n\n<p><strong>示例</strong><strong>&nbsp;3：</strong></p>\n\n<pre>\n<strong>输入: </strong>&quot;LOVELY&quot;\n<strong>输出: </strong>&quot;lovely&quot;\n</pre>\n","longest-univalue-path":"<p>给定一个二叉树，找到最长的路径，这个路径中的每个节点具有相同值。 这条路径可以经过也可以不经过根节点。</p>\n\n<p><strong>注意</strong>：两个节点之间的路径长度由它们之间的边数表示。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<p>输入:</p>\n\n<pre>\n              5\n             / \\\n            4   5\n           / \\   \\\n          1   1   5\n</pre>\n\n<p>输出:</p>\n\n<pre>\n2\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<p>输入:</p>\n\n<pre>\n              1\n             / \\\n            4   5\n           / \\   \\\n          4   4   5\n</pre>\n\n<p>输出:</p>\n\n<pre>\n2\n</pre>\n\n<p><strong>注意:</strong> 给定的二叉树不超过10000个结点。&nbsp;树的高度不超过1000。</p>\n","accounts-merge":"<p>给定一个列表 <code>accounts</code>，每个元素 <code>accounts[i]</code>&nbsp;是一个字符串列表，其中第一个元素 <code>accounts[i][0]</code>&nbsp;是&nbsp;<em>名称 (name)</em>，其余元素是 <em>emails </em>表示该帐户的邮箱地址。</p>\n\n<p>现在，我们想合并这些帐户。如果两个帐户都有一些共同的邮件地址，则两个帐户必定属于同一个人。请注意，即使两个帐户具有相同的名称，它们也可能属于不同的人，因为人们可能具有相同的名称。一个人最初可以拥有任意数量的帐户，但其所有帐户都具有相同的名称。</p>\n\n<p>合并帐户后，按以下格式返回帐户：每个帐户的第一个元素是名称，其余元素是按顺序排列的邮箱地址。accounts 本身可以以任意顺序返回。</p>\n\n<p><strong>例子 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \naccounts = [[&quot;John&quot;, &quot;johnsmith@mail.com&quot;, &quot;john00@mail.com&quot;], [&quot;John&quot;, &quot;johnnybravo@mail.com&quot;], [&quot;John&quot;, &quot;johnsmith@mail.com&quot;, &quot;john_newyork@mail.com&quot;], [&quot;Mary&quot;, &quot;mary@mail.com&quot;]]\n<strong>Output:</strong> [[&quot;John&quot;, &#39;john00@mail.com&#39;, &#39;john_newyork@mail.com&#39;, &#39;johnsmith@mail.com&#39;],  [&quot;John&quot;, &quot;johnnybravo@mail.com&quot;], [&quot;Mary&quot;, &quot;mary@mail.com&quot;]]\n<strong>Explanation:</strong> \n  第一个和第三个 John 是同一个人，因为他们有共同的电子邮件 &quot;johnsmith@mail.com&quot;。 \n  第二个 John 和 Mary 是不同的人，因为他们的电子邮件地址没有被其他帐户使用。\n  我们可以以任何顺序返回这些列表，例如答案[[&#39;Mary&#39;，&#39;mary@mail.com&#39;]，[&#39;John&#39;，&#39;johnnybravo@mail.com&#39;]，\n  [&#39;John&#39;，&#39;john00@mail.com&#39;，&#39;john_newyork@mail.com&#39;，&#39;johnsmith@mail.com&#39;]]仍然会被接受。\n\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li><code>accounts</code>的长度将在<code>[1，1000]</code>的范围内。</li>\n\t<li><code>accounts[i]</code>的长度将在<code>[1，10]</code>的范围内。</li>\n\t<li><code>accounts[i][j]</code>的长度将在<code>[1，30]</code>的范围内。</li>\n</ul>\n","longest-word-in-dictionary":"<p>给出一个字符串数组<code>words</code>组成的一本英语词典。从中找出最长的一个单词，该单词是由<code>words</code>词典中其他单词逐步添加一个字母组成。若其中有多个可行的答案，则返回答案中字典序最小的单词。</p>\n\n<p>若无答案，则返回空字符串。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> \nwords = [&quot;w&quot;,&quot;wo&quot;,&quot;wor&quot;,&quot;worl&quot;, &quot;world&quot;]\n<strong>输出:</strong> &quot;world&quot;\n<strong>解释:</strong> \n单词&quot;world&quot;可由&quot;w&quot;, &quot;wo&quot;, &quot;wor&quot;, 和 &quot;worl&quot;添加一个字母组成。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> \nwords = [&quot;a&quot;, &quot;banana&quot;, &quot;app&quot;, &quot;appl&quot;, &quot;ap&quot;, &quot;apply&quot;, &quot;apple&quot;]\n<strong>输出:</strong> &quot;apple&quot;\n<strong>解释:</strong> \n&quot;apply&quot;和&quot;apple&quot;都能由词典中的单词组成。但是&quot;apple&quot;得字典序小于&quot;apply&quot;。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li>所有输入的字符串都只包含小写字母。</li>\n\t<li><code>words</code>数组长度范围为<code>[1,1000]</code>。</li>\n\t<li><code>words[i]</code>的长度范围为<code>[1,30]</code>。</li>\n</ul>\n","remove-comments":"<p>给一个 C++ 程序，删除程序中的注释。这个程序<code>source</code>是一个数组，其中<code>source[i]</code>表示第<code>i</code>行源码。&nbsp;这表示每行源码由<code>\\n</code>分隔。</p>\n\n<p>在 C++ 中有两种注释风格，行内注释和块注释。</p>\n\n<p>字符串<code>//</code> 表示行注释，表示<code>//</code>和其右侧的其余字符应该被忽略。</p>\n\n<p>字符串<code>/*</code> 表示一个块注释，它表示直到<code>*/</code>的下一个（非重叠）出现的所有字符都应该被忽略。（阅读顺序为从左到右）非重叠是指，字符串<code>/*/</code>并没有结束块注释，因为注释的结尾与开头相重叠。</p>\n\n<p>第一个有效注释优先于其他注释：如果字符串<code>//</code>出现在块注释中会被忽略。 同样，如果字符串<code>/*</code>出现在行或块注释中也会被忽略。</p>\n\n<p>如果一行在删除注释之后变为空字符串，那么<strong>不要</strong>输出该行。即，答案列表中的每个字符串都是非空的。</p>\n\n<p>样例中<strong>没有</strong>控制字符，单引号或双引号字符。比如，<code>source = &quot;string s = &quot;/* Not a comment. */&quot;;&quot;</code> 不会出现在测试样例里。（此外，没有其他内容（如定义或宏）会干扰注释。）</p>\n\n<p>我们保证每一个块注释最终都会被闭合， 所以在行或块注释之外的<code>/*</code>总是开始新的注释。</p>\n\n<p>最后，隐式换行符<strong>可以</strong>通过块注释删除。 有关详细信息，请参阅下面的示例。</p>\n\n<p>从源代码中删除注释后，需要以相同的格式返回源代码。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>\n<strong>输入:</strong> \nsource = [&quot;/*Test program */&quot;, &quot;int main()&quot;, &quot;{ &quot;, &quot;  // variable declaration &quot;, &quot;int a, b, c;&quot;, &quot;/* This is a test&quot;, &quot;   multiline  &quot;, &quot;   comment for &quot;, &quot;   testing */&quot;, &quot;a = b + c;&quot;, &quot;}&quot;]\n\n示例代码可以编排成这样:\n/*Test program */\nint main()\n{ \n  // variable declaration \nint a, b, c;\n/* This is a test\n   multiline  \n   comment for \n   testing */\na = b + c;\n}\n\n<strong>输出:</strong> [&quot;int main()&quot;,&quot;{ &quot;,&quot;  &quot;,&quot;int a, b, c;&quot;,&quot;a = b + c;&quot;,&quot;}&quot;]\n\n编排后:\nint main()\n{ \n  \nint a, b, c;\na = b + c;\n}\n\n<strong>解释:</strong> \n第 1 行和第 6-9 行的字符串 /* 表示块注释。第 4 行的字符串 // 表示行注释。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> \nsource = [&quot;a/*comment&quot;, &quot;line&quot;, &quot;more_comment*/b&quot;]\n<strong>输出:</strong> [&quot;ab&quot;]\n<strong>解释:</strong> 原始的 source 字符串是 &quot;a/*comment<strong>\\n</strong>line<strong>\\n</strong>more_comment*/b&quot;, 其中我们用粗体显示了换行符。删除注释后，隐含的换行符被删除，留下字符串 &quot;ab&quot; 用换行符分隔成数组时就是 [&quot;ab&quot;].\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>source</code>的长度范围为<code>[1, 100]</code>.</li>\n\t<li><code>source[i]</code>的长度范围为<code>[0, 80]</code>.</li>\n\t<li>每个块注释都会被闭合。</li>\n\t<li>给定的源码中不会有单引号、双引号或其他控制字符。</li>\n</ul>\n","longest-continuous-increasing-subsequence":"<p>给定一个未经排序的整数数组，找到最长且<strong>连续</strong>的的递增序列。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,3,5,4,7]\n<strong>输出:</strong> 3\n<strong>解释:</strong> 最长连续递增序列是 [1,3,5], 长度为3。\n尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为5和7在原数组里被4隔开。 \n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> [2,2,2,2,2]\n<strong>输出:</strong> 1\n<strong>解释:</strong> 最长连续递增序列是 [2], 长度为1。\n</pre>\n\n<p><strong>注意：</strong>数组长度不会超过10000。</p>\n","second-minimum-node-in-a-binary-tree":"<p>给定一个非空特殊的二叉树，每个节点都是正数，并且每个节点的子节点数量只能为&nbsp;<code>2</code>&nbsp;或&nbsp;<code>0</code>。如果一个节点有两个子节点的话，那么这个节点的值不大于它的子节点的值。&nbsp;</p>\n\n<p>给出这样的一个二叉树，你需要输出所有节点中的<strong>第二小的值。</strong>如果第二小的值不存在的话，输出 -1 <strong>。</strong></p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n    2\n   / \\\n  2   5\n     / \\\n    5   7\n\n<strong>输出:</strong> 5\n<strong>说明:</strong> 最小的值是 2 ，第二小的值是 5 。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n    2\n   / \\\n  2   2\n\n<strong>输出:</strong> -1\n<strong>说明:</strong> 最小的值是 2, 但是不存在第二小的值。\n</pre>\n","maximum-swap":"<p>给定一个非负整数，你<strong>至多</strong>可以交换一次数字中的任意两位。返回你能得到的最大值。</p>\n\n<p><strong>示例 1 :</strong></p>\n\n<pre>\n<strong>输入:</strong> 2736\n<strong>输出:</strong> 7236\n<strong>解释:</strong> 交换数字2和数字7。\n</pre>\n\n<p><strong>示例 2 :</strong></p>\n\n<pre>\n<strong>输入:</strong> 9973\n<strong>输出:</strong> 9973\n<strong>解释:</strong> 不需要交换。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>给定数字的范围是&nbsp;[0, 10<sup>8</sup>]</li>\n</ol>\n","baseball-game":"<p>你现在是棒球比赛记录员。<br>\n给定一个字符串列表，每个字符串可以是以下四种类型之一：<br>\n1.<code>整数</code>（一轮的得分）：直接表示您在本轮中获得的积分数。<br>\n2. <code>&quot;+&quot;</code>（一轮的得分）：表示本轮获得的得分是前两轮<code>有效</code>&nbsp;回合得分的总和。<br>\n3. <code>&quot;D&quot;</code>（一轮的得分）：表示本轮获得的得分是前一轮<code>有效</code>&nbsp;回合得分的两倍。<br>\n4. <code>&quot;C&quot;</code>（一个操作，这不是一个回合的分数）：表示您获得的最后一个<code>有效</code>&nbsp;回合的分数是无效的，应该被移除。<br>\n<br>\n每一轮的操作都是永久性的，可能会对前一轮和后一轮产生影响。<br>\n你需要返回你在所有回合中得分的总和。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [&quot;5&quot;,&quot;2&quot;,&quot;C&quot;,&quot;D&quot;,&quot;+&quot;]\n<strong>输出:</strong> 30\n<strong>解释:</strong> \n第1轮：你可以得到5分。总和是：5。\n第2轮：你可以得到2分。总和是：7。\n操作1：第2轮的数据无效。总和是：5。\n第3轮：你可以得到10分（第2轮的数据已被删除）。总数是：15。\n第4轮：你可以得到5 + 10 = 15分。总数是：30。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [&quot;5&quot;,&quot;-2&quot;,&quot;4&quot;,&quot;C&quot;,&quot;D&quot;,&quot;9&quot;,&quot;+&quot;,&quot;+&quot;]\n<strong>输出:</strong> 27\n<strong>解释:</strong> \n第1轮：你可以得到5分。总和是：5。\n第2轮：你可以得到-2分。总数是：3。\n第3轮：你可以得到4分。总和是：7。\n操作1：第3轮的数据无效。总数是：3。\n第4轮：你可以得到-4分（第三轮的数据已被删除）。总和是：-1。\n第5轮：你可以得到9分。总数是：8。\n第6轮：你可以得到-4 + 9 = 5分。总数是13。\n第7轮：你可以得到9 + 5 = 14分。总数是27。\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li>输入列表的大小将介于1和1000之间。</li>\n\t<li>列表中的每个整数都将介于-30000和30000之间。</li>\n</ul>\n","dota2-senate":"<p>&nbsp;Dota2 的世界里有两个阵营：<code>Radiant</code>(天辉)和&nbsp;<code>Dire</code>(夜魇)</p>\n\n<p>Dota2 参议院由来自两派的参议员组成。现在参议院希望对一个 Dota2 游戏里的改变作出决定。他们以一个基于轮为过程的投票进行。在每一轮中，每一位参议员都可以行使两项权利中的<code><strong>一</strong></code>项：</p>\n\n<ol>\n\t<li>\n\t<p><code>禁止一名参议员的权利</code>：</p>\n\n\t<p>参议员可以让另一位参议员在这一轮和随后的几轮中丧失<strong>所有的权利</strong>。</p>\n\t</li>\n\t<li>\n\t<p><br />\n\t<code>宣布胜利</code>：如果参议员发现有权利投票的参议员都是<strong>同一个阵营的</strong>，他可以宣布胜利并决定在游戏中的有关变化。</p>\n\t</li>\n</ol>\n\n<p>给定一个字符串代表每个参议员的阵营。字母&ldquo;R&rdquo;和&ldquo;D&rdquo;分别代表了<code>Radiant</code>(天辉)和&nbsp;<code>Dire</code>(夜魇)。然后，如果有 n 个参议员，给定字符串的大小将是<code>n</code>。</p>\n\n<p>以轮为基础的过程从给定顺序的第一个参议员开始到最后一个参议员结束。这一过程将持续到投票结束。所有失去权利的参议员将在过程中被跳过。</p>\n\n<p>假设每一位参议员都足够聪明，会为自己的政党做出最好的策略，你需要预测哪一方最终会宣布胜利并在 Dota2 游戏中决定改变。输出应该是&nbsp;<code>Radiant</code>&nbsp;或&nbsp;<code>Dire</code>。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;RD&quot;\n<strong>输出:</strong> &quot;Radiant&quot;\n<strong>解释:  </strong><code>第一个参议员来自  Radiant 阵营并且他可以使用第一项权利让第二个参议员失去权力，因此第二个参议员将被跳过因为他没有任何权利。然后在第二轮的时候，第一个参议员可以宣布胜利，因为他是唯一一个有投票权的人</code>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;RDD&quot;\n<strong>输出:</strong> &quot;Dire&quot;\n<strong>解释:</strong> \n第一轮中,第一个<code>来自 Radiant 阵营的</code>参议员可以使用第一项权利禁止第二个参议员的权利\n第二个<code>来自 Dire 阵营的</code>参议员会被跳过因为他的权利被禁止\n第三个<code>来自 Dire 阵营的</code>参议员可以使用他的第一项权利禁止第一个参议员的权利\n因此在第二轮只剩下第三个参议员拥有投票的权利,于是他可以宣布胜利\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>给定字符串的长度在 [1, 10,000] 之间.</li>\n</ol>\n\n<p>&nbsp;</p>\n","maximum-width-of-binary-tree":"<p>给定一个二叉树，编写一个函数来获取这个树的最大宽度。树的宽度是所有层中的最大宽度。这个二叉树与<strong>满二叉树（full binary tree）</strong>结构相同，但一些节点为空。</p>\n\n<p>每一层的宽度被定义为两个端点（该层最左和最右的非空节点，两端点间的<code>null</code>节点也计入长度）之间的长度。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n\n           1\n         /   \\\n        3     2\n       / \\     \\  \n      5   3     9 \n\n<strong>输出:</strong> 4\n<strong>解释:</strong> 最大值出现在树的第 3 层，宽度为 4 (5,3,null,9)。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n\n          1\n         /  \n        3    \n       / \\       \n      5   3     \n\n<strong>输出:</strong> 2\n<strong>解释:</strong> 最大值出现在树的第 3 层，宽度为 2 (5,3)。\n</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n\n          1\n         / \\\n        3   2 \n       /        \n      5      \n\n<strong>输出:</strong> 2\n<strong>解释:</strong> 最大值出现在树的第 2 层，宽度为 2 (3,2)。\n</pre>\n\n<p><strong>示例 4:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n\n          1\n         / \\\n        3   2\n       /     \\  \n      5       9 \n     /         \\\n    6           7\n<strong>输出:</strong> 8\n<strong>解释:</strong> 最大值出现在树的第 4 层，宽度为 8 (6,null,null,null,null,null,null,7)。\n</pre>\n\n<p><strong>注意:</strong> 答案在32位有符号整数的表示范围内。</p>\n","implement-magic-dictionary":"<p>实现一个带有<code>buildDict</code>, 以及&nbsp;<code>search</code>方法的魔法字典。</p>\n\n<p>对于<code>buildDict</code>方法，你将被给定一串不重复的单词来构建一个字典。</p>\n\n<p>对于<code>search</code>方法，你将被给定一个单词，并且判定能否只将这个单词中<strong>一个</strong>字母换成另一个字母，使得所形成的新单词存在于你构建的字典中。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\nInput: buildDict([&quot;hello&quot;, &quot;leetcode&quot;]), Output: Null\nInput: search(&quot;hello&quot;), Output: False\nInput: search(&quot;hhllo&quot;), Output: True\nInput: search(&quot;hell&quot;), Output: False\nInput: search(&quot;leetcoded&quot;), Output: False\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>你可以假设所有输入都是小写字母&nbsp;<code>a-z</code>。</li>\n\t<li>为了便于竞赛，测试所用的数据量很小。你可以在竞赛结束后，考虑更高效的算法。</li>\n\t<li>请记住<strong>重置</strong>MagicDictionary类中声明的类变量，因为静态/类变量会在多个测试用例中保留。 请参阅<a href=\"http://leetcode.com/faq/#different-output\">这里</a>了解更多详情。</li>\n</ol>\n","redundant-connection-ii":"<p>在本问题中，有根树指满足以下条件的<strong>有向</strong>图。该树只有一个根节点，所有其他节点都是该根节点的后继。每一个节点只有一个父节点，除了根节点没有父节点。</p>\n\n<p>输入一个有向图，该图由一个有着N个节点 (节点值不重复1, 2, ..., N) 的树及一条附加的边构成。附加的边的两个顶点包含在1到N中间，这条附加的边不属于树中已存在的边。</p>\n\n<p>结果图是一个以<code>边</code>组成的二维数组。 每一个<code>边</code> 的元素是一对 <code>[u, v]</code>，用以表示<strong>有向</strong>图中连接顶点 <code>u</code> and <code>v</code>和顶点的边，其中父节点<code>u</code>是子节点<code>v</code>的一个父节点。</p>\n\n<p>返回一条能删除的边，使得剩下的图是有N个节点的有根树。若有多个答案，返回最后出现在给定二维数组的答案。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [[1,2], [1,3], [2,3]]\n<strong>输出:</strong> [2,3]\n<strong>解释:</strong> 给定的有向图如下:\n  1\n / \\\nv   v\n2--&gt;3\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> [[1,2], [2,3], [3,4], [4,1], [1,5]]\n<strong>输出:</strong> [4,1]\n<strong>解释:</strong> 给定的有向图如下:\n5 &lt;- 1 -&gt; 2\n     ^    |\n     |    v\n     4 &lt;- 3\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li>二维数组大小的在3到1000范围内。</li>\n\t<li>二维数组中的每个整数在1到N之间，其中 N 是二维数组的大小。</li>\n</ul>\n","robot-return-to-origin":"<p>在二维平面上，有一个机器人从原点 (0, 0) 开始。给出它的移动顺序，判断这个机器人在完成移动后是否在<strong>&nbsp;(0, 0) 处结束</strong>。</p>\n\n<p>移动顺序由字符串表示。字符 move[i] 表示其第 i 次移动。机器人的有效动作有&nbsp;<code>R</code>（右），<code>L</code>（左），<code>U</code>（上）和 <code>D</code>（下）。如果机器人在完成所有动作后返回原点，则返回 true。否则，返回 false。</p>\n\n<p><strong>注意：</strong>机器人&ldquo;面朝&rdquo;的方向无关紧要。 &ldquo;R&rdquo; 将始终使机器人向右移动一次，&ldquo;L&rdquo; 将始终向左移动等。此外，假设每次移动机器人的移动幅度相同。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> &quot;UD&quot;\n<strong>输出:</strong> true\n<strong>解释：</strong>机器人向上移动一次，然后向下移动一次。所有动作都具有相同的幅度，因此它最终回到它开始的原点。因此，我们返回 true。</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> &quot;LL&quot;\n<strong>输出:</strong> false\n<strong>解释：</strong>机器人向左移动两次。它最终位于原点的左侧，距原点有两次 &ldquo;移动&rdquo; 的距离。我们返回 false，因为它在移动结束时没有返回原点。</pre>\n","number-of-longest-increasing-subsequence":"<p>给定一个未排序的整数数组，找到最长递增子序列的个数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,3,5,4,7]\n<strong>输出:</strong> 2\n<strong>解释:</strong> 有两个最长递增子序列，分别是 [1, 3, 4, 7] 和[1, 3, 5, 7]。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> [2,2,2,2,2]\n<strong>输出:</strong> 5\n<strong>解释:</strong> 最长递增子序列的长度是1，并且存在5个子序列的长度为1，因此输出5。\n</pre>\n\n<p><strong>注意:</strong>&nbsp;给定的数组长度不超过 2000 并且结果一定是32位有符号整数。</p>\n","next-closest-time":null,"strange-printer":"<p>有台奇怪的打印机有以下两个特殊要求：</p>\n\n<ol>\n\t<li>打印机每次只能打印同一个字符序列。</li>\n\t<li>每次可以在任意起始和结束位置打印新字符，并且会覆盖掉原来已有的字符。</li>\n</ol>\n\n<p>给定一个只包含小写英文字母的字符串，你的任务是计算这个打印机打印它需要的最少次数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;aaabbb&quot;\n<strong>输出:</strong> 2\n<strong>解释:</strong> 首先打印 &quot;aaa&quot; 然后打印 &quot;bbb&quot;。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;aba&quot;\n<strong>输出:</strong> 2\n<strong>解释:</strong> 首先打印 &quot;aaa&quot; 然后在第二个位置打印 &quot;b&quot; 覆盖掉原来的字符 &#39;a&#39;。</pre>\n\n<p><strong>提示</strong>: 输入字符串的长度不会超过 100。</p>\n","map-sum-pairs":"<p>实现一个 MapSum 类里的两个方法，<code>insert</code>&nbsp;和&nbsp;<code>sum</code>。</p>\n\n<p>对于方法&nbsp;<code>insert</code>，你将得到一对（字符串，整数）的键值对。字符串表示键，整数表示值。如果键已经存在，那么原来的键值对将被替代成新的键值对。</p>\n\n<p>对于方法 <code>sum</code>，你将得到一个表示前缀的字符串，你需要返回所有以该前缀开头的键的值的总和。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>输入: insert(&quot;apple&quot;, 3), 输出: Null\n输入: sum(&quot;ap&quot;), 输出: 3\n输入: insert(&quot;app&quot;, 2), 输出: Null\n输入: sum(&quot;ap&quot;), 输出: 5\n</pre>\n","image-smoother":"<p>包含整数的二维矩阵 M 表示一个图片的灰度。你需要设计一个平滑器来让每一个单元的灰度成为平均灰度&nbsp;(向下舍入) ，平均灰度的计算是周围的8个单元和它本身的值求平均，如果周围的单元格不足八个，则尽可能多的利用它们。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong>\n[[1,1,1],\n [1,0,1],\n [1,1,1]]\n<strong>输出:</strong>\n[[0, 0, 0],\n [0, 0, 0],\n [0, 0, 0]]\n<strong>解释:</strong>\n对于点 (0,0), (0,2), (2,0), (2,2): 平均(3/4) = 平均(0.75) = 0\n对于点 (0,1), (1,0), (1,2), (2,1): 平均(5/6) = 平均(0.83333333) = 0\n对于点 (1,1): 平均(8/9) = 平均(0.88888889) = 0\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>给定矩阵中的整数范围为 [0, 255]。</li>\n\t<li>矩阵的长和宽的范围均为&nbsp;[1, 150]。</li>\n</ol>\n","redundant-connection":"<p>在本问题中, 树指的是一个连通且无环的<strong>无向</strong>图。</p>\n\n<p>输入一个图，该图由一个有着N个节点 (节点值不重复1, 2, ..., N) 的树及一条附加的边构成。附加的边的两个顶点包含在1到N中间，这条附加的边不属于树中已存在的边。</p>\n\n<p>结果图是一个以<code>边</code>组成的二维数组。每一个<code>边</code>的元素是一对<code>[u, v]</code>&nbsp;，满足&nbsp;<code>u &lt; v</code>，表示连接顶点<code>u</code>&nbsp;和<code>v</code>的<strong>无向</strong>图的边。</p>\n\n<p>返回一条可以删去的边，使得结果图是一个有着N个节点的树。如果有多个答案，则返回二维数组中最后出现的边。答案边&nbsp;<code>[u, v]</code> 应满足相同的格式&nbsp;<code>u &lt; v</code>。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入:</strong> [[1,2], [1,3], [2,3]]\n<strong>输出:</strong> [2,3]\n<strong>解释:</strong> 给定的无向图为:\n  1\n / \\\n2 - 3\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入:</strong> [[1,2], [2,3], [3,4], [1,4], [1,5]]\n<strong>输出:</strong> [1,4]\n<strong>解释:</strong> 给定的无向图为:\n5 - 1 - 2\n    |   |\n    4 - 3\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li>输入的二维数组大小在 3 到 1000。</li>\n\t<li>二维数组中的整数在1到N之间，其中N是输入数组的大小。</li>\n</ul>\n\n<p><strong>更新(2017-09-26):</strong><br>\n我们已经重新检查了问题描述及测试用例，明确图是<em><strong>无向&nbsp;</strong></em>图。对于有向图详见<strong><a href=\"https://leetcodechina.com/problems/redundant-connection-ii/description/\">冗余连接II</a>。</strong>对于造成任何不便，我们深感歉意。</p>\n","design-log-storage-system":null,"palindromic-substrings":"<p>给定一个字符串，你的任务是计算这个字符串中有多少个回文子串。</p>\n\n<p>具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被计为是不同的子串。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;abc&quot;\n<strong>输出:</strong> 3\n<strong>解释:</strong> 三个回文子串: &quot;a&quot;, &quot;b&quot;, &quot;c&quot;.\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;aaa&quot;\n<strong>输出:</strong> 6\n<strong>说明:</strong> 6个回文子串: &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;aa&quot;, &quot;aa&quot;, &quot;aaa&quot;.\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>输入的字符串长度不会超过1000。</li>\n</ol>\n","maximum-length-of-pair-chain":"<p>给出&nbsp;<code>n</code>&nbsp;个数对。&nbsp;在每一个数对中，第一个数字总是比第二个数字小。</p>\n\n<p>现在，我们定义一种跟随关系，当且仅当&nbsp;<code>b &lt; c</code>&nbsp;时，数对<code>(c, d)</code>&nbsp;才可以跟在&nbsp;<code>(a, b)</code>&nbsp;后面。我们用这种形式来构造一个数对链。</p>\n\n<p>给定一个对数集合，找出能够形成的最长数对链的长度。你不需要用到所有的数对，你可以以任何顺序选择其中的一些数对来构造。</p>\n\n<p><strong>示例 :</strong></p>\n\n<pre>\n<strong>输入:</strong> [[1,2], [2,3], [3,4]]\n<strong>输出:</strong> 2\n<strong>解释:</strong> 最长的数对链是 [1,2] -&gt; [3,4]\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li>给出数对的个数在&nbsp;[1, 1000] 范围内。</li>\n</ol>\n","path-sum-iv":null,"exclusive-time-of-functions":"<p>给出一个非抢占单线程CPU的 <strong>n </strong>个函数运行日志，找到函数的独占时间。</p>\n\n<p>每个函数都有一个唯一的 Id，从 <strong>0</strong> 到<strong> n-1</strong>，函数可能会递归调用或者被其他函数调用。</p>\n\n<p>日志是具有以下格式的字符串：<code>function_id：start_or_end：timestamp</code>。例如：<code>&quot;0:start:0&quot;</code>&nbsp;表示函数 0 从 0 时刻开始运行。<code>&quot;0:end:0&quot;</code>&nbsp;表示函数 0 在 0 时刻结束。</p>\n\n<p>函数的独占时间定义是在该方法中花费的时间，调用其他函数花费的时间不算该函数的独占时间。你需要根据函数的 Id 有序地返回每个函数的独占时间。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong>\nn = 2\nlogs = \n[&quot;0:start:0&quot;,\n &quot;1:start:2&quot;,\n &quot;1:end:5&quot;,\n &quot;0:end:6&quot;]\n<strong>输出:</strong>[3, 4]\n<strong>说明：</strong>\n函数 0 在时刻 0 开始，在执行了  2个时间单位结束于时刻 1。\n现在函数 0 调用函数 1，函数 1 在时刻 2 开始，执行 4 个时间单位后结束于时刻 5。\n函数 0 再次在时刻 6 开始执行，并在时刻 6 结束运行，从而执行了 1 个时间单位。\n所以函数 0 总共的执行了 2 +1 =3 个时间单位，函数 1 总共执行了 4 个时间单位。\n</pre>\n\n<p><strong>说明：</strong></p>\n\n<ol>\n\t<li>输入的日志会根据时间戳排序，而不是根据日志Id排序。</li>\n\t<li>你的输出会根据函数Id排序，也就意味着你的输出数组中序号为 0 的元素相当于函数 0 的执行时间。</li>\n\t<li>两个函数不会在同时开始或结束。</li>\n\t<li>函数允许被递归调用，直到运行结束。</li>\n\t<li>1 &lt;= n &lt;= 100</li>\n</ol>\n","24-game":"<p>你有 4 张写有 1 到 9 数字的牌。你需要判断是否能通过&nbsp;<code>*</code>，<code>/</code>，<code>+</code>，<code>-</code>，<code>(</code>，<code>)</code>&nbsp;的运算得到 24。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [4, 1, 8, 7]\n<strong>输出:</strong> True\n<strong>解释:</strong> (8-4) * (7-1) = 24\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1, 2, 1, 2]\n<strong>输出:</strong> False\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>除法运算符&nbsp;<code>/</code>&nbsp;表示实数除法，而不是整数除法。例如 4 / (1 - 2/3) = 12 。</li>\n\t<li>每个运算符对两个数进行运算。特别是我们不能用&nbsp;<code>-</code>&nbsp;作为一元运算符。例如，<code>[1, 1, 1, 1]</code>&nbsp;作为输入时，表达式&nbsp;<code>-1 - 1 - 1 - 1</code>&nbsp;是不允许的。</li>\n\t<li>你不能将数字连接在一起。例如，输入为&nbsp;<code>[1, 2, 1, 2]</code>&nbsp;时，不能写成 12 + 12 。</li>\n</ol>\n","trim-a-binary-search-tree":"<p>给定一个二叉搜索树，同时给定最小边界<code>L</code>&nbsp;和最大边界&nbsp;<code>R</code>。通过修剪二叉搜索树，使得所有节点的值在<code>[L, R]</code>中 (R&gt;=L) 。你可能需要改变树的根节点，所以结果应当返回修剪好的二叉搜索树的新的根节点。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n    1\n   / \\\n  0   2\n\n  L = 1\n  R = 2\n\n<strong>输出:</strong> \n    1\n      \\\n       2\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n    3\n   / \\\n  0   4\n   \\\n    2\n   /\n  1\n\n  L = 1\n  R = 3\n\n<strong>输出:</strong> \n      3\n     / \n   2   \n  /\n 1\n</pre>\n","split-array-into-consecutive-subsequences":"<p>输入一个按升序排序的整数数组（可能包含重复数字），你需要将它们分割成几个子序列，其中每个子序列至少包含三个连续整数。返回你是否能做出这样的分割？</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,2,3,3,4,5]\n<strong>输出:</strong> True\n<strong>解释:</strong>\n你可以分割出这样两个连续子序列 : \n1, 2, 3\n3, 4, 5\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,2,3,3,4,4,5,5]\n<strong>输出:</strong> True\n<strong>解释:</strong>\n你可以分割出这样两个连续子序列 : \n1, 2, 3, 4, 5\n3, 4, 5\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,2,3,4,4,5]\n<strong>输出:</strong> False\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>输入的数组长度范围为 [1, 10000]</li>\n</ol>\n\n<p>&nbsp;</p>\n","bulb-switcher-ii":"<p>现有一个房间，墙上挂有&nbsp;<code>n</code>&nbsp;只已经打开的灯泡和 4 个按钮。在进行了&nbsp;<code>m</code>&nbsp;次未知操作后，你需要返回这&nbsp;<code>n</code>&nbsp;只灯泡可能有多少种不同的状态。</p>\n\n<p>假设这 <code>n</code> 只灯泡被编号为 [1, 2, 3 ..., n]，这 4 个按钮的功能如下：</p>\n\n<ol>\n\t<li>将所有灯泡的状态反转（即开变为关，关变为开）</li>\n\t<li>将编号为偶数的灯泡的状态反转</li>\n\t<li>将编号为奇数的灯泡的状态反转</li>\n\t<li>将编号为 <code>3k+1</code> 的灯泡的状态反转（k = 0, 1, 2, ...)</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> n = 1, m = 1.\n<strong>输出:</strong> 2\n<strong>说明:</strong> 状态为: [开], [关]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> n = 2, m = 1.\n<strong>输出:</strong> 3\n<strong>说明:</strong> 状态为: [开, 关], [关, 开], [关, 关]\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> n = 3, m = 1.\n<strong>输出:</strong> 4\n<strong>说明:</strong> 状态为: [关, 开, 关], [开, 关, 开], [关, 关, 关], [关, 开, 开].\n</pre>\n\n<p><strong>注意：</strong>&nbsp;<code>n</code>&nbsp;和&nbsp;<code>m</code> 都属于 [0, 1000].</p>\n","shopping-offers":"<p>在LeetCode商店中， 有许多在售的物品。</p>\n\n<p>然而，也有一些大礼包，每个大礼包以优惠的价格捆绑销售一组物品。</p>\n\n<p>现给定每个物品的价格，每个大礼包包含物品的清单，以及待购物品清单。请输出<strong>确切</strong>完成待购清单的最低花费。</p>\n\n<p>每个大礼包的由一个数组中的一组数据描述，最后一个数字代表大礼包的价格，其他数字分别表示内含的其他种类物品的数量。</p>\n\n<p>任意大礼包可无限次购买。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [2,5], [[3,0,5],[1,2,10]], [3,2]\n<strong>输出:</strong> 14\n<strong>解释:</strong> \n有A和B两种物品，价格分别为&yen;2和&yen;5。\n大礼包1，你可以以&yen;5的价格购买3A和0B。\n大礼包2， 你可以以&yen;10的价格购买1A和2B。\n你需要购买3个A和2个B， 所以你付了&yen;10购买了1A和2B（大礼包2），以及&yen;4购买2A。</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> [2,3,4], [[1,1,0,4],[2,2,1,9]], [1,2,1]\n<strong>输出:</strong> 11\n<strong>解释:</strong> \nA，B，C的价格分别为&yen;2，&yen;3，&yen;4.\n你可以用&yen;4购买1A和2B，也可以用&yen;9购买2A，2B和1C。\n你需要买1A，2B和1C，所以你付了&yen;4买了1A和1B（大礼包1），以及&yen;3购买1B， &yen;4购买1C。\n你不可以购买超出待购清单的物品，尽管购买大礼包2更加便宜。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>最多6种物品， 100种大礼包。</li>\n\t<li>每种物品，你最多只需要购买6个。</li>\n\t<li>你不可以购买超出待购清单的物品，即使更便宜。</li>\n</ol>\n","kth-smallest-number-in-multiplication-table":"<p>几乎每一个人都用&nbsp;<a href=\"https://baike.baidu.com/item/%E4%B9%98%E6%B3%95%E8%A1%A8\">乘法表</a>。但是你能在乘法表中快速找到第<code>k</code>小的数字吗？</p>\n\n<p>给定高度<code>m</code>&nbsp;、宽度<code>n</code> 的一张&nbsp;<code>m * n</code>的乘法表，以及正整数<code>k</code>，你需要返回表中第<code>k</code>&nbsp;小的数字。</p>\n\n<p><strong>例&nbsp;1：</strong></p>\n\n<pre>\n<strong>输入:</strong> m = 3, n = 3, k = 5\n<strong>输出:</strong> 3\n<strong>解释:</strong> \n乘法表:\n1\t2\t3\n2\t4\t6\n3\t6\t9\n\n第5小的数字是 3 (1, 2, 2, 3, 3).\n</pre>\n\n<p><strong>例 2：</strong></p>\n\n<pre>\n<strong>输入:</strong> m = 2, n = 3, k = 6\n<strong>输出:</strong> 6\n<strong>解释:</strong> \n乘法表:\n1\t2\t3\n2\t4\t6\n\n第6小的数字是 6 (1, 2, 2, 3, 4, 6).\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li><code>m</code> 和&nbsp;<code>n</code>&nbsp;的范围在 [1, 30000] 之间。</li>\n\t<li><code>k</code> 的范围在 [1, m * n] 之间。</li>\n</ol>\n","design-search-autocomplete-system":null,"cut-off-trees-for-golf-event":"<p>你被请来给一个要举办高尔夫比赛的树林砍树. 树林由一个非负的二维数组表示， 在这个数组中：</p>\n\n<ol>\n\t<li><code>0</code> 表示障碍，无法触碰到.</li>\n\t<li><code>1</code>&nbsp;表示可以行走的地面.</li>\n\t<li><code>比1大的数</code>&nbsp;表示一颗允许走过的树的高度.</li>\n</ol>\n\n<p>你被要求按照树的高度从低向高砍掉所有的树，每砍过一颗树，树的高度变为1。</p>\n\n<p>你将从（0，0）点开始工作，你应该返回你砍完所有树需要走的最小步数。 如果你无法砍完所有的树，返回 -1 。</p>\n\n<p>可以保证的是，没有两棵树的高度是相同的，并且至少有一颗树需要你砍。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n[\n [1,2,3],\n [0,0,4],\n [7,6,5]\n]\n<strong>输出:</strong> 6\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n[\n [1,2,3],\n [0,0,0],\n [7,6,5]\n]\n<strong>输出:</strong> -1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n[\n [2,3,4],\n [0,0,5],\n [8,7,6]\n]\n<strong>输出:</strong> 6\n\n<strong>解释:</strong> (0,0) 位置的树，你可以直接砍去，不用算步数\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示</strong>: 矩阵大小不会超过 50x50 。</p>\n","maximum-binary-tree":"<p>给定一个不含重复元素的整数数组。一个以此数组构建的最大二叉树定义如下：</p>\n\n<ol>\n\t<li>二叉树的根是数组中的最大元素。</li>\n\t<li>左子树是通过数组中最大值左边部分构造出的最大二叉树。</li>\n\t<li>右子树是通过数组中最大值右边部分构造出的最大二叉树。</li>\n</ol>\n\n<p>通过给定的数组构建最大二叉树，并且输出这个树的根节点。</p>\n\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [3,2,1,6,0,5]\n<strong>输入:</strong> 返回下面这棵树的根节点：\n\n      6\n    /   \\\n   3     5\n    \\    / \n     2  0   \n       \\\n        1\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>给定的数组的大小在 [1, 1000] 之间。</li>\n</ol>\n","two-sum-iv-input-is-a-bst":"<p>给定一个二叉搜索树和一个目标结果，如果 BST 中存在两个元素且它们的和等于给定的目标结果，则返回 true。</p>\n\n<p><strong>案例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n    5\n   / \\\n  3   6\n / \\   \\\n2   4   7\n\nTarget = 9\n\n<strong>输出:</strong> True\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>案例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n    5\n   / \\\n  3   6\n / \\   \\\n2   4   7\n\nTarget = 28\n\n<strong>输出:</strong> False\n</pre>\n\n<p>&nbsp;</p>\n","solve-the-equation":"<p>求解一个给定的方程，将<code>x</code>以字符串&quot;x=#value&quot;的形式返回。该方程仅包含&#39;+&#39;，&#39; - &#39;操作，变量&nbsp;<code>x</code>&nbsp;和其对应系数。</p>\n\n<p>如果方程没有解，请返回&ldquo;No solution&rdquo;。</p>\n\n<p>如果方程有无限解，则返回&ldquo;Infinite solutions&rdquo;。</p>\n\n<p>如果方程中只有一个解，要保证返回值&nbsp;<code>x</code>&nbsp;是一个整数。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;x+5-3+x=6+x-2&quot;\n<strong>输出:</strong> &quot;x=2&quot;\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;x=x&quot;\n<strong>输出:</strong> &quot;Infinite solutions&quot;\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;2x=x&quot;\n<strong>输出:</strong> &quot;x=0&quot;\n</pre>\n\n<p><strong>示例 4:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;2x+3x-6x=x+2&quot;\n<strong>输出:</strong> &quot;x=-1&quot;\n</pre>\n\n<p><strong>示例 5:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;x=x+2&quot;\n<strong>输出:</strong> &quot;No solution&quot;\n</pre>\n","valid-parenthesis-string":"<p>给定一个只包含三种字符的字符串：<code>（&nbsp;</code>，<code>）</code>&nbsp;和 <code>*</code>，写一个函数来检验这个字符串是否为有效字符串。有效字符串具有如下规则：</p>\n\n<ol>\n\t<li>任何左括号 <code>(</code>&nbsp;必须有相应的右括号 <code>)</code>。</li>\n\t<li>任何右括号 <code>)</code>&nbsp;必须有相应的左括号 <code>(</code>&nbsp;。</li>\n\t<li>左括号 <code>(</code> 必须在对应的右括号之前 <code>)</code>。</li>\n\t<li><code>*</code>&nbsp;可以被视为单个右括号 <code>)</code>&nbsp;，或单个左括号 <code>(</code>&nbsp;，或一个空字符串。</li>\n\t<li>一个空字符串也被视为有效字符串。</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;()&quot;\n<strong>输出:</strong> True\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;(*)&quot;\n<strong>输出:</strong> True\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;(*))&quot;\n<strong>输出:</strong> True\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>字符串大小将在 [1，100] 范围内。</li>\n</ol>\n","remove-9":null,"set-mismatch":"<p>集合 <code>S</code> 包含从1到&nbsp;<code>n</code>&nbsp;的整数。不幸的是，因为数据错误，导致集合里面某一个元素复制了成了集合里面的另外一个元素的值，导致集合丢失了一个整数并且有一个元素重复。</p>\n\n<p>给定一个数组 <code>nums</code> 代表了集合 <code>S</code> 发生错误后的结果。你的任务是首先寻找到重复出现的整数，再找到丢失的整数，将它们以数组的形式返回。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> nums = [1,2,2,4]\n<strong>输出:</strong> [2,3]\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>给定数组的长度范围是&nbsp;[2, 10000]。</li>\n\t<li>给定的数组是无序的。</li>\n</ol>\n","non-decreasing-array":"<p>给定一个长度为&nbsp;<code>n</code>&nbsp;的整数数组，你的任务是判断在<strong>最多</strong>改变&nbsp;<code>1</code> 个元素的情况下，该数组能否变成一个非递减数列。</p>\n\n<p>我们是这样定义一个非递减数列的：&nbsp;对于数组中所有的&nbsp;<code>i</code> (1 &lt;= i &lt; n)，满足&nbsp;<code>array[i] &lt;= array[i + 1]</code>。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [4,2,3]\n<strong>输出:</strong> True\n<strong>解释:</strong> 你可以通过把第一个4变成1来使得它成为一个非递减数列。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> [4,2,1]\n<strong>输出:</strong> False\n<strong>解释:</strong> 你不能在只改变一个元素的情况下将其变为非递减数列。\n</pre>\n\n<p><strong>说明:&nbsp;&nbsp;</strong><code>n</code> 的范围为 [1, 10,000]。</p>\n","beautiful-arrangement-ii":"<p>给定两个整数&nbsp;<code>n</code>&nbsp;和&nbsp;<code>k</code>，你需要实现一个数组，这个数组包含从&nbsp;<code>1</code>&nbsp;到&nbsp;<code>n</code>&nbsp;的 <code>n</code>&nbsp;个不同整数，同时满足以下条件：</p>\n\n<p>① 如果这个数组是 [a<sub>1</sub>, a<sub>2</sub>, a<sub>3</sub>, ... , a<sub>n</sub>] ，那么数组&nbsp;[|a<sub>1</sub> - a<sub>2</sub>|, |a<sub>2</sub> - a<sub>3</sub>|, |a<sub>3</sub> - a<sub>4</sub>|, ... , |a<sub>n-1</sub> - a<sub>n</sub>|] 中应该有且仅有&nbsp;k 个不同整数；.</p>\n\n<p>② 如果存在多种答案，你只需实现并返回其中任意一种.</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> n = 3, k = 1\n<strong>输出:</strong> [1, 2, 3]\n<strong>解释:</strong> [1, 2, 3] 包含 3 个范围在 1-3 的不同整数， 并且 [1, 1] 中有且仅有 1 个不同整数 : 1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> n = 3, k = 2\n<strong>输出:</strong> [1, 3, 2]\n<strong>解释:</strong> [1, 3, 2] 包含 3 个范围在 1-3 的不同整数， 并且 [2, 1] 中有且仅有 2 个不同整数: 1 和 2\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示:</strong></p>\n\n<ol>\n\t<li>&nbsp;<code>n</code>&nbsp;和&nbsp;<code>k</code>&nbsp;满足条件&nbsp;1 &lt;= k &lt; n &lt;= 10<sup>4</sup>.</li>\n</ol>\n\n<p>&nbsp;</p>\n","valid-palindrome-ii":"<p>给定一个非空字符串&nbsp;<code>s</code>，<strong>最多</strong>删除一个字符。判断是否能成为回文字符串。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;aba&quot;\n<strong>输出:</strong> True\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;abca&quot;\n<strong>输出:</strong> True\n<strong>解释:</strong> 你可以删除c字符。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>字符串只包含从 a-z 的小写字母。字符串的最大长度是50000。</li>\n</ol>\n","k-empty-slots":null,"decode-ways-ii":"<p>一条包含字母&nbsp;<code>A-Z</code> 的消息通过以下的方式进行了编码：</p>\n\n<pre>&#39;A&#39; -&gt; 1\n&#39;B&#39; -&gt; 2\n...\n&#39;Z&#39; -&gt; 26\n</pre>\n\n<p>除了上述的条件以外，现在加密字符串可以包含字符 &#39;*&#39;了，字符&#39;*&#39;可以被当做1到9当中的任意一个数字。</p>\n\n<p>给定一条包含数字和字符&#39;*&#39;的加密信息，请确定解码方法的总数。</p>\n\n<p>同时，由于结果值可能会相当的大，所以你应当对10<sup>9</sup>&nbsp;+ 7取模。（翻译者标注：此处取模主要是为了防止溢出）</p>\n\n<p><strong>示例 1 :</strong></p>\n\n<pre><strong>输入:</strong> &quot;*&quot;\n<strong>输出:</strong> 9\n<strong>解释:</strong> 加密的信息可以被解密为: &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;I&quot;.\n</pre>\n\n<p><strong>示例 2 :</strong></p>\n\n<pre><strong>输入:</strong> &quot;1*&quot;\n<strong>输出:</strong> 9 + 9 = 18（翻译者标注：这里1*可以分解为1,* 或者当做1*来处理，所以结果是9+9=18）\n</pre>\n\n<p><strong>说明 :</strong></p>\n\n<ol>\n\t<li>输入的字符串长度范围是 [1, 10<sup>5</sup>]。</li>\n\t<li>输入的字符串只会包含字符 &#39;*&#39; 和 数字&#39;0&#39; - &#39;9&#39;。</li>\n</ol>\n","2-keys-keyboard":"<p>最初在一个记事本上只有一个字符 &#39;A&#39;。你每次可以对这个记事本进行两种操作：</p>\n\n<ol>\n\t<li><code>Copy All</code> (复制全部) : 你可以复制这个记事本中的所有字符(部分的复制是不允许的)。</li>\n\t<li><code>Paste</code> (粘贴) : 你可以粘贴你<strong>上一次</strong>复制的字符。</li>\n</ol>\n\n<p>给定一个数字&nbsp;<code>n</code>&nbsp;。你需要使用最少的操作次数，在记事本中打印出<strong>恰好</strong>&nbsp;<code>n</code>&nbsp;个 &#39;A&#39;。输出能够打印出&nbsp;<code>n</code>&nbsp;个 &#39;A&#39; 的最少操作次数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> 3\n<strong>输出:</strong> 3\n<strong>解释:</strong>\n最初, 我们只有一个字符 &#39;A&#39;。\n第 1 步, 我们使用 <strong>Copy All</strong> 操作。\n第 2 步, 我们使用 <strong>Paste </strong>操作来获得 &#39;AA&#39;。\n第 3 步, 我们使用 <strong>Paste</strong> 操作来获得 &#39;AAA&#39;。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li><code>n</code>&nbsp;的取值范围是 [1, 1000] 。</li>\n</ol>\n","average-of-levels-in-binary-tree":"<p>给定一个非空二叉树, 返回一个由每层节点平均值组成的数组.</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong>\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n<strong>输出:</strong> [3, 14.5, 11]\n<strong>解释:</strong>\n第0层的平均值是 3,  第1层是 14.5, 第2层是 11. 因此返回 [3, 14.5, 11].\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li>节点值的范围在32位有符号整数范围内。</li>\n</ol>\n","maximum-average-subarray-i":"<p>给定 <code>n</code> 个整数，找出平均数最大且长度为 <code>k</code> 的连续子数组，并输出该最大平均数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [1,12,-5,-6,50,3], k = 4\n<strong>输出:</strong> 12.75\n<strong>解释:</strong> 最大平均数 (12-5-6+50)/4 = 51/4 = 12.75\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>1 &lt;= <code>k</code> &lt;= <code>n</code> &lt;= 30,000。</li>\n\t<li>所给数据范围 [-10,000，10,000]。</li>\n</ol>\n","coin-path":null,"replace-words":"<p>在英语中，我们有一个叫做&nbsp;<code>词根</code>(root)的概念，它可以跟着其他一些词组成另一个较长的单词&mdash;&mdash;我们称这个词为&nbsp;<code>继承词</code>(successor)。例如，词根<code>an</code>，跟随着单词&nbsp;<code>other</code>(其他)，可以形成新的单词&nbsp;<code>another</code>(另一个)。</p>\n\n<p>现在，给定一个由许多词根组成的词典和一个句子。你需要将句子中的所有<code>继承词</code>用<code>词根</code>替换掉。如果<code>继承词</code>有许多可以形成它的<code>词根</code>，则用最短的词根替换它。</p>\n\n<p>你需要输出替换之后的句子。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> dict(词典) = [&quot;cat&quot;, &quot;bat&quot;, &quot;rat&quot;]\nsentence(句子) = &quot;the cattle was rattled by the battery&quot;\n<strong>输出:</strong> &quot;the cat was rat by the bat&quot;\n</pre>\n\n<p><strong>注:</strong></p>\n\n<ol>\n\t<li>输入只包含小写字母。</li>\n\t<li>1 &lt;= 字典单词数 &lt;=1000</li>\n\t<li>1 &lt;=&nbsp; 句中词语数&nbsp;&lt;= 1000</li>\n\t<li>1 &lt;= 词根长度 &lt;= 100</li>\n\t<li>1 &lt;= 句中词语长度&nbsp;&lt;= 1000</li>\n</ol>\n","find-k-closest-elements":"<p>给定一个排序好的数组，两个整数 <code>k</code> 和 <code>x</code>，从数组中找到最靠近 <code>x</code>（两数之差最小）的 <code>k</code> 个数。返回的结果必须要是按升序排好的。如果有两个数与 <code>x</code> 的差值一样，优先选择数值较小的那个数。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,2,3,4,5], k=4, x=3\n<strong>输出:</strong> [1,2,3,4]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,2,3,4,5], k=4, x=-1\n<strong>输出:</strong> [1,2,3,4]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>k 的值为正数，且总是小于给定排序数组的长度。</li>\n\t<li>数组不为空，且长度不超过 10<sup>4</sup></li>\n\t<li>数组里的每个元素与&nbsp;x 的绝对值不超过 10<sup>4</sup></li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>更新(2017/9/19):</strong><br />\n这个参数 <em>arr</em> 已经被改变为一个<strong>整数数组</strong>（而不是整数列表）。<strong><em>&nbsp;请重新加载代码定义以获取最新更改。</em></strong></p>\n","print-binary-tree":"<p>在一个 m*n 的二维字符串数组中输出二叉树，并遵守以下规则：</p>\n\n<ol>\n\t<li>行数&nbsp;<code>m</code>&nbsp;应当等于给定二叉树的高度。</li>\n\t<li>列数&nbsp;<code>n</code>&nbsp;应当总是奇数。</li>\n\t<li>根节点的值（以字符串格式给出）应当放在可放置的第一行正中间。根节点所在的行与列会将剩余空间划分为两部分（<strong>左下部分和右下部分</strong>）。你应该将左子树输出在左下部分，右子树输出在右下部分。左下和右下部分应当有相同的大小。即使一个子树为空而另一个非空，你不需要为空的子树输出任何东西，但仍需要为另一个子树留出足够的空间。然而，如果两个子树都为空则不需要为它们留出任何空间。</li>\n\t<li>每个未使用的空间应包含一个空的字符串<code>&quot;&quot;</code>。</li>\n\t<li>使用相同的规则输出子树。</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong>\n     1\n    /\n   2\n<strong>输出:</strong>\n[[&quot;&quot;, &quot;1&quot;, &quot;&quot;],\n [&quot;2&quot;, &quot;&quot;, &quot;&quot;]]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong>\n     1\n    / \\\n   2   3\n    \\\n     4\n<strong>输出:</strong>\n[[&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;1&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;],\n [&quot;&quot;, &quot;2&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;3&quot;, &quot;&quot;],\n [&quot;&quot;, &quot;&quot;, &quot;4&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;]]\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong>\n      1\n     / \\\n    2   5\n   / \n  3 \n / \n4 \n<strong>输出:</strong>\n[[&quot;&quot;,  &quot;&quot;,  &quot;&quot;, &quot;&quot;,  &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;1&quot;, &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;, &quot;&quot;, &quot;&quot;]\n [&quot;&quot;,  &quot;&quot;,  &quot;&quot;, &quot;2&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;5&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;]\n [&quot;&quot;,  &quot;3&quot;, &quot;&quot;, &quot;&quot;,  &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;, &quot;&quot;, &quot;&quot;]\n [&quot;4&quot;, &quot;&quot;,  &quot;&quot;, &quot;&quot;,  &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;, &quot;&quot;, &quot;&quot;]]\n</pre>\n\n<p><strong>注意:</strong> 二叉树的高度在范围 [1, 10] 中。</p>\n","4-keys-keyboard":null,"equal-tree-partition":null,"find-duplicate-subtrees":"<p>给定一棵二叉树，返回所有重复的子树。对于同一类的重复子树，你只需要返回其中任意<strong>一棵</strong>的根结点即可。</p>\n\n<p>两棵树重复是指它们具有相同的结构以及相同的结点值。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>        1\n       / \\\n      2   3\n     /   / \\\n    4   2   4\n       /\n      4\n</pre>\n\n<p>下面是两个重复的子树：</p>\n\n<pre>      2\n     /\n    4\n</pre>\n\n<p>和</p>\n\n<pre>    4\n</pre>\n\n<p>因此，你需要以列表的形式返回上述重复子树的根结点。</p>\n","add-one-row-to-tree":"<p>给定一个二叉树，根节点为第1层，深度为 1。在其第&nbsp;<code>d</code>&nbsp;层追加一行值为&nbsp;<code>v</code>&nbsp;的节点。</p>\n\n<p>添加规则：给定一个深度值 <code>d</code> （正整数），针对深度为 <code>d-1</code> 层的每一<strong>非空</strong>节点 <code>N</code>，为 <code>N</code> 创建两个值为&nbsp;<code>v</code>&nbsp;的左子树和右子树。</p>\n\n<p>将&nbsp;<code>N</code> 原先的左子树，连接为新节点&nbsp;<code>v</code> 的左子树；将&nbsp;<code>N</code> 原先的右子树，连接为新节点&nbsp;<code>v</code> 的右子树。</p>\n\n<p>如果 <code>d</code> 的值为 1，深度 d - 1 不存在，则创建一个新的根节点 <code>v</code>，原先的整棵树将作为 <code>v</code> 的左子树。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n二叉树如下所示:\n       4\n     /   \\\n    2     6\n   / \\   / \n  3   1 5   \n\n<strong>v = 1</strong>\n\n<strong>d = 2</strong>\n\n<strong>输出:</strong> \n       4\n      / \\\n     1   1\n    /     \\\n   2       6\n  / \\     / \n 3   1   5   \n\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n二叉树如下所示:\n      4\n     /   \n    2    \n   / \\   \n  3   1    \n\n<strong>v = 1</strong>\n\n<strong>d = 3</strong>\n\n<strong>输出:</strong> \n      4\n     /   \n    2\n   / \\    \n  1   1\n /     \\  \n3       1\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>输入的深度值 d 的范围是：[1，二叉树最大深度 + 1]。</li>\n\t<li>输入的二叉树至少有一个节点。</li>\n</ol>\n","not-boring-movies":"<p>某城市开了一家新的电影院，吸引了很多人过来看电影。该电影院特别注意用户体验，专门有个 LED显示板做电影推荐，上面公布着影评和相关电影描述。</p>\n\n<p>作为该电影院的信息部主管，您需要编写一个 SQL查询，找出所有影片描述为<strong>非</strong>&nbsp;<code>boring</code>&nbsp;(不无聊)&nbsp;的并且<strong> id 为奇数&nbsp;</strong>的影片，结果请按等级 <code>rating</code> 排列。</p>\n\n<p>&nbsp;</p>\n\n<p>例如，下表 <code>cinema</code>:</p>\n\n<pre>\n+---------+-----------+--------------+-----------+\n|   id    | movie     |  description |  rating   |\n+---------+-----------+--------------+-----------+\n|   1     | War       |   great 3D   |   8.9     |\n|   2     | Science   |   fiction    |   8.5     |\n|   3     | irish     |   boring     |   6.2     |\n|   4     | Ice song  |   Fantacy    |   8.6     |\n|   5     | House card|   Interesting|   9.1     |\n+---------+-----------+--------------+-----------+\n</pre>\n\n<p>对于上面的例子，则正确的输出是为：</p>\n\n<pre>\n+---------+-----------+--------------+-----------+\n|   id    | movie     |  description |  rating   |\n+---------+-----------+--------------+-----------+\n|   5     | House card|   Interesting|   9.1     |\n|   1     | War       |   great 3D   |   8.9     |\n+---------+-----------+--------------+-----------+\n</pre>\n\n<p>&nbsp;</p>\n","maximum-average-subarray-ii":null,"non-negative-integers-without-consecutive-ones":"<p>给定一个正整数 n，找出小于或等于 n 的非负整数中，其二进制表示不包含&nbsp;<strong>连续的1&nbsp;</strong>的个数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> 5\n<strong>输出:</strong> 5\n<strong>解释:</strong> \n下面是带有相应二进制表示的非负整数&lt;= 5：\n0 : 0\n1 : 1\n2 : 10\n3 : 11\n4 : 100\n5 : 101\n其中，只有整数3违反规则（有两个连续的1），其他5个满足规则。</pre>\n\n<p><strong>说明:</strong> 1 &lt;= n &lt;= 10<sup>9</sup></p>\n","exchange-seats":"<p>小美是一所中学的信息科技老师，她有一张 <code>seat</code>&nbsp;座位表，平时用来储存学生名字和与他们相对应的座位 id。</p>\n\n<p>其中纵列的&nbsp;<strong>id&nbsp;</strong>是连续递增的</p>\n\n<p>小美想改变相邻俩学生的座位。</p>\n\n<p>你能不能帮她写一个 SQL query&nbsp;来输出小美想要的结果呢？</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>\n+---------+---------+\n|    id   | student |\n+---------+---------+\n|    1    | Abbot   |\n|    2    | Doris   |\n|    3    | Emerson |\n|    4    | Green   |\n|    5    | Jeames  |\n+---------+---------+\n</pre>\n\n<p>假如数据输入的是上表，则输出结果如下：</p>\n\n<pre>\n+---------+---------+\n|    id   | student |\n+---------+---------+\n|    1    | Doris   |\n|    2    | Abbot   |\n|    3    | Green   |\n|    4    | Emerson |\n|    5    | Jeames  |\n+---------+---------+</pre>\n\n<p><strong>注意：</strong></p>\n\n<p>如果学生人数是奇数，则不需要改变最后一个同学的座位。</p>\n","valid-triangle-number":"<p>给定一个包含非负整数的数组，你的任务是统计其中可以组成三角形三条边的三元组个数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [2,2,3,4]\n<strong>输出:</strong> 3\n<strong>解释:</strong>\n有效的组合是: \n2,3,4 (使用第一个 2)\n2,3,4 (使用第二个 2)\n2,2,3\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>数组长度不超过1000。</li>\n\t<li>数组里整数的范围为 [0, 1000]。</li>\n</ol>\n","minimum-factorization":null,"range-addition-ii":"<p>给定一个初始元素全部为&nbsp;<strong>0</strong>，大小为 m*n 的矩阵&nbsp;<strong>M&nbsp;</strong>以及在&nbsp;<strong>M&nbsp;</strong>上的一系列更新操作。</p>\n\n<p>操作用二维数组表示，其中的每个操作用一个含有两个<strong>正整数&nbsp;a</strong> 和 <strong>b</strong> 的数组表示，含义是将所有符合&nbsp;<strong>0 &lt;= i &lt; a</strong> 以及 <strong>0 &lt;= j &lt; b</strong> 的元素&nbsp;<strong>M[i][j]&nbsp;</strong>的值都<strong>增加 1</strong>。</p>\n\n<p>在执行给定的一系列操作后，你需要返回矩阵中含有最大整数的元素个数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> \nm = 3, n = 3\noperations = [[2,2],[3,3]]\n<strong>输出:</strong> 4\n<strong>解释:</strong> \n初始状态, M = \n[[0, 0, 0],\n [0, 0, 0],\n [0, 0, 0]]\n\n执行完操作 [2,2] 后, M = \n[[1, 1, 0],\n [1, 1, 0],\n [0, 0, 0]]\n\n执行完操作 [3,3] 后, M = \n[[2, 2, 1],\n [2, 2, 1],\n [1, 1, 1]]\n\nM 中最大的整数是 2, 而且 M 中有4个值为2的元素。因此返回 4。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>m 和 n 的范围是&nbsp;[1,40000]。</li>\n\t<li>a 的范围是 [1,m]，b 的范围是 [1,n]。</li>\n\t<li>操作数目不超过 10000。</li>\n</ol>\n","swap-salary":"<p>给定一个&nbsp;<code>salary</code>表，如下所示，有m=男性 和 f=女性的值 。交换所有的 f 和 m 值(例如，将所有 f 值更改为 m，反之亦然)。要求使用一个更新查询，并且没有中间临时表。</p>\n\n<p>例如:</p>\n\n<pre>| id | name | sex | salary |\n|----|------|-----|--------|\n| 1  | A    | m   | 2500   |\n| 2  | B    | f   | 1500   |\n| 3  | C    | m   | 5500   |\n| 4  | D    | f   | 500    |\n</pre>\n\n<p>运行你所编写的查询语句之后，将会得到以下表:</p>\n\n<pre>| id | name | sex | salary |\n|----|------|-----|--------|\n| 1  | A    | f   | 2500   |\n| 2  | B    | m   | 1500   |\n| 3  | C    | f   | 5500   |\n| 4  | D    | m   | 500    |\n</pre>\n","biggest-single-number":null,"erect-the-fence":"<p>在一个二维的花园中，有一些用 (x, y) 坐标表示的树。由于安装费用十分昂贵，你的任务是先用<strong>最短</strong>的绳子围起所有的树。只有当所有的树都被绳子包围时，花园才能围好栅栏。你需要找到正好位于栅栏边界上的树的坐标。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>示例 1:</strong></p>\r\n\r\n<pre><strong>输入:</strong> [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]\r\n<strong>输出:</strong> [[1,1],[2,0],[4,2],[3,3],[2,4]]\r\n<strong>解释:</strong>\r\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/erect_the_fence_1.png\" style=\"width: 100%; max-width: 320px\">\r\n</pre>\r\n\r\n<p><strong>示例 2:</strong></p>\r\n\r\n<pre><strong>输入:</strong> [[1,2],[2,2],[4,2]]\r\n<strong>输出:</strong> [[1,2],[2,2],[4,2]]\r\n<strong>解释:</strong>\r\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/erect_the_fence_2.png\" style=\"width: 100%; max-width: 320px\">\r\n即使树都在一条直线上，你也需要先用绳子包围它们。\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>注意:</strong></p>\r\n\r\n<ol>\r\n\t<li>所有的树应当被围在一起。你不能剪断绳子来包围树或者把树分成一组以上。</li>\r\n\t<li>输入的整数在 0 到 100 之间。</li>\r\n\t<li>花园至少有一棵树。</li>\r\n\t<li>所有树的坐标都是不同的。</li>\r\n\t<li>输入的点<strong>没有</strong>顺序。输出顺序也没有要求。</li>\r\n</ol>","smallest-range":"<p>你有&nbsp;<code>k</code>&nbsp;个升序排列的整数数组。找到一个<strong>最小</strong>区间，使得&nbsp;<code>k</code>&nbsp;个列表中的每个列表至少有一个数包含在其中。</p>\n\n<p>我们定义如果&nbsp;<code>b-a &lt; d-c</code>&nbsp;或者在&nbsp;<code>b-a == d-c</code>&nbsp;时&nbsp;<code>a &lt; c</code>，则区间 [a,b] 比 [c,d] 小。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong>[[4,10,15,24,26], [0,9,12,20], [5,18,22,30]]\n<strong>输出:</strong> [20,24]\n<strong>解释:</strong> \n列表 1：[4, 10, 15, 24, 26]，24 在区间 [20,24] 中。\n列表 2：[0, 9, 12, 20]，20 在区间 [20,24] 中。\n列表 3：[5, 18, 22, 30]，22 在区间 [20,24] 中。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>给定的列表可能包含重复元素，所以在这里升序表示 &gt;= 。</li>\n\t<li>1 &lt;= <code>k</code> &lt;= 3500</li>\n\t<li>-10<sup>5</sup> &lt;= <code>元素的值</code>&nbsp;&lt;= 10<sup>5</sup></li>\n\t<li><strong>对于使用Java的用户，请注意传入类型已修改为List&lt;List&lt;Integer&gt;&gt;。重置代码模板后可以看到这项改动。</strong></li>\n</ol>\n","tree-node":null,"second-degree-follower":null,"friend-requests-ii-who-has-the-most-friends":null,"customer-placing-the-largest-number-of-orders":null,"classes-more-than-5-students":"<p>有一个<code>courses</code> 表 ，有: <strong>student&nbsp;(学生) </strong>和 <strong>class (课程)</strong>。</p>\n\n<p>请列出所有超过或等于5名学生的课。</p>\n\n<p>例如,表:</p>\n\n<pre>\n+---------+------------+\n| student | class      |\n+---------+------------+\n| A       | Math       |\n| B       | English    |\n| C       | Math       |\n| D       | Biology    |\n| E       | Math       |\n| F       | Computer   |\n| G       | Math       |\n| H       | Math       |\n| I       | Math       |\n+---------+------------+\n</pre>\n\n<p>应该输出:</p>\n\n<pre>\n+---------+\n| class   |\n+---------+\n| Math    |\n+---------+\n</pre>\n\n<p><strong>Note:</strong><br />\n学生在每个课中不应被重复计算。</p>\n","kill-process":null,"longest-harmonious-subsequence":"<p>和谐数组是指一个数组里元素的最大值和最小值之间的差别正好是1。</p>\n\n<p>现在，给定一个整数数组，你需要在所有可能的子序列中找到最长的和谐子序列的长度。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,3,2,2,5,2,3,7]\n<strong>输出:</strong> 5\n<strong>原因:</strong> 最长的和谐数组是：[3,2,2,2,3].\n</pre>\n\n<p><strong>说明:</strong> 输入的数组长度最大不超过20,000.</p>\n","human-traffic-of-stadium":"<p>X 市建了一个新的体育馆，每日人流量信息被记录在这三列信息中：<strong>序号</strong> (id)、<strong>日期</strong> (date)、&nbsp;<strong>人流量</strong> (people)。</p>\n\n<p>请编写一个查询语句，找出高峰期时段，要求连续三天及以上，并且每天人流量均不少于100。</p>\n\n<p>例如，表 <code>stadium</code>：</p>\n\n<pre>+------+------------+-----------+\n| id   | date       | people    |\n+------+------------+-----------+\n| 1    | 2017-01-01 | 10        |\n| 2    | 2017-01-02 | 109       |\n| 3    | 2017-01-03 | 150       |\n| 4    | 2017-01-04 | 99        |\n| 5    | 2017-01-05 | 145       |\n| 6    | 2017-01-06 | 1455      |\n| 7    | 2017-01-07 | 199       |\n| 8    | 2017-01-08 | 188       |\n+------+------------+-----------+\n</pre>\n\n<p>对于上面的示例数据，输出为：</p>\n\n<pre>+------+------------+-----------+\n| id   | date       | people    |\n+------+------------+-----------+\n| 5    | 2017-01-05 | 145       |\n| 6    | 2017-01-06 | 1455      |\n| 7    | 2017-01-07 | 199       |\n| 8    | 2017-01-08 | 188       |\n+------+------------+-----------+\n</pre>\n\n<p><strong>Note:</strong><br>\n每天只有一行记录，日期随着 id 的增加而增加。</p>\n","valid-square":"<p>给定二维空间中四点的坐标，返回四点是否可以构造一个正方形。</p>\n\n<p>一个点的坐标（x，y）由一个有两个整数的整数数组表示。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\n<strong>输入:</strong> p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]\n<strong>输出:</strong> True\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>所有输入整数都在 [-10000，10000] 范围内。</li>\n\t<li>一个有效的正方形有四个等长的正长和四个等角（90度角）。</li>\n\t<li>输入点没有顺序。</li>\n</ol>\n","sum-of-square-numbers":"<p>给定一个非负整数&nbsp;<code>c</code>&nbsp;，你要判断是否存在两个整数 <code>a</code> 和 <code>b</code>，使得&nbsp;a<sup>2</sup> + b<sup>2</sup> = c。</p>\n\n<p><strong>示例1:</strong></p>\n\n<pre>\n<strong>输入:</strong> 5\n<strong>输出:</strong> True\n<strong>解释:</strong> 1 * 1 + 2 * 2 = 5\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例2:</strong></p>\n\n<pre>\n<strong>输入:</strong> 3\n<strong>输出:</strong> False\n</pre>\n","k-inverse-pairs-array":"<p>给出两个整数&nbsp;<code>n</code>&nbsp;和&nbsp;<code>k</code>，找出所有包含从&nbsp;<code>1</code>&nbsp;到&nbsp;<code>n</code>&nbsp;的数字，且恰好拥有&nbsp;<code>k</code>&nbsp;个逆序对的不同的数组的个数。</p>\n\n<p>逆序对的定义如下：对于数组的第<code>i</code>个和第&nbsp;<code>j</code>个元素，如果满<code>i</code>&nbsp;&lt;&nbsp;<code>j</code>且&nbsp;<code>a[i]</code>&nbsp;&gt;&nbsp;<code>a[j]</code>，则其为一个逆序对；否则不是。</p>\n\n<p>由于答案可能很大，只需要返回 答案 mod 10<sup>9</sup>&nbsp;+ 7 的值。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> n = 3, k = 0\n<strong>输出:</strong> 1\n<strong>解释:</strong> \n只有数组 [1,2,3] 包含了从1到3的整数并且正好拥有 0 个逆序对。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> n = 3, k = 1\n<strong>输出:</strong> 2\n<strong>解释:</strong> \n数组 [1,3,2] 和 [2,1,3] 都有 1 个逆序对。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>&nbsp;<code>n</code>&nbsp;的范围是 [1, 1000] 并且 <code>k</code> 的范围是 [0, 1000]。</li>\n</ol>\n","consecutive-available-seats":null,"maximum-distance-in-arrays":null,"minimum-index-sum-of-two-lists":"<p>假设Andy和Doris想在晚餐时选择一家餐厅，并且他们都有一个表示最喜爱餐厅的列表，每个餐厅的名字用字符串表示。</p>\n\n<p>你需要帮助他们用<strong>最少的索引和</strong>找出他们<strong>共同喜爱的餐厅</strong>。 如果答案不止一个，则输出所有答案并且不考虑顺序。 你可以假设总是存在一个答案。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong>\n[&quot;Shogun&quot;, &quot;Tapioca Express&quot;, &quot;Burger King&quot;, &quot;KFC&quot;]\n[&quot;Piatti&quot;, &quot;The Grill at Torrey Pines&quot;, &quot;Hungry Hunter Steakhouse&quot;, &quot;Shogun&quot;]\n<strong>输出:</strong> [&quot;Shogun&quot;]\n<strong>解释:</strong> 他们唯一共同喜爱的餐厅是&ldquo;Shogun&rdquo;。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong>\n[&quot;Shogun&quot;, &quot;Tapioca Express&quot;, &quot;Burger King&quot;, &quot;KFC&quot;]\n[&quot;KFC&quot;, &quot;Shogun&quot;, &quot;Burger King&quot;]\n<strong>输出:</strong> [&quot;Shogun&quot;]\n<strong>解释:</strong> 他们共同喜爱且具有最小索引和的餐厅是&ldquo;Shogun&rdquo;，它有最小的索引和1(0+1)。\n</pre>\n\n<p><strong>提示:</strong></p>\n\n<ol>\n\t<li>两个列表的长度范围都在&nbsp;[1, 1000]内。</li>\n\t<li>两个列表中的字符串的长度将在[1，30]的范围内。</li>\n\t<li>下标从0开始，到列表的长度减1。</li>\n\t<li>两个列表都没有重复的元素。</li>\n</ol>\n","find-customer-referee":null,"fraction-addition-and-subtraction":"<p>给定一个表示分数加减运算表达式的字符串，你需要返回一个字符串形式的计算结果。&nbsp;这个结果应该是不可约分的分数，即<a href=\"https://baike.baidu.com/item/%E6%9C%80%E7%AE%80%E5%88%86%E6%95%B0\" target=\"_blank\">最简分数</a>。&nbsp;如果最终结果是一个整数，例如&nbsp;<code>2</code>，你需要将它转换成分数形式，其分母为&nbsp;<code>1</code>。所以在上述例子中, <code>2</code>&nbsp;应该被转换为&nbsp;<code>2/1</code>。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>\n<strong>输入:</strong>&quot;-1/2+1/2&quot;\n<strong>输出:</strong> &quot;0/1&quot;\n</pre>\n\n<p><strong>&nbsp;示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong>&quot;-1/2+1/2+1/3&quot;\n<strong>输出:</strong> &quot;1/3&quot;\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong>&quot;1/3-1/2&quot;\n<strong>输出:</strong> &quot;-1/6&quot;\n</pre>\n\n<p><strong>示例 4:</strong></p>\n\n<pre>\n<strong>输入:</strong>&quot;5/3+1/3&quot;\n<strong>输出:</strong> &quot;2/1&quot;\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>输入和输出字符串只包含&nbsp;<code>&#39;0&#39;</code> 到&nbsp;<code>&#39;9&#39;</code>&nbsp;的数字，以及&nbsp;<code>&#39;/&#39;</code>, <code>&#39;+&#39;</code> 和&nbsp;<code>&#39;-&#39;</code>。&nbsp;</li>\n\t<li>输入和输出分数格式均为&nbsp;<code>&plusmn;分子/分母</code>。如果输入的第一个分数或者输出的分数是正数，则&nbsp;<code>&#39;+&#39;</code>&nbsp;会被省略掉。</li>\n\t<li>输入只包含合法的<strong>最简分数</strong>，每个分数的<strong>分子</strong>与<strong>分母</strong>的范围是&nbsp;&nbsp;[1,10]。&nbsp;如果分母是1，意味着这个分数实际上是一个整数。</li>\n\t<li>输入的分数个数范围是 [1,10]。</li>\n\t<li><strong>最终结果</strong>的分子与分母保证是 32 位整数范围内的有效整数。</li>\n</ol>\n","task-scheduler":"<p>给定一个用字符数组表示的 CPU 需要执行的任务列表。其中包含使用大写的 A - Z 字母表示的26 种不同种类的任务。任务可以以任意顺序执行，并且每个任务都可以在 1 个单位时间内执行完。CPU 在任何一个单位时间内都可以执行一个任务，或者在待命状态。</p>\n\n<p>然而，两个<strong>相同种类</strong>的任务之间必须有长度为<strong>&nbsp;n </strong>的冷却时间，因此至少有连续 n 个单位时间内 CPU 在执行不同的任务，或者在待命状态。</p>\n\n<p>你需要计算完成所有任务所需要的<strong>最短时间</strong>。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入:</strong> tasks = [&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;], n = 2\n<strong>输出:</strong> 8\n<strong>执行顺序:</strong> A -&gt; B -&gt; (待命) -&gt; A -&gt; B -&gt; (待命) -&gt; A -&gt; B.\n</pre>\n\n<p><strong>注：</strong></p>\n\n<ol>\n\t<li>任务的总个数为&nbsp;[1, 10000]。</li>\n\t<li>n 的取值范围为 [0, 100]。</li>\n</ol>\n","design-excel-sum-formula":null,"design-compressed-string-iterator":null,"students-report-by-geography":null,"triangle-judgement":null,"find-duplicate-file-in-system":"<p>给定一个目录信息列表，包括目录路径，以及该目录中的所有包含内容的文件，您需要找到文件系统中的所有重复文件组的路径。一组重复的文件至少包括<strong>二个</strong>具有完全相同内容的文件。</p>\n\n<p><strong>输入</strong>列表中的单个目录信息字符串的格式如下：</p>\n\n<p><code>&quot;root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)&quot;</code></p>\n\n<p>这意味着<strong>n</strong>档案（<code>f1.txt</code>,&nbsp;<code>f2.txt</code>&nbsp;...&nbsp;<code>fn.txt</code>&nbsp;有内容&nbsp;<code>f1_content</code>,&nbsp;<code>f2_content</code>&nbsp;...&nbsp;<code>fn_content</code>（分别）在目录&nbsp;<code>root/d1/d2/.../dm</code> 中注意，n&gt;=1 和 m&gt;=0。如果 m=0，则表示该目录只是根目录。</p>\n\n<p>该<strong>输出</strong>是重复文件路径组的列表。对于每个组，它包含具有相同内容的文件的所有文件路径。文件路径是具有下列格式的字符串：</p>\n\n<p><code>&quot;directory_path/file_name.txt&quot;</code></p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>\n[&quot;root/a 1.txt(abcd) 2.txt(efgh)&quot;, &quot;root/c 3.txt(abcd)&quot;, &quot;root/c/d 4.txt(efgh)&quot;, &quot;root 4.txt(efgh)&quot;]\n<strong>输出：</strong>  \n[[&quot;root/a/2.txt&quot;,&quot;root/c/d/4.txt&quot;,&quot;root/4.txt&quot;],[&quot;root/a/1.txt&quot;,&quot;root/c/3.txt&quot;]]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注：</strong></p>\n\n<ol>\n\t<li>最终输出不需要顺序。</li>\n\t<li>您可以假设目录名、文件名和文件内容只有字母和数字，并且文件内容的长度在 [1，50] 的范围内。</li>\n\t<li>给定的文件数量在 [1，20000] 个范围内。</li>\n\t<li>您可以假设在同一目录中没有任何文件或目录共享相同的名称。</li>\n\t<li>您可以假设每个给定的目录信息代表一个唯一的目录。目录路径和文件信息用一个空格分隔。</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>超越竞赛的后续行动：</strong></p>\n\n<ol>\n\t<li>假设您有一个真正的文件系统，您将如何搜索文件？广度搜索还是宽度搜索？</li>\n\t<li>如果文件内容非常大（GB级别），您将如何修改您的解决方案？</li>\n\t<li>如果每次只能读取 1 kb 的文件，您将如何修改解决方案？</li>\n\t<li>修改后的解决方案的时间复杂度是多少？其中最耗时的部分和消耗内存的部分是什么？如何优化？</li>\n\t<li>如何确保您发现的重复文件不是误报？</li>\n</ol>\n","maximum-product-of-three-numbers":"<p>给定一个整型数组，在数组中找出由三个数组成的最大乘积，并输出这个乘积。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,2,3]\n<strong>输出:</strong> 6\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,2,3,4]\n<strong>输出:</strong> 24\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>给定的整型数组长度范围是[3,10<sup>4</sup>]，数组中所有的元素范围是[-1000, 1000]。</li>\n\t<li>输入的数组中任意三个数的乘积不会超出32位有符号整数的范围。</li>\n</ol>\n","merge-two-binary-trees":"<p>给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。</p>\n\n<p>你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则<strong>不为&nbsp;</strong>NULL 的节点将直接作为新二叉树的节点。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n\tTree 1                     Tree 2                  \n          1                         2                             \n         / \\                       / \\                            \n        3   2                     1   3                        \n       /                           \\   \\                      \n      5                             4   7                  \n<strong>输出:</strong> \n合并后的树:\n\t     3\n\t    / \\\n\t   4   5\n\t  / \\   \\ \n\t 5   4   7\n</pre>\n\n<p><strong>注意:</strong>&nbsp;合并必须从两个树的根节点开始。</p>\n","average-salary-departments-vs-company":null,"construct-string-from-binary-tree":"<p>你需要采用前序遍历的方式，将一个二叉树转换成一个由括号和整数组成的字符串。</p>\n\n<p>空节点则用一对空括号 &quot;()&quot; 表示。而且你需要省略所有不影响字符串与原始二叉树之间的一对一映射关系的空括号对。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> 二叉树: [1,2,3,4]\n       1\n     /   \\\n    2     3\n   /    \n  4     \n\n<strong>输出:</strong> &quot;1(2(4))(3)&quot;\n\n<strong>解释:</strong> 原本将是&ldquo;1(2(4)())(3())&rdquo;，\n在你省略所有不必要的空括号对之后，\n它将是&ldquo;1(2(4))(3)&rdquo;。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> 二叉树: [1,2,3,null,4]\n       1\n     /   \\\n    2     3\n     \\  \n      4 \n\n<strong>输出:</strong> &quot;1(2()(4))(3)&quot;\n\n<strong>解释:</strong> 和第一个示例相似，\n除了我们不能省略第一个对括号来中断输入和输出之间的一对一映射关系。\n</pre>\n","friend-circles":"<p>班上有&nbsp;<strong>N&nbsp;</strong>名学生。其中有些人是朋友，有些则不是。他们的友谊具有是传递性。如果已知 A 是 B&nbsp;的朋友，B 是 C&nbsp;的朋友，那么我们可以认为 A 也是 C&nbsp;的朋友。所谓的朋友圈，是指所有朋友的集合。</p>\n\n<p>给定一个&nbsp;<strong>N * N&nbsp;</strong>的矩阵&nbsp;<strong>M</strong>，表示班级中学生之间的朋友关系。如果M[i][j] = 1，表示已知第 i 个和 j 个学生<strong>互为</strong>朋友关系，否则为不知道。你必须输出所有学生中的已知的朋友圈总数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n[[1,1,0],\n [1,1,0],\n [0,0,1]]\n<strong>输出:</strong> 2 \n<strong>说明：</strong>已知学生0和学生1互为朋友，他们在一个朋友圈。\n第2个学生自己在一个朋友圈。所以返回2。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n[[1,1,0],\n [1,1,1],\n [0,1,1]]\n<strong>输出:</strong> 1\n<strong>说明：</strong>已知学生0和学生1互为朋友，学生1和学生2互为朋友，所以学生0和学生2也是朋友，所以他们三个在一个朋友圈，返回1。\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li>N 在[1,200]的范围内。</li>\n\t<li>对于所有学生，有M[i][i] = 1。</li>\n\t<li>如果有M[i][j] = 1，则有M[j][i] = 1。</li>\n</ol>\n","permutation-in-string":"<p>给定两个字符串&nbsp;<strong>s1</strong>&nbsp;和&nbsp;<strong>s2</strong>，写一个函数来判断 <strong>s2</strong> 是否包含 <strong>s1&nbsp;</strong>的排列。</p>\n\n<p>换句话说，第一个字符串的排列之一是第二个字符串的子串。</p>\n\n<p><strong>示例1:</strong></p>\n\n<pre>\n<strong>输入: </strong>s1 = &quot;ab&quot; s2 = &quot;eidbaooo&quot;\n<strong>输出: </strong>True\n<strong>解释:</strong> s2 包含 s1 的排列之一 (&quot;ba&quot;).\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例2:</strong></p>\n\n<pre>\n<strong>输入: </strong>s1= &quot;ab&quot; s2 = &quot;eidboaoo&quot;\n<strong>输出:</strong> False\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li>输入的字符串只包含小写字母</li>\n\t<li>两个字符串的长度都在 [1, 10,000] 之间</li>\n</ol>\n","can-place-flowers":"<p>假设你有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花卉不能种植在相邻的地块上，它们会争夺水源，两者都会死去。</p>\n\n<p>给定一个花坛（表示为一个数组包含0和1，其中0表示没种植花，1表示种植了花），和一个数&nbsp;<strong>n&nbsp;</strong>。能否在不打破种植规则的情况下种入&nbsp;<strong>n&nbsp;</strong>朵花？能则返回True，不能则返回False。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> flowerbed = [1,0,0,0,1], n = 1\n<strong>输出:</strong> True\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> flowerbed = [1,0,0,0,1], n = 2\n<strong>输出:</strong> False\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>数组内已种好的花不会违反种植规则。</li>\n\t<li>输入的数组长度范围为 [1, 20000]。</li>\n\t<li><strong>n</strong> 是非负整数，且不会超过输入数组的大小。</li>\n</ol>\n","big-countries":"<p>这里有张&nbsp;<code>World</code> 表</p>\n\n<pre>+-----------------+------------+------------+--------------+---------------+\n| name            | continent  | area       | population   | gdp           |\n+-----------------+------------+------------+--------------+---------------+\n| Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |\n| Albania         | Europe     | 28748      | 2831741      | 12960000      |\n| Algeria         | Africa     | 2381741    | 37100000     | 188681000     |\n| Andorra         | Europe     | 468        | 78115        | 3712000       |\n| Angola          | Africa     | 1246700    | 20609294     | 100990000     |\n+-----------------+------------+------------+--------------+---------------+\n</pre>\n\n<p>如果一个国家的面积超过300万平方公里，或者人口超过2500万，那么这个国家就是大国家。</p>\n\n<p>编写一个SQL查询，输出表中所有大国家的名称、人口和面积。</p>\n\n<p>例如，根据上表，我们应该输出:</p>\n\n<pre>+--------------+-------------+--------------+\n| name         | population  | area         |\n+--------------+-------------+--------------+\n| Afghanistan  | 25500100    | 652230       |\n| Algeria      | 37100000    | 2381741      |\n+--------------+-------------+--------------+\n</pre>\n","out-of-boundary-paths":"<p>给定一个 <strong>m &times; n </strong>的网格和一个球。球的起始坐标为&nbsp;<strong>(i,j)</strong>&nbsp;，你可以将球移到<strong>相邻</strong>的单元格内，或者往上、下、左、右四个方向上移动使球穿过网格边界。但是，你<strong>最多</strong>可以移动&nbsp;<strong>N&nbsp;</strong>次。找出可以将球移出边界的路径数量。答案可能非常大，返回 结果 mod 10<sup>9</sup>&nbsp;+ 7 的值。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>示例 1：</strong></p>\r\n\r\n<pre><strong>输入: </strong>m = 2, n = 2, N = 2, i = 0, j = 0\r\n<strong>输出:</strong> 6\r\n<strong>解释:</strong>\r\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/out_of_boundary_paths_1.png\" style=\"width: 100%; max-width: 400px\">\r\n</pre>\r\n\r\n<p><strong>示例 2：</strong></p>\r\n\r\n<pre><strong>输入: </strong>m = 1, n = 3, N = 3, i = 0, j = 1\r\n<strong>输出:</strong> 12\r\n<strong>解释:</strong>\r\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/out_of_boundary_paths_2.png\" style=\"width: 100%; max-width: 400px\">\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>说明:</strong></p>\r\n\r\n<ol>\r\n\t<li>球一旦出界，就不能再被移动回网格内。</li>\r\n\t<li>网格的长度和高度在 [1,50] 的范围内。</li>\r\n\t<li>N 在 [0,50] 的范围内。</li>\r\n</ol>","single-element-in-a-sorted-array":"<p>给定一个只包含整数的有序数组，每个元素都会出现两次，唯有一个数只会出现一次，找出这个数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,1,2,3,3,4,4,8,8]\n<strong>输出:</strong> 2\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> [3,3,7,7,10,11,11]\n<strong>输出:</strong> 10\n</pre>\n\n<p><strong>注意:</strong> 您的方案应该在 O(log n)时间复杂度和 O(1)空间复杂度中运行。</p>\n","find-the-closest-palindrome":"<p>给定一个整数 n ，你需要找到与它最近的回文数（不包括自身）。</p>\n\n<p>&ldquo;最近的&rdquo;定义为两个整数<strong>差的绝对值</strong>最小。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;123&quot;\n<strong>输出:</strong> &quot;121&quot;\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li><strong>n </strong>是由字符串表示的正整数，其长度不超过18。</li>\n\t<li>如果有多个结果，返回最小的那个。</li>\n</ol>\n","reshape-the-matrix":"<p>在MATLAB中，有一个非常有用的函数 <code>reshape</code>，它可以将一个矩阵重塑为另一个大小不同的新矩阵，但保留其原始数据。</p>\n\n<p>给出一个由二维数组表示的矩阵，以及两个正整数<code>r</code>和<code>c</code>，分别表示想要的重构的矩阵的行数和列数。</p>\n\n<p>重构后的矩阵需要将原始矩阵的所有元素以相同的<strong>行遍历顺序</strong>填充。</p>\n\n<p>如果具有给定参数的<code>reshape</code>操作是可行且合理的，则输出新的重塑矩阵；否则，输出原始矩阵。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> \nnums = \n[[1,2],\n [3,4]]\nr = 1, c = 4\n<strong>输出:</strong> \n[[1,2,3,4]]\n<strong>解释:</strong>\n行遍历nums的结果是 [1,2,3,4]。新的矩阵是 1 * 4 矩阵, 用之前的元素值一行一行填充新矩阵。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> \nnums = \n[[1,2],\n [3,4]]\nr = 2, c = 4\n<strong>输出:</strong> \n[[1,2],\n [3,4]]\n<strong>解释:</strong>\n没有办法将 2 * 2 矩阵转化为 2 * 4 矩阵。 所以输出原矩阵。\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li>给定矩阵的宽和高范围在 [1, 100]。</li>\n\t<li>给定的 r 和 c 都是正数。</li>\n</ol>\n","delete-operation-for-two-strings":"<p>给定两个单词&nbsp;<em>word1&nbsp;</em>和&nbsp;<em>word2</em>，找到使得&nbsp;<em>word1&nbsp;</em>和&nbsp;<em>word2&nbsp;</em>相同所需的最小步数，每步可以删除任意一个字符串中的一个字符。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;sea&quot;, &quot;eat&quot;\n<strong>输出:</strong> 2\n<strong>解释:</strong> 第一步将&quot;sea&quot;变为&quot;ea&quot;，第二步将&quot;eat&quot;变为&quot;ea&quot;\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>给定单词的长度不超过500。</li>\n\t<li>给定单词中的字符只含有小写字母。</li>\n</ol>\n","shortest-unsorted-continuous-subarray":"<p>给定一个整数数组，你需要寻找一个<strong>连续的子数组</strong>，如果对这个子数组进行升序排序，那么整个数组都会变为升序排序。</p>\n\n<p>你找到的子数组应是<strong>最短</strong>的，请输出它的长度。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [2, 6, 4, 8, 10, 9, 15]\n<strong>输出:</strong> 5\n<strong>解释:</strong> 你只需要对 [6, 4, 8, 10, 9] 进行升序排序，那么整个表都会变为升序排序。\n</pre>\n\n<p><strong>说明 :</strong></p>\n\n<ol>\n\t<li>输入的数组长度范围在&nbsp;[1, 10,000]。</li>\n\t<li>输入的数组可能包含<strong>重复</strong>元素&nbsp;，所以<strong>升序</strong>的意思是<strong>&lt;=。</strong></li>\n</ol>\n","employee-bonus":null,"count-student-number-in-departments":null,"find-cumulative-salary-of-an-employee":null,"winning-candidate":null,"sales-person":null,"array-partition-i":"<p>给定长度为&nbsp;<strong>2n&nbsp;</strong>的数组, 你的任务是将这些数分成&nbsp;<strong>n </strong>对, 例如 (a<sub>1</sub>, b<sub>1</sub>), (a<sub>2</sub>, b<sub>2</sub>), ..., (a<sub>n</sub>, b<sub>n</sub>) ，使得从1 到&nbsp;n 的 min(a<sub>i</sub>, b<sub>i</sub>) 总和最大。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,4,3,2]\n\n<strong>输出:</strong> 4\n<strong>解释:</strong> n 等于 2, 最大总和为 4 = min(1, 2) + min(3, 4).\n</pre>\n\n<p><strong>提示:</strong></p>\n\n<ol>\n\t<li><strong>n</strong>&nbsp;是正整数,范围在 [1, 10000].</li>\n\t<li>数组中的元素范围在 [-10000, 10000].</li>\n</ol>\n","find-median-given-frequency-of-numbers":null,"convert-bst-to-greater-tree":"<p>给定一个二叉搜索树（Binary Search Tree），把它转换成为累加树（Greater Tree)，使得每个节点的值是原来的节点值加上所有大于它的节点值之和。</p>\n\n<p><strong>例如：</strong></p>\n\n<pre>\n<strong>输入:</strong> 二叉搜索树:\n              5\n            /   \\\n           2     13\n\n<strong>输出:</strong> 转换为累加树:\n             18\n            /   \\\n          20     13\n</pre>\n","01-matrix":"<p>给定一个由 0 和 1 组成的矩阵，找出每个元素到最近的 0 的距离。</p>\n\n<p>两个相邻元素间的距离为 1 。</p>\n\n<p><strong>示例 1: </strong><br />\n输入:</p>\n\n<pre>\n0 0 0\n0 1 0\n0 0 0\n</pre>\n\n<p>输出:</p>\n\n<pre>\n0 0 0\n0 1 0\n0 0 0\n</pre>\n\n<p><strong>示例 2: </strong><br />\n输入:</p>\n\n<pre>\n0 0 0\n0 1 0\n1 1 1\n</pre>\n\n<p>输出:</p>\n\n<pre>\n0 0 0\n0 1 0\n1 2 1\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>给定矩阵的元素个数不超过 10000。</li>\n\t<li>给定矩阵中至少有一个元素是 0。</li>\n\t<li>矩阵中的元素只在四个方向上相邻: 上、下、左、右。</li>\n</ol>\n","array-nesting":"<p>索引从<code>0</code>开始长度为<code>N</code>的数组<code>A</code>，包含<code>0</code>到<code>N - 1</code>的所有整数。找到并返回最大的集合<code>S</code>，<code>S[i] = {A[i], A[A[i]], A[A[A[i]]], ... }</code>且遵守以下的规则。</p>\n\n<p>假设选择索引为<code>i</code>的元素<code>A[i]</code>为<code>S</code>的第一个元素，<code>S</code>的下一个元素应该是<code>A[A[i]]</code>，之后是<code>A[A[A[i]]]...</code> 以此类推，不断添加直到<code>S</code>出现重复的元素。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>\n<strong>输入:</strong> A = [5,4,0,3,1,6,2]\n<strong>输出:</strong> 4\n<strong>解释:</strong> \nA[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.\n\n其中一种最长的 S[K]:\nS[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li><code>N</code>是<code>[1, 20,000]</code>之间的整数。</li>\n\t<li><code>A</code>中不含有重复的元素。</li>\n\t<li><code>A</code>中的元素大小在<code>[0, N-1]</code>之间。</li>\n</ol>\n","shortest-distance-in-a-line":null,"split-array-with-equal-sum":null,"distribute-candies":"<p>给定一个<strong>偶数</strong>长度的数组，其中不同的数字代表着不同种类的糖果，每一个数字代表一个糖果。你需要把这些糖果<strong>平均</strong>分给一个弟弟和一个妹妹。返回妹妹可以获得的最大糖果的种类数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> candies = [1,1,2,2,3,3]\n<strong>输出:</strong> 3\n<strong>解析: </strong>一共有三种种类的糖果，每一种都有两个。\n     最优分配方案：妹妹获得[1,2,3],弟弟也获得[1,2,3]。这样使妹妹获得糖果的种类数最多。\n</pre>\n\n<p><strong>示例 2 :</strong></p>\n\n<pre>\n<strong>输入:</strong> candies = [1,1,2,3]\n<strong>输出:</strong> 2\n<strong>解析:</strong> 妹妹获得糖果[2,3],弟弟获得糖果[1,1]，妹妹有两种不同的糖果，弟弟只有一种。这样使得妹妹可以获得的糖果种类数最多。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>数组的长度为[2, 10,000]，并且确定为偶数。</li>\n\t<li>数组中数字的大小在范围[-100,000, 100,000]内。\n\t<ol>\n\t</ol>\n\t</li>\n</ol>\n","optimal-division":"<p>给定一组<strong>正整数，</strong>相邻的整数之间将会进行浮点除法操作。例如，&nbsp;[2,3,4] -&gt; 2 / 3 / 4 。</p>\n\n<p>但是，你可以在任意位置添加任意数目的括号，来改变算数的优先级。你需要找出怎么添加括号，才能得到<strong>最大的</strong>结果，并且返回相应的字符串格式的表达式。<strong>你的表达式不应该含有冗余的括号。</strong></p>\n\n<p><strong>示例：</strong></p>\n\n<pre>\n<strong>输入:</strong> [1000,100,10,2]\n<strong>输出:</strong> &quot;1000/(100/10/2)&quot;\n<strong>解释:</strong>\n1000/(100/10/2) = 1000/((100/10)/2) = 200\n但是，以下加粗的括号 &quot;1000/(<strong>(</strong>100/10<strong>)</strong>/2)&quot; 是冗余的，\n因为他们并不影响操作的优先级，所以你需要返回 &quot;1000/(100/10/2)&quot;。\n\n其他用例:\n1000/(100/10)/2 = 50\n1000/(100/(10/2)) = 50\n1000/100/10/2 = 0.5\n1000/100/(10/2) = 2\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>输入数组的长度在 [1, 10] 之间。</li>\n\t<li>数组中每个元素的大小都在 [2, 1000] 之间。</li>\n\t<li>每个测试用例只有一个最优除法解。</li>\n</ol>\n","shortest-distance-in-a-plane":null,"course-schedule-iii":"<p>这里有 <code>n</code> 门不同的在线课程，他们按从 <code>1</code> 到 <code>n</code>&nbsp;编号。每一门课程有一定的持续上课时间（课程时间）<code>t</code> 以及关闭时间第 d<sub>&nbsp;</sub>天。一门课要持续学习 <code>t</code> 天直到第 d<span style=\"font-size:10.5px\"> </span>天时要完成，你将会从第 1 天开始。</p>\n\n<p>给出 <code>n</code> 个在线课程用 <code>(t, d)</code> 对表示。你的任务是找出最多可以修几门课。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>\n<strong>输入:</strong> [[100, 200], [200, 1300], [1000, 1250], [2000, 3200]]\n<strong>输出:</strong> 3\n<strong>解释:</strong> \n这里一共有 4 门课程, 但是你最多可以修 3 门:\n首先, 修第一门课时, 它要耗费 100 天，你会在第 100 天完成, 在第 101 天准备下门课。\n第二, 修第三门课时, 它会耗费 1000 天，所以你将在第 1100 天的时候完成它, 以及在第 1101 天开始准备下门课程。\n第三, 修第二门课时, 它会耗时 200 天，所以你将会在第 1300 天时完成它。\n第四门课现在不能修，因为你将会在第 3300 天完成它，这已经超出了关闭日期。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示:</strong></p>\n\n<ol>\n\t<li>整数 1 &lt;= d, t, n &lt;= 10,000 。</li>\n\t<li>你不能同时修两门课程。</li>\n</ol>\n\n<p>&nbsp;</p>\n","lonely-pixel-i":null,"tag-validator":"<p>给定一个表示代码片段的字符串，你需要实现一个验证器来解析这段代码，并返回它是否合法。合法的代码片段需要遵守以下的所有规则：</p>\n\n<ol>\n\t<li>代码必须被<strong>合法的闭合标签</strong>包围。否则，代码是无效的。</li>\n\t<li><strong>闭合标签</strong>（不一定合法）要严格符合格式：<code>&lt;TAG_NAME&gt;TAG_CONTENT&lt;/TAG_NAME&gt;</code>。其中，<code>&lt;TAG_NAME&gt;</code>是起始标签，<code>&lt;/TAG_NAME&gt;</code>是结束标签。起始和结束标签中的 TAG_NAME 应当相同。当且仅当&nbsp;TAG_NAME 和 TAG_CONTENT 都是合法的，闭合标签才是<strong>合法的</strong>。</li>\n\t<li><strong>合法的</strong>&nbsp;<code>TAG_NAME</code>&nbsp;仅含有<strong>大写字母</strong>，长度在范围 [1,9] 之间。否则，该&nbsp;<code>TAG_NAME</code>&nbsp;是<strong>不合法的</strong>。</li>\n\t<li><strong>合法的</strong>&nbsp;<code>TAG_CONTENT</code>&nbsp;可以包含其他<strong>合法的闭合标签</strong>，<strong>cdata</strong>&nbsp;（请参考规则7）和任意字符（注意参考规则1）<strong>除了</strong>不匹配的<code>&lt;</code>、不匹配的起始和结束标签、不匹配的或带有不合法 TAG_NAME 的闭合标签。否则，<code>TAG_CONTENT</code>&nbsp;是<strong>不合法的</strong>。</li>\n\t<li>一个起始标签，如果没有具有相同&nbsp;TAG_NAME 的结束标签与之匹配，是不合法的。反之亦然。不过，你也需要考虑标签嵌套的问题。</li>\n\t<li>一个<code>&lt;</code>，如果你找不到一个后续的<code>&gt;</code>与之匹配，是不合法的。并且当你找到一个<code>&lt;</code>或<code>&lt;/</code>时，所有直到下一个<code>&gt;</code>的前的字符，都应当被解析为&nbsp;TAG_NAME（不一定合法）。</li>\n\t<li>cdata 有如下格式：<code>&lt;![CDATA[CDATA_CONTENT]]&gt;</code>。<code>CDATA_CONTENT</code>&nbsp;的范围被定义成&nbsp;<code>&lt;![CDATA[</code>&nbsp;和<strong>后续的第一个</strong>&nbsp;<code>]]&gt;</code>之间的字符。</li>\n\t<li><code>CDATA_CONTENT</code>&nbsp;可以包含<strong>任意字符</strong>。cdata 的功能是阻止验证器解析<code>CDATA_CONTENT</code>，所以即使其中有一些字符可以被解析为标签（无论合法还是不合法），也应该将它们视为<strong>常规字符</strong>。</li>\n</ol>\n\n<p><strong>合法代码的例子:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;&lt;DIV&gt;This is the first line &lt;![CDATA[&lt;div&gt;]]&gt;&lt;/DIV&gt;&quot;\n\n<strong>输出:</strong> True\n\n<strong>解释:</strong> \n\n代码被包含在了闭合的标签内： &lt;DIV&gt; 和 &lt;/DIV&gt; 。\n\nTAG_NAME 是合法的，TAG_CONTENT 包含了一些字符和 cdata 。 \n\n即使 CDATA_CONTENT 含有不匹配的起始标签和不合法的 TAG_NAME，它应该被视为普通的文本，而不是标签。\n\n所以 TAG_CONTENT 是合法的，因此代码是合法的。最终返回True。\n\n\n<strong>输入:</strong> &quot;&lt;DIV&gt;&gt;&gt;  ![cdata[]] &lt;![CDATA[&lt;div&gt;]&gt;]]&gt;]]&gt;&gt;]&lt;/DIV&gt;&quot;\n\n<strong>输出:</strong> True\n\n<strong>解释:</strong>\n\n我们首先将代码分割为： start_tag|tag_content|end_tag 。\n\nstart_tag -&gt; <strong>&quot;&lt;DIV&gt;&quot;</strong>\n\nend_tag -&gt; <strong>&quot;&lt;/DIV&gt;&quot;</strong>\n\ntag_content 也可被分割为： text1|cdata|text2 。\n\ntext1 -&gt; <strong>&quot;&gt;&gt;  ![cdata[]] &quot;</strong>\n\ncdata -&gt; <strong>&quot;&lt;![CDATA[&lt;div&gt;]&gt;]]&gt;&quot;</strong> ，其中 CDATA_CONTENT 为 <strong>&quot;&lt;div&gt;]&gt;&quot;</strong>\n\ntext2 -&gt; <strong>&quot;]]&gt;&gt;]&quot;</strong>\n\n\nstart_tag <strong>不</strong>是 <strong>&quot;&lt;DIV&gt;&gt;&gt;&quot;</strong> 的原因参照规则 6 。\ncdata <strong>不</strong>是 <strong>&quot;&lt;![CDATA[&lt;div&gt;]&gt;]]&gt;]]&gt;&quot;</strong> 的原因参照规则 7 。\n</pre>\n\n<p><strong>不合法代码的例子:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;&lt;A&gt;  &lt;B&gt; &lt;/A&gt;   &lt;/B&gt;&quot;\n<strong>输出:</strong> False\n<strong>解释:</strong> 不合法。如果 &quot;&lt;A&gt;&quot; 是闭合的，那么 &quot;&lt;B&gt;&quot; 一定是不匹配的，反之亦然。\n\n<strong>输入:</strong> &quot;&lt;DIV&gt;  div tag is not closed  &lt;DIV&gt;&quot;\n<strong>输出:</strong> False\n\n<strong>输入:</strong> &quot;&lt;DIV&gt;  unmatched &lt;  &lt;/DIV&gt;&quot;\n<strong>输出:</strong> False\n\n<strong>输入:</strong> &quot;&lt;DIV&gt; closed tags with invalid tag name  &lt;b&gt;123&lt;/b&gt; &lt;/DIV&gt;&quot;\n<strong>输出:</strong> False\n\n<strong>输入:</strong> &quot;&lt;DIV&gt; unmatched tags with invalid tag name  &lt;/1234567890&gt; and &lt;CDATA[[]]&gt;  &lt;/DIV&gt;&quot;\n<strong>输出:</strong> False\n\n<strong>输入:</strong> &quot;&lt;DIV&gt;  unmatched start tag &lt;B&gt;  and unmatched end tag &lt;/C&gt;  &lt;/DIV&gt;&quot;\n<strong>输出:</strong> False\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>为简明起见，你可以假设输入的代码（包括提到的<strong>任意字符</strong>）只包含<code>数字</code>, <font color=\"#c7254e\" face=\"Menlo, Monaco, Consolas, Courier New, monospace\"><span style=\"background-color:#f9f2f4; font-size:12.6px\">字母</span></font>, <code>&#39;&lt;&#39;</code>,<code>&#39;&gt;&#39;</code>,<code>&#39;/&#39;</code>,<code>&#39;!&#39;</code>,<code>&#39;[&#39;</code>,<code>&#39;]&#39;</code>和<code>&#39; &#39;</code>。</li>\n</ol>\n","brick-wall":"<p>你的面前有一堵方形的、由多行砖块组成的砖墙。&nbsp;这些砖块高度相同但是宽度不同。你现在要画一条<strong>自顶向下</strong>的、穿过<strong>最少</strong>砖块的垂线。</p>\r\n\r\n<p>砖墙由行的列表表示。 每一行都是一个代表从左至右每块砖的宽度的整数列表。</p>\r\n\r\n<p>如果你画的线只是从砖块的边缘经过，就不算穿过这块砖。你需要找出怎样画才能使这条线穿过的砖块数量最少，并且返回穿过的砖块数量。</p>\r\n\r\n<p><strong>你不能沿着墙的两个垂直边缘之一画线，这样显然是没有穿过一块砖的。</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>示例：</strong></p>\r\n\r\n<pre><strong>输入:</strong> [[1,2,2,1],\r\n      [3,1,2],\r\n      [1,3,2],\r\n      [2,4],\r\n      [3,1,2],\r\n      [1,3,1,1]]\r\n\r\n<strong>输出:</strong> 2\r\n\r\n<strong>解释:</strong> \r\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/brick_wall.png\" style=\"width: 100%; max-width: 350px\">\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>提示：</strong></p>\r\n\r\n<ol>\r\n\t<li>每一行砖块的宽度之和应该相等，并且不能超过 INT_MAX。</li>\r\n\t<li>每一行砖块的数量在&nbsp;[1,10,000] 范围内，&nbsp;墙的高度在&nbsp;[1,10,000] 范围内，&nbsp;总的砖块数量不超过 20,000。</li>\r\n</ol>","diameter-of-binary-tree":"<p>给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过根结点。</p>\n\n<p><strong>示例 :</strong><br />\n给定二叉树</p>\n\n<pre>\n          1\n         / \\\n        2   3\n       / \\     \n      4   5    \n</pre>\n\n<p>返回&nbsp;<strong>3</strong>, 它的长度是路径 [4,2,1,3] 或者&nbsp;[5,2,1,3]。</p>\n\n<p><strong>注意：</strong>两结点之间的路径长度是以它们之间边的数目表示。</p>\n","find-the-derangement-of-an-array":null,"binary-tree-tilt":"<p>给定一个二叉树，计算<strong>整个树</strong>的坡度。</p>\n\n<p>一个树的<strong>节点的坡度</strong>定义即为，该节点左子树的结点之和和右子树结点之和的<strong>差的绝对值</strong>。空结点的的坡度是0。</p>\n\n<p><strong>整个树</strong>的坡度就是其所有节点的坡度之和。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n         1\n       /   \\\n      2     3\n<strong>输出:</strong> 1\n<strong>解释:</strong> \n结点的坡度 2 : 0\n结点的坡度 3 : 0\n结点的坡度 1 : |2-3| = 1\n树的坡度 : 0 + 0 + 1 = 1\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>任何子树的结点的和不会超过32位整数的范围。</li>\n\t<li>坡度的值不会超过32位整数的范围。</li>\n</ol>\n","k-diff-pairs-in-an-array":"<p>给定一个整数数组和一个整数&nbsp;<strong>k</strong>, 你需要在数组里找到<strong>不同的&nbsp;</strong>k-diff 数对。这里将&nbsp;<strong>k-diff</strong>&nbsp;数对定义为一个整数对 (i, j), 其中<strong> i </strong>和<strong> j </strong>都是数组中的数字，且两数之差的绝对值是&nbsp;<strong>k</strong>.</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [3, 1, 4, 1, 5], k = 2\n<strong>输出:</strong> 2\n<strong>解释: </strong>数组中有两个 2-diff 数对, (1, 3) 和 (3, 5)。\n尽管数组中有两个1，但我们只应返回不同的数对的数量。\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre>\n<strong>输入:</strong>[1, 2, 3, 4, 5], k = 1\n<strong>输出: </strong>4\n<strong>解释:</strong> 数组中有四个 1-diff 数对, (1, 2), (2, 3), (3, 4) 和 (4, 5)。\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入: </strong>[1, 3, 1, 5, 4], k = 0\n<strong>输出: </strong>1\n<strong>解释:</strong> 数组中只有一个 0-diff 数对，(1, 1)。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>数对 (i, j) 和数对&nbsp;(j, i) 被算作同一数对。</li>\n\t<li>数组的长度不超过10,000。</li>\n\t<li>所有输入的整数的范围在&nbsp;[-1e7, 1e7]。</li>\n</ol>\n","output-contest-matches":null,"boundary-of-binary-tree":null,"minesweeper":"<p>让我们一起来玩扫雷游戏！</p>\r\n\r\n<p>给定一个代表游戏板的二维字符矩阵。&nbsp;<strong>&#39;M&#39;</strong>&nbsp;代表一个<strong>未挖出的</strong>地雷，<strong>&#39;E&#39;</strong>&nbsp;代表一个<strong>未挖出的</strong>空方块，<strong>&#39;B&#39;&nbsp;</strong>代表没有相邻（上，下，左，右，和所有4个对角线）地雷的<strong>已挖出的</strong>空白方块，<strong>数字</strong>（&#39;1&#39; 到 &#39;8&#39;）表示有多少地雷与这块<strong>已挖出的</strong>方块相邻，<strong>&#39;X&#39;</strong>&nbsp;则表示一个<strong>已挖出的</strong>地雷。</p>\r\n\r\n<p>现在给出在所有<strong>未挖出的</strong>方块中（&#39;M&#39;或者&#39;E&#39;）的下一个点击位置（行和列索引），根据以下规则，返回相应位置被点击后对应的面板：</p>\r\n\r\n<ol>\r\n\t<li>如果一个地雷（&#39;M&#39;）被挖出，游戏就结束了- 把它改为&nbsp;<strong>&#39;X&#39;</strong>。</li>\r\n\t<li>如果一个<strong>没有相邻地雷</strong>的空方块（&#39;E&#39;）被挖出，修改它为（&#39;B&#39;），并且所有和其相邻的方块都应该被递归地揭露。</li>\r\n\t<li>如果一个<strong>至少与一个地雷相邻</strong>的空方块（&#39;E&#39;）被挖出，修改它为数字（&#39;1&#39;到&#39;8&#39;），表示相邻地雷的数量。</li>\r\n\t<li>如果在此次点击中，若无更多方块可被揭露，则返回面板。</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>示例 1：</strong></p>\r\n\r\n<pre><strong>输入:</strong> \r\n\r\n[[&#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;],\r\n [&#39;E&#39;, &#39;E&#39;, &#39;M&#39;, &#39;E&#39;, &#39;E&#39;],\r\n [&#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;],\r\n [&#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;]]\r\n\r\nClick : [3,0]\r\n\r\n<strong>输出:</strong> \r\n\r\n[[&#39;B&#39;, &#39;1&#39;, &#39;E&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;1&#39;, &#39;M&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;1&#39;, &#39;1&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;]]\r\n\r\n<strong>解释:</strong>\r\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/minesweeper_example_1.png\" style=\"width: 100%; max-width: 400px\">\r\n</pre>\r\n\r\n<p><strong>示例 2：</strong></p>\r\n\r\n<pre><strong>输入:</strong> \r\n\r\n[[&#39;B&#39;, &#39;1&#39;, &#39;E&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;1&#39;, &#39;M&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;1&#39;, &#39;1&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;]]\r\n\r\nClick : [1,2]\r\n\r\n<strong>输出:</strong> \r\n\r\n[[&#39;B&#39;, &#39;1&#39;, &#39;E&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;1&#39;, &#39;X&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;1&#39;, &#39;1&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;]]\r\n\r\n<strong>解释:</strong>\r\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/minesweeper_example_2.png\" style=\"width: 100%; max-width: 400px\">\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>注意：</strong></p>\r\n\r\n<ol>\r\n\t<li>输入矩阵的宽和高的范围为 [1,50]。</li>\r\n\t<li>点击的位置只能是未被挖出的方块 (&#39;M&#39; 或者 &#39;E&#39;)，这也意味着面板至少包含一个可点击的方块。</li>\r\n\t<li>输入面板不会是游戏结束的状态（即有地雷已被挖出）。</li>\r\n\t<li>简单起见，未提及的规则在这个问题中可被忽略。例如，当游戏结束时你不需要挖出所有地雷，考虑所有你可能赢得游戏或标记方块的情况。</li>\r\n</ol>","friend-requests-i-overall-acceptance-rate":null,"squirrel-simulation":null,"construct-binary-tree-from-string":null,"complex-number-multiplication":"<p>给定两个表示<a href=\"https://baike.baidu.com/item/%E5%A4%8D%E6%95%B0/254365?fr=aladdin\">复数</a>的字符串。</p>\n\n<p>返回表示它们乘积的字符串。注意，根据定义 i<sup>2</sup> = -1 。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;1+1i&quot;, &quot;1+1i&quot;\n<strong>输出:</strong> &quot;0+2i&quot;\n<strong>解释:</strong> (1 + i) * (1 + i) = 1 + i<sup>2</sup> + 2 * i = 2i ，你需要将它转换为 0+2i 的形式。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;1+-1i&quot;, &quot;1+-1i&quot;\n<strong>输出:</strong> &quot;0+-2i&quot;\n<strong>解释:</strong> (1 - i) * (1 - i) = 1 + i<sup>2</sup> - 2 * i = -2i ，你需要将它转换为 0+-2i 的形式。 \n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>输入字符串不包含额外的空格。</li>\n\t<li>输入字符串将以&nbsp;<strong>a+bi</strong> 的形式给出，其中整数 <strong>a</strong> 和 <strong>b</strong> 的范围均在 [-100, 100] 之间。<strong>输出也应当符合这种形式</strong>。</li>\n</ol>\n","add-bold-tag-in-string":null,"maximum-vacation-days":null,"minimum-time-difference":"<p>给定一个 24 小时制（小时:分钟）的时间列表，找出列表中任意两个时间的最小时间差并已分钟数表示。</p>\n\n<p><br />\n<strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入:</strong> [&quot;23:59&quot;,&quot;00:00&quot;]\n<strong>输出:</strong> 1\n</pre>\n\n<p><br />\n<strong>备注:</strong></p>\n\n<ol>\n\t<li>列表中时间数在 2~20000 之间。</li>\n\t<li>每个时间取值在 00:00~23:59 之间。</li>\n</ol>\n","investments-in-2016":null,"design-in-memory-file-system":null,"binary-tree-longest-consecutive-sequence-ii":null,"get-highest-answer-rate-question":null,"median-employee-salary":null,"lonely-pixel-ii":null,"next-greater-element-iii":"<p>给定一个<strong>32位</strong>正整数&nbsp;<strong>n</strong>，你需要找到最小的<strong>32位</strong>整数，其与&nbsp;<strong>n&nbsp;</strong>中存在的位数完全相同，并且其值大于n。如果不存在这样的<strong>32位</strong>整数，则返回-1。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> 12\n<strong>输出:</strong> 21\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> 21\n<strong>输出:</strong> -1\n</pre>\n","managers-with-at-least-5-direct-reports":null,"student-attendance-record-i":"<p>给定一个字符串来代表一个学生的出勤记录，这个记录仅包含以下三个字符：</p>\n\n<ol>\n\t<li><strong>&#39;A&#39;</strong> : Absent，缺勤</li>\n\t<li><strong>&#39;L&#39;</strong> : Late，迟到</li>\n\t<li><strong>&#39;P&#39;</strong> : Present，到场</li>\n</ol>\n\n<p>如果一个学生的出勤记录中不<strong>超过一个&#39;A&#39;(缺勤)</strong>并且<strong>不超过两个连续的&#39;L&#39;(迟到)</strong>,那么这个学生会被奖赏。</p>\n\n<p>你需要根据这个学生的出勤记录判断他是否会被奖赏。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> &quot;PPALLP&quot;\n<strong>输出:</strong> True\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> &quot;PPALLL&quot;\n<strong>输出:</strong> False\n</pre>\n","reverse-string-ii":"<p>给定一个字符串和一个整数 k，你需要对从字符串开头算起的每个 2k 个字符的前k个字符进行反转。如果剩余少于 k 个字符，则将剩余的所有全部反转。如果有小于 2k 但大于或等于 k 个字符，则反转前 k 个字符，并将剩余的字符保持原样。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\n<strong>输入:</strong> s = &quot;abcdefg&quot;, k = 2\n<strong>输出:</strong> &quot;bacdfeg&quot;\n</pre>\n\n<p><strong>要求:</strong></p>\n\n<ol>\n\t<li>该字符串只包含小写的英文字母。</li>\n\t<li>给定字符串的长度和 k 在[1, 10000]范围内。</li>\n</ol>\n","continuous-subarray-sum":"<p>给定一个包含<strong>非负数</strong>的数组和一个目标<strong>整数</strong>&nbsp;k，编写一个函数来判断该数组是否含有连续的子数组，其大小至少为 2，总和为 <strong>k</strong> 的倍数，即总和为 n*k，其中 n 也是一个<strong>整数</strong>。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [23,2,4,6,7], k = 6\n<strong>输出:</strong> True\n<strong>解释:</strong> [2,4] 是一个大小为 2 的子数组，并且和为 6。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [23,2,6,4,7], k = 6\n<strong>输出:</strong> True\n<strong>解释:</strong> [23,2,6,4,7]是大小为 5 的子数组，并且和为 42。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>数组的长度不会超过10,000。</li>\n\t<li>你可以认为所有数字总和在 32 位有符号整数范围内。</li>\n</ol>\n","reverse-words-in-a-string-iii":"<p>给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>\n输入: &quot;Let&#39;s take LeetCode contest&quot;\n输出: &quot;s&#39;teL ekat edoCteeL tsetnoc&quot;<strong><strong><strong>&nbsp;</strong></strong></strong>\n</pre>\n\n<p><strong><strong><strong><strong>注意：</strong></strong></strong></strong>在字符串中，每个单词由单个空格分隔，并且字符串中不会有任何额外的空格。</p>\n","remove-boxes":"<p>给出一些不同颜色的盒子，盒子的颜色由数字表示，即不同的数字表示不同的颜色。<br />\n你将经过若干轮操作去去掉盒子，直到所有的盒子都去掉为止。每一轮你可以移除具有相同颜色的连续 k 个盒子（k&nbsp;&gt;= 1），这样一轮之后你将得到 <code>k*k</code> 个积分。<br />\n当你将所有盒子都去掉之后，求你能获得的最大积分和。</p>\n\n<p><strong>示例 1：</strong><br />\n输入:</p>\n\n<pre>\n[1, 3, 2, 2, 2, 3, 4, 3, 1]\n</pre>\n\n<p>输出:</p>\n\n<pre>\n23\n</pre>\n\n<p>解释:</p>\n\n<pre>\n[1, 3, 2, 2, 2, 3, 4, 3, 1] \n----&gt; [1, 3, 3, 4, 3, 1] (3*3=9 分) \n----&gt; [1, 3, 3, 3, 1] (1*1=1 分) \n----&gt; [1, 1] (3*3=9 分) \n----&gt; [] (2*2=4 分)\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong>盒子的总数 <code>n</code> 不会超过 100。</p>\n","split-concatenated-strings":null,"student-attendance-record-ii":"<p>给定一个正整数&nbsp;<strong>n</strong>，返回长度为 n 的所有可被视为可奖励的出勤记录的数量。 答案可能非常大，你只需返回结果mod 10<sup>9</sup> + 7的值。</p>\n\n<p>学生出勤记录是只包含以下三个字符的字符串：</p>\n\n<ol>\n\t<li><strong>&#39;A&#39;</strong> : Absent，缺勤</li>\n\t<li><strong>&#39;L&#39;</strong> : Late，迟到</li>\n\t<li><strong>&#39;P&#39;</strong> : Present，到场</li>\n</ol>\n\n<p>如果记录不包含<strong>多于一个&#39;A&#39;（缺勤）</strong>或<strong>超过两个连续的&#39;L&#39;（迟到）</strong>，则该记录被视为可奖励的。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> n = 2\n<strong>输出:</strong> 8 <strong>\n解释：</strong>\n有8个长度为2的记录将被视为可奖励：\n&quot;PP&quot; , &quot;AP&quot;, &quot;PA&quot;, &quot;LP&quot;, &quot;PL&quot;, &quot;AL&quot;, &quot;LA&quot;, &quot;LL&quot;\n只有&quot;AA&quot;不会被视为可奖励，因为缺勤次数超过一次。</pre>\n\n<p><strong>注意：n </strong>的值不会超过100000。</p>\n","zuma-game":"<p>回忆一下祖玛游戏。现在桌上有一串球，颜色有红色(R)，黄色(Y)，蓝色(B)，绿色(G)，还有白色(W)。 现在你手里也有几个球。</p>\n\n<p>每一次，你可以从手里的球选一个，然后把这个球插入到一串球中的某个位置上（包括最左端，最右端）。接着，如果有出现三个或者三个以上颜色相同的球相连的话，就把它们移除掉。重复这一步骤直到桌上所有的球都被移除。</p>\n\n<p>找到插入并可以移除掉桌上所有球所需的最少的球数。如果不能移除桌上所有的球，输出 -1 。</p>\n\n<pre>\n<strong>示例:</strong>\n<strong>输入:</strong> &quot;WRRBBW&quot;, &quot;RB&quot; \n<strong>输出:</strong> -1 \n<strong>解释:</strong> WRRBBW -&gt; WRR[R]BBW -&gt; WBBW -&gt; WBB[B]W -&gt; WW （翻译者标注：手上球已经用完，桌上还剩两个球无法消除，返回-1）\n\n<strong>输入:</strong> &quot;WWRRBBWW&quot;, &quot;WRBRW&quot; \n<strong>输出:</strong> 2 \n<strong>解释:</strong> WWRRBBWW -&gt; WWRR[R]BBWW -&gt; WWBBWW -&gt; WWBB[B]WW -&gt; WWWW -&gt; empty\n\n<strong>输入:</strong>&quot;G&quot;, &quot;GGGGG&quot; \n<strong>输出:</strong> 2 \n<strong>解释:</strong> G -&gt; G[G] -&gt; GG[G] -&gt; empty \n\n<strong>输入:</strong> &quot;RBYYBBRRB&quot;, &quot;YRBGB&quot; \n<strong>输出:</strong> 3 \n<strong>解释:</strong> RBYYBBRRB -&gt; RBYY[Y]BBRRB -&gt; RBBBRRB -&gt; RRRB -&gt; B -&gt; B[B] -&gt; BB[B] -&gt; empty \n</pre>\n\n<p><strong>标注:</strong></p>\n\n<ol>\n\t<li>你可以假设桌上一开始的球中，不会有三个及三个以上颜色相同且连着的球。</li>\n\t<li>桌上的球不会超过20个，输入的数据中代表这些球的字符串的名字是 &quot;board&quot; 。</li>\n\t<li>你手中的球不会超过5个，输入的数据中代表这些球的字符串的名字是 &quot;hand&quot;。</li>\n\t<li>输入的两个字符串均为非空字符串，且只包含字符 &#39;R&#39;,&#39;Y&#39;,&#39;B&#39;,&#39;G&#39;,&#39;W&#39;。</li>\n</ol>\n","perfect-number":"<p>对于一个&nbsp;<strong>正整数</strong>，如果它和除了它自身以外的所有正因子之和相等，我们称它为&ldquo;完美数&rdquo;。</p>\n\n<p>给定一个&nbsp;<strong>正整数&nbsp;</strong><code>n</code>，&nbsp;如果他是完美数，返回&nbsp;<code>True</code>，否则返回&nbsp;<code>False</code></p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>\n<strong>输入:</strong> 28\n<strong>输出:</strong> True\n<strong>解释:</strong> 28 = 1 + 2 + 4 + 7 + 14\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意:</strong></p>\n\n<p>输入的数字&nbsp;<strong><code>n</code></strong> 不会超过 100,000,000. (1e8)</p>\n","most-frequent-subtree-sum":"<p>给出二叉树的根，找出出现次数最多的子树元素和。一个结点的子树元素和定义为以该结点为根的二叉树上所有结点的元素之和（包括结点本身）。然后求出出现次数最多的子树元素和。如果有多个元素出现的次数相同，返回所有出现次数最多的元素（不限顺序）。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1</strong><br>\n输入:</p>\n\n<pre>  5\n /  \\\n2   -3\n</pre>\n\n<p>返回&nbsp;[2, -3, 4]，所有的值均只出现一次，以任意顺序返回所有值。</p>\n\n<p><strong>示例&nbsp;2</strong><br>\n输入:</p>\n\n<pre>  5\n /  \\\n2   -5\n</pre>\n\n<p>返回&nbsp;[2]，只有 2 出现两次，-5 只出现 1 次。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong>&nbsp;假设任意子树元素和均可以用 32 位有符号整数表示。</p>\n","minimum-absolute-difference-in-bst":"<p>给定一个所有节点为非负值的二叉搜索树，求树中任意两节点的差的绝对值的最小值。</p>\n\n<p><strong>示例 :</strong></p>\n\n<pre>\n<strong>输入:</strong>\n\n   1\n    \\\n     3\n    /\n   2\n\n<strong>输出:</strong>\n1\n\n<strong>解释:\n</strong>最小绝对差为1，其中 2 和 1 的差的绝对值为 1（或者 2 和 3）。\n</pre>\n\n<p><strong>注意: </strong>树中至少有2个节点。</p>\n","freedom-trail":"<p>视频游戏&ldquo;辐射4&rdquo;中，任务&ldquo;通向自由&rdquo;要求玩家到达名为&ldquo;Freedom Trail Ring&rdquo;的金属表盘，并使用表盘拼写特定关键词才能开门。</p>\r\n\r\n<p>给定一个字符串&nbsp;<strong>ring</strong>，表示刻在外环上的编码；给定另一个字符串&nbsp;<strong>key</strong>，表示需要拼写的关键词。您需要算出能够拼写关键词中所有字符的<strong>最少</strong>步数。</p>\r\n\r\n<p>最初，<strong>ring&nbsp;</strong>的第一个字符与12:00方向对齐。您需要顺时针或逆时针旋转 ring 以使&nbsp;<strong>key&nbsp;</strong>的一个字符在 12:00 方向对齐，然后按下中心按钮，以此逐个拼写完&nbsp;<strong>key&nbsp;</strong>中的所有字符。</p>\r\n\r\n<p>旋转&nbsp;<strong>ring&nbsp;</strong>拼出 key 字符&nbsp;<strong>key[i]&nbsp;</strong>的阶段中：</p>\r\n\r\n<ol>\r\n\t<li>您可以将&nbsp;<strong>ring&nbsp;</strong>顺时针或逆时针旋转<strong>一个位置</strong>，计为1步。旋转的最终目的是将字符串&nbsp;<strong>ring&nbsp;</strong>的一个字符与 12:00 方向对齐，并且这个字符必须等于字符&nbsp;<strong>key[i] 。</strong></li>\r\n\t<li>如果字符&nbsp;<strong>key[i]&nbsp;</strong>已经对齐到12:00方向，您需要按下中心按钮进行拼写，这也将算作&nbsp;<strong>1 步</strong>。按完之后，您可以开始拼写&nbsp;<strong>key&nbsp;</strong>的下一个字符（下一阶段）, 直至完成所有拼写。</li>\r\n</ol>\r\n\r\n<p><strong>示例：</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<center><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/ring.jpg\" style=\"width: 26%;\"></center>\r\n&nbsp;\r\n\r\n<pre><strong>输入:</strong> ring = &quot;godding&quot;, key = &quot;gd&quot;\r\n<strong>输出:</strong> 4\r\n<strong>解释:</strong>\r\n 对于 key 的第一个字符 &#39;g&#39;，已经在正确的位置, 我们只需要1步来拼写这个字符。 \r\n 对于 key 的第二个字符 &#39;d&#39;，我们需要逆时针旋转 ring &quot;godding&quot; 2步使它变成 &quot;ddinggo&quot;。\r\n 当然, 我们还需要1步进行拼写。\r\n 因此最终的输出是 4。\r\n</pre>\r\n\r\n<p><strong>提示：</strong></p>\r\n\r\n<ol>\r\n\t<li><strong>ring</strong> 和&nbsp;<strong>key</strong>&nbsp;的字符串长度取值范围均为&nbsp;1 至&nbsp;100；</li>\r\n\t<li>两个字符串中都只有小写字符，并且均可能存在重复字符；</li>\r\n\t<li>字符串&nbsp;<strong>key</strong>&nbsp;一定可以由字符串 <strong>ring</strong>&nbsp;旋转拼出。</li>\r\n</ol>","longest-palindromic-subsequence":"<p>给定一个字符串<code>s</code>，找到其中最长的回文子序列。可以假设<code>s</code>的最大长度为<code>1000</code>。</p>\n\n<p><strong>示例 1:</strong><br />\n输入:</p>\n\n<pre>\n&quot;bbbab&quot;\n</pre>\n\n<p>输出:</p>\n\n<pre>\n4\n</pre>\n\n<p>一个可能的最长回文子序列为 &quot;bbbb&quot;。</p>\n\n<p><strong>示例 2:</strong><br />\n输入:</p>\n\n<pre>\n&quot;cbbd&quot;\n</pre>\n\n<p>输出:</p>\n\n<pre>\n2\n</pre>\n\n<p>一个可能的最长回文子序列为 &quot;bb&quot;。</p>\n","find-largest-value-in-each-tree-row":"<p>您需要在二叉树的每一行中找到最大的值。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>\n<strong>输入:</strong> \n\n          1\n         / \\\n        3   2\n       / \\   \\  \n      5   3   9 \n\n<strong>输出:</strong> [1, 3, 9]\n</pre>\n","ipo":"<p>假设 LeetCode 即将开始其 IPO。为了以更高的价格将股票卖给风险投资公司，LeetCode希望在 IPO 之前开展一些项目以增加其资本。 由于资源有限，它只能在 IPO 之前完成最多 <strong>k</strong> 个不同的项目。帮助 LeetCode 设计完成最多 <strong>k</strong> 个不同项目后得到最大总资本的方式。</p>\n\n<p>给定若干个项目。对于每个项目 <strong>i</strong>，它都有一个纯利润 <strong>P<sub>i</sub></strong>，并且需要最小的资本 <strong>C<sub>i</sub></strong> 来启动相应的项目。最初，你有 <strong>W</strong> 资本。当你完成一个项目时，你将获得纯利润，且利润将被添加到你的总资本中。</p>\n\n<p>总而言之，从给定项目中选择最多 <strong>k</strong> 个不同项目的列表，以最大化最终资本，并输出最终可获得的最多资本。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> k=2, W=0, Profits=[1,2,3], Capital=[0,1,1].\n\n<strong>输出:</strong> 4\n\n<strong>解释:\n</strong>由于你的初始资本为 0，你尽可以从 0 号项目开始。\n在完成后，你将获得 1 的利润，你的总资本将变为 1。\n此时你可以选择开始 1 号或 2 号项目。\n由于你最多可以选择两个项目，所以你需要完成 2 号项目以获得最大的资本。\n因此，输出最后最大化的资本，为 0 + 1 + 3 = 4。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>假设所有输入数字都是非负整数。</li>\n\t<li>表示利润和资本的数组的长度不超过 50000。</li>\n\t<li>答案保证在 32 位有符号整数范围内。</li>\n</ol>\n\n<p>&nbsp;</p>\n","next-greater-element-i":"<p>给定两个<strong>没有重复元素</strong>的数组&nbsp;<code>nums1</code> 和&nbsp;<code>nums2</code>&nbsp;，其中<code>nums1</code>&nbsp;是&nbsp;<code>nums2</code>&nbsp;的子集。找到&nbsp;<code>nums1</code>&nbsp;中每个元素在&nbsp;<code>nums2</code>&nbsp;中的下一个比其大的值。</p>\n\n<p><code>nums1</code>&nbsp;中数字&nbsp;<strong>x</strong>&nbsp;的下一个更大元素是指&nbsp;<strong>x</strong>&nbsp;在&nbsp;<code>nums2</code>&nbsp;中对应位置的右边的第一个比&nbsp;<strong>x&nbsp;</strong>大的元素。如果不存在，对应位置输出-1。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> <strong>nums1</strong> = [4,1,2], <strong>nums2</strong> = [1,3,4,2].\n<strong>输出:</strong> [-1,3,-1]\n<strong>解释:</strong>\n    对于num1中的数字4，你无法在第二个数组中找到下一个更大的数字，因此输出 -1。\n    对于num1中的数字1，第二个数组中数字1右边的下一个较大数字是 3。\n    对于num1中的数字2，第二个数组中没有下一个更大的数字，因此输出 -1。</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> <strong>nums1</strong> = [2,4], <strong>nums2</strong> = [1,2,3,4].\n<strong>输出:</strong> [3,-1]\n<strong>解释:</strong>\n&nbsp;   对于num1中的数字2，第二个数组中的下一个较大数字是3。\n    对于num1中的数字4，第二个数组中没有下一个更大的数字，因此输出 -1。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li><code>nums1</code>和<code>nums2</code>中所有元素是唯一的。</li>\n\t<li><code>nums1</code>和<code>nums2</code>&nbsp;的数组大小都不超过1000。</li>\n</ol>\n","detect-capital":"<p>给定一个单词，你需要判断单词的大写使用是否正确。</p>\n\n<p>我们定义，在以下情况时，单词的大写用法是正确的：</p>\n\n<ol>\n\t<li>全部字母都是大写，比如&quot;USA&quot;。</li>\n\t<li>单词中所有字母都不是大写，比如&quot;leetcode&quot;。</li>\n\t<li>如果单词不只含有一个字母，只有首字母大写，&nbsp;比如&nbsp;&quot;Google&quot;。</li>\n</ol>\n\n<p>否则，我们定义这个单词没有正确使用大写字母。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;USA&quot;\n<strong>输出:</strong> True\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;FlaG&quot;\n<strong>输出:</strong> False\n</pre>\n\n<p><strong>注意:</strong> 输入是由大写和小写拉丁字母组成的非空单词。</p>\n","longest-uncommon-subsequence-ii":"<p>给定字符串列表，你需要从它们中找出最长的特殊序列。最长特殊序列定义如下：该序列为某字符串独有的最长子序列（即不能是其他字符串的子序列）。</p>\n\n<p><strong>子序列</strong>可以通过删去字符串中的某些字符实现，但不能改变剩余字符的相对顺序。空序列为所有字符串的子序列，任何字符串为其自身的子序列。</p>\n\n<p>输入将是一个字符串列表，输出是最长特殊序列的长度。如果最长特殊序列不存在，返回 -1 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入:</strong> &quot;aba&quot;, &quot;cdc&quot;, &quot;eae&quot;\n<strong>输出:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>所有给定的字符串长度不会超过 10 。</li>\n\t<li>给定字符串列表的长度将在 [2, 50 ] 之间。</li>\n</ol>\n\n<p>&nbsp;</p>\n","diagonal-traverse":"<p>给定一个含有 M x N 个元素的矩阵（M 行，N 列），请以对角线遍历的顺序返回这个矩阵中的所有元素，对角线遍历如下图所示。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong>\n[\n [ 1, 2, 3 ],\n [ 4, 5, 6 ],\n [ 7, 8, 9 ]\n]\n\n<strong>输出:</strong>  [1,2,4,7,5,3,6,8,9]\n\n<strong>解释:</strong>\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/diagonal_traverse.png\" style=\"width: 220px;\">\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>给定矩阵中的元素总数不会超过 100000 。</li>\n</ol>\n","matchsticks-to-square":"<p>还记得童话《卖火柴的小女孩》吗？现在，你知道小女孩有多少根火柴，请找出一种能使用所有火柴拼成一个正方形的方法。不能折断火柴，可以把火柴连接起来，并且每根火柴都要用到。</p>\n\n<p>输入为小女孩拥有火柴的数目，每根火柴用其长度表示。输出即为是否能用所有的火柴拼成正方形。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,1,2,2,2]\n<strong>输出:</strong> true\n\n<strong>解释:</strong> 能拼成一个边长为2的正方形，每边两根火柴。\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre>\n<strong>输入:</strong> [3,3,3,3,4]\n<strong>输出:</strong> false\n\n<strong>解释:</strong> 不能用所有火柴拼成一个正方形。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>给定的火柴长度和在&nbsp;<code>0</code>&nbsp;到&nbsp;<code>10^9</code>之间。</li>\n\t<li>火柴数组的长度不超过15。</li>\n</ol>\n","subarray-sum-equals-k":"<p>给定一个整数数组和一个整数&nbsp;<strong>k，</strong>你需要找到该数组中和为&nbsp;<strong>k&nbsp;</strong>的连续的子数组的个数。</p>\n\n<p><strong>示例 1 :</strong></p>\n\n<pre>\n<strong>输入:</strong>nums = [1,1,1], k = 2\n<strong>输出:</strong> 2 , [1,1] 与 [1,1] 为两种不同的情况。\n</pre>\n\n<p><strong>说明 :</strong></p>\n\n<ol>\n\t<li>数组的长度为 [1, 20,000]。</li>\n\t<li>数组中元素的范围是 [-1000, 1000] ，且整数&nbsp;<strong>k&nbsp;</strong>的范围是&nbsp;[-1e7, 1e7]。</li>\n</ol>\n","max-consecutive-ones":"<p>给定一个二进制数组， 计算其中最大连续1的个数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,1,0,1,1,1]\n<strong>输出:</strong> 3\n<strong>解释:</strong> 开头的两位和最后的三位都是连续1，所以最大连续1的个数是 3.\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li>输入的数组只包含&nbsp;<code>0</code> 和<code>1</code>。</li>\n\t<li>输入数组的长度是正整数，且不超过 10,000。</li>\n</ul>\n","subtree-of-another-tree":"<p>给定两个非空二叉树 <strong>s</strong> 和 <strong>t</strong>，检验&nbsp;<strong>s</strong> 中是否包含和 <strong>t</strong> 具有相同结构和节点值的子树。<strong>s</strong> 的一个子树包括 <strong>s</strong> 的一个节点和这个节点的所有子孙。<strong>s</strong> 也可以看做它自身的一棵子树。</p>\n\n<p><strong>示例 1:</strong><br />\n给定的树 s:</p>\n\n<pre>\n     3\n    / \\\n   4   5\n  / \\\n 1   2\n</pre>\n\n<p>给定的树 t：</p>\n\n<pre>\n   4 \n  / \\\n 1   2\n</pre>\n\n<p>返回 <strong>true</strong>，因为 t 与 s 的一个子树拥有相同的结构和节点值。</p>\n\n<p><strong>示例 2:</strong><br />\n给定的树 s：</p>\n\n<pre>\n     3\n    / \\\n   4   5\n  / \\\n 1   2\n    /\n   0\n</pre>\n\n<p>给定的树 t：</p>\n\n<pre>\n   4\n  / \\\n 1   2\n</pre>\n\n<p>返回 <strong>false</strong>。</p>\n","number-complement":"<p>给定一个正整数，输出它的补数。补数是对该数的二进制表示取反。</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>给定的整数保证在32位带符号整数的范围内。</li>\n\t<li>你可以假定二进制数不包含前导零位。</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> 5\n<strong>输出:</strong> 2\n<strong>解释:</strong> 5的二进制表示为101（没有前导零位），其补数为010。所以你需要输出2。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> 1\n<strong>输出:</strong> 0\n<strong>解释:</strong> 1的二进制表示为1（没有前导零位），其补数为0。所以你需要输出0。\n</pre>\n","max-consecutive-ones-ii":null,"word-abbreviation":null,"total-hamming-distance":"<p>两个整数的&nbsp;<a href=\"https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/475174?fr=aladdin\">汉明距离</a> 指的是这两个数字的二进制数对应位不同的数量。</p>\n\n<p>计算一个数组中，任意两个数之间汉明距离的总和。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\n<strong>输入:</strong> 4, 14, 2\n\n<strong>输出:</strong> 6\n\n<strong>解释:</strong> 在二进制表示中，4表示为0100，14表示为1110，2表示为0010。（这样表示是为了体现后四位之间关系）\n所以答案为：\nHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>数组中元素的范围为从&nbsp;<code>0</code>到&nbsp;<code>10^9</code>。</li>\n\t<li>数组的长度不超过&nbsp;<code>10^4</code>。</li>\n</ol>\n","longest-word-in-dictionary-through-deleting":"<p>给定一个字符串和一个字符串字典，找到字典里面最长的字符串，该字符串可以通过删除给定字符串的某些字符来得到。如果答案不止一个，返回长度最长且字典顺序最小的字符串。如果答案不存在，则返回空字符串。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong>\ns = &quot;abpcplea&quot;, d = [&quot;ale&quot;,&quot;apple&quot;,&quot;monkey&quot;,&quot;plea&quot;]\n\n<strong>输出:</strong> \n&quot;apple&quot;\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre>\n<strong>输入:</strong>\ns = &quot;abpcplea&quot;, d = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\n\n<strong>输出:</strong> \n&quot;a&quot;\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>所有输入的字符串只包含小写字母。</li>\n\t<li>字典的大小不会超过 1000。</li>\n\t<li>所有输入的字符串长度不会超过 1000。</li>\n</ol>\n","teemo-attacking":"<p>在《英雄联盟》的世界中，有一个叫 &ldquo;提莫&rdquo; 的英雄，他的攻击可以让敌方英雄艾希（编者注：寒冰射手）进入中毒状态。现在，给出提莫对艾希的攻击时间序列和提莫攻击的中毒持续时间，你需要输出艾希的中毒状态总时长。</p>\n\n<p>你可以认为提莫在给定的时间点进行攻击，并立即使艾希处于中毒状态。</p>\n\n<p><strong>示例1:</strong></p>\n\n<pre><strong>输入:</strong> [1,4], 2\n<strong>输出:</strong> 4\n<strong>原因:</strong> 在第 1 秒开始时，提莫开始对艾希进行攻击并使其立即中毒。中毒状态会维持 2 秒钟，直到第 2 秒钟结束。\n在第 4 秒开始时，提莫再次攻击艾希，使得艾希获得另外 2 秒的中毒时间。\n所以最终输出 4 秒。\n</pre>\n\n<p><strong>示例2:</strong></p>\n\n<pre><strong>输入:</strong> [1,2], 2\n<strong>输出:</strong> 3\n<strong>原因:</strong> 在第 1 秒开始时，提莫开始对艾希进行攻击并使其立即中毒。中毒状态会维持 2 秒钟，直到第 2 秒钟结束。\n但是在第 2 秒开始时，提莫再次攻击了已经处于中毒状态的艾希。\n由于中毒状态不可叠加，提莫在第 2 秒开始时的这次攻击会在第 3 秒钟结束。\n所以最终输出 3。\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li>你可以假定时间序列数组的总长度不超过 10000。</li>\n\t<li>你可以假定提莫攻击时间序列中的数字和提莫攻击的中毒持续时间都是非负整数，并且不超过 10,000,000。</li>\n</ol>\n","encode-and-decode-tinyurl":"<p>TinyURL是一种URL简化服务， 比如：当你输入一个URL&nbsp;<code>https://leetcode.com/problems/design-tinyurl</code>&nbsp;时，它将返回一个简化的URL&nbsp;<code>http://tinyurl.com/4e9iAk</code>.</p>\n\n<p>要求：设计一个 TinyURL 的加密&nbsp;<code>encode</code>&nbsp;和解密&nbsp;<code>decode</code>&nbsp;的方法。你的加密和解密算法如何设计和运作是没有限制的，你只需要保证一个URL可以被加密成一个TinyURL，并且这个TinyURL可以用解密方法恢复成原本的URL。</p>\n","find-mode-in-binary-search-tree":"<p>给定一个有相同值的二叉搜索树（BST），找出 BST 中的所有众数（出现频率最高的元素）。</p>\n\n<p>假定 BST 有如下定义：</p>\n\n<ul>\n\t<li>结点左子树中所含结点的值小于等于当前结点的值</li>\n\t<li>结点右子树中所含结点的值大于等于当前结点的值</li>\n\t<li>左子树和右子树都是二叉搜索树</li>\n</ul>\n\n<p>例如：<br>\n给定 BST <code>[1,null,2,2]</code>,</p>\n\n<pre>   1\n    \\\n     2\n    /\n   2\n</pre>\n\n<p><code>返回[2]</code>.</p>\n\n<p><strong>提示</strong>：如果众数超过1个，不需考虑输出顺序</p>\n\n<p><strong>进阶：</strong>你可以不使用额外的空间吗？（假设由递归产生的隐式调用栈的开销不被计算在内）</p>\n","ones-and-zeroes":"<p>在计算机界中，我们总是追求用有限的资源获取最大的收益。</p>\n\n<p>现在，假设你分别支配着 <strong>m</strong> 个&nbsp;<code>0</code>&nbsp;和 <strong>n</strong> 个&nbsp;<code>1</code>。另外，还有一个仅包含&nbsp;<code>0</code>&nbsp;和&nbsp;<code>1</code>&nbsp;字符串的数组。</p>\n\n<p>你的任务是使用给定的&nbsp;<strong>m</strong> 个&nbsp;<code>0</code>&nbsp;和 <strong>n</strong> 个&nbsp;<code>1</code>&nbsp;，找到能拼出存在于数组中的字符串的最大数量。每个&nbsp;<code>0</code>&nbsp;和&nbsp;<code>1</code>&nbsp;至多被使用<strong>一次</strong>。</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>给定&nbsp;<code>0</code>&nbsp;和&nbsp;<code>1</code>&nbsp;的数量都不会超过&nbsp;<code>100</code>。</li>\n\t<li>给定字符串数组的长度不会超过&nbsp;<code>600</code>。</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> Array = {&quot;10&quot;, &quot;0001&quot;, &quot;111001&quot;, &quot;1&quot;, &quot;0&quot;}, m = 5, n = 3\n<strong>输出:</strong> 4\n\n<strong>解释:</strong> 总共 4 个字符串可以通过 5 个 0 和 3 个 1 拼出，即 &quot;10&quot;,&quot;0001&quot;,&quot;1&quot;,&quot;0&quot; 。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> Array = {&quot;10&quot;, &quot;0&quot;, &quot;1&quot;}, m = 1, n = 1\n<strong>输出:</strong> 2\n\n<strong>解释:</strong> 你可以拼出 &quot;10&quot;，但之后就没有剩余数字了。更好的选择是拼出 &quot;0&quot; 和 &quot;1&quot; 。\n</pre>\n","target-sum":"<p>给定一个非负整数数组，a1, a2, ..., an, 和一个目标数，S。现在你有两个符号&nbsp;<code>+</code>&nbsp;和&nbsp;<code>-</code>。对于数组中的任意一个整数，你都可以从&nbsp;<code>+</code>&nbsp;或&nbsp;<code>-</code>中选择一个符号添加在前面。</p>\n\n<p>返回可以使最终数组和为目标数 S 的所有添加符号的方法数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> nums: [1, 1, 1, 1, 1], S: 3\n<strong>输出:</strong> 5\n<strong>解释:</strong> \n\n-1+1+1+1+1 = 3\n+1-1+1+1+1 = 3\n+1+1-1+1+1 = 3\n+1+1+1-1+1 = 3\n+1+1+1+1-1 = 3\n\n一共有5种方法让最终目标和为3。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>数组的长度不会超过20，并且数组中的值全为正数。</li>\n\t<li>初始的数组的和不会超过1000。</li>\n\t<li>保证返回的最终结果为32位整数。</li>\n</ol>\n","smallest-good-base":"<p>对于给定的整数 n, 如果n的k（k&gt;=2）进制数的所有数位全为1，则称&nbsp;k（k&gt;=2）是 n 的一个<em><strong>好进制</strong></em>。</p>\n\n<p>以字符串的形式给出 n, 以字符串的形式返回 n 的最小好进制。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>&quot;13&quot;\n<strong>输出：</strong>&quot;3&quot;\n<strong>解释：</strong>13 的 3 进制是 111。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>&quot;4681&quot;\n<strong>输出：</strong>&quot;8&quot;\n<strong>解释：</strong>4681 的 8 进制是 11111。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>&quot;1000000000000000000&quot;\n<strong>输出：</strong>&quot;999999999999999999&quot;\n<strong>解释：</strong>1000000000000000000 的 999999999999999999 进制是 11。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>n的取值范围是&nbsp;[3, 10^18]。</li>\n\t<li>输入总是有效且没有前导 0。</li>\n</ol>\n\n<p>&nbsp;</p>\n","reverse-pairs":"<p>给定一个数组&nbsp;<code>nums</code>&nbsp;，如果&nbsp;<code>i &lt; j</code>&nbsp;且&nbsp;<code>nums[i] &gt; 2*nums[j]</code>&nbsp;我们就将&nbsp;<code>(i, j)</code>&nbsp;称作一个<strong><em>重要翻转对</em></strong>。</p>\n\n<p>你需要返回给定数组中的重要翻转对的数量。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入</strong>: [1,3,2,3,1]\n<strong>输出</strong>: 2\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入</strong>: [2,4,3,5,1]\n<strong>输出</strong>: 3\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>给定数组的长度不会超过<code>50000</code>。</li>\n\t<li>输入数组中的所有数字都在32位整数的表示范围内。</li>\n</ol>\n","beautiful-arrangement":"<p>假设有从 1 到 N 的&nbsp;<strong>N&nbsp;</strong>个整数，如果从这&nbsp;<strong>N&nbsp;</strong>个数字中成功构造出一个数组，使得数组的第 <strong>i</strong>&nbsp;位 (1 &lt;= i &lt;= N) 满足如下两个条件中的一个，我们就称这个数组为一个优美的排列。条件：</p>\n\n<ol>\n\t<li>第&nbsp;<strong>i&nbsp;</strong>位的数字能被&nbsp;<strong>i&nbsp;</strong>整除</li>\n\t<li><strong>i</strong> 能被第 <strong>i</strong> 位上的数字整除</li>\n</ol>\n\n<p>现在给定一个整数 N，请问可以构造多少个优美的排列？</p>\n\n<p><strong>示例1:</strong></p>\n\n<pre>\n<strong>输入:</strong> 2\n<strong>输出:</strong> 2\n<strong>解释:</strong> \n\n第 1 个优美的排列是 [1, 2]:\n  第 1 个位置（i=1）上的数字是1，1能被 i（i=1）整除\n  第 2 个位置（i=2）上的数字是2，2能被 i（i=2）整除\n\n第 2 个优美的排列是 [2, 1]:\n  第 1 个位置（i=1）上的数字是2，2能被 i（i=1）整除\n  第 2 个位置（i=2）上的数字是1，i（i=2）能被 1 整除\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li><strong>N</strong> 是一个正整数，并且不会超过15。</li>\n</ol>\n","longest-line-of-consecutive-one-in-matrix":null,"concatenated-words":"<p>给定一个<strong>不含重复</strong>单词的列表，编写一个程序，返回给定单词列表中所有的连接词。</p>\n\n<p>连接词的定义为：一个字符串完全是由至少两个给定数组中的单词组成的。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\n<strong>输入:</strong> [&quot;cat&quot;,&quot;cats&quot;,&quot;catsdogcats&quot;,&quot;dog&quot;,&quot;dogcatsdog&quot;,&quot;hippopotamuses&quot;,&quot;rat&quot;,&quot;ratcatdogcat&quot;]\n\n<strong>输出:</strong> [&quot;catsdogcats&quot;,&quot;dogcatsdog&quot;,&quot;ratcatdogcat&quot;]\n\n<strong>解释:</strong> &quot;catsdogcats&quot;由&quot;cats&quot;, &quot;dog&quot; 和 &quot;cats&quot;组成; \n     &quot;dogcatsdog&quot;由&quot;dog&quot;, &quot;cats&quot;和&quot;dog&quot;组成; \n     &quot;ratcatdogcat&quot;由&quot;rat&quot;, &quot;cat&quot;, &quot;dog&quot;和&quot;cat&quot;组成。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>给定数组的元素总数不超过 <code>10000</code>。</li>\n\t<li>给定数组中元素的长度总和不超过 <code>600000</code>。</li>\n\t<li>所有输入字符串只包含小写字母。</li>\n\t<li>不需要考虑答案输出的顺序。</li>\n</ol>\n","construct-the-rectangle":"<p>作为一位web开发者， 懂得怎样去规划一个页面的尺寸是很重要的。 现给定一个具体的矩形页面面积，你的任务是设计一个长度为 L 和宽度为 W 且满足以下要求的矩形的页面。要求：</p>\n\n<pre>\n1. 你设计的矩形页面必须等于给定的目标面积。\n\n2. 宽度 W 不应大于长度 L，换言之，要求 L &gt;= W 。\n\n3. 长度 L 和宽度 W 之间的差距应当尽可能小。\n</pre>\n\n<p>你需要按顺序输出你设计的页面的长度 L 和宽度 W。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>\n<strong>输入:</strong> 4\n<strong>输出:</strong> [2, 2]\n<strong>解释:</strong> 目标面积是 4， 所有可能的构造方案有 [1,4], [2,2], [4,1]。\n但是根据要求2，[1,4] 不符合要求; 根据要求3，[2,2] 比 [4,1] 更能符合要求. 所以输出长度 L 为 2， 宽度 W 为 2。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>给定的面积不大于 10,000,000 且为正整数。</li>\n\t<li>你设计的页面的长度和宽度必须都是正整数。</li>\n</ol>\n","the-maze":null,"license-key-formatting":"<p>给定一个密钥字符串S，只包含字母，数字以及 &#39;-&#39;（破折号）。N 个 &#39;-&#39; 将字符串分成了 N+1 组。给定一个数字 K，重新格式化字符串，除了第一个分组以外，每个分组要包含 K 个字符，第一个分组至少要包含 1 个字符。两个分组之间用 &#39;-&#39;（破折号）隔开，并且将所有的小写字母转换为大写字母。</p>\n\n<p>给定非空字符串 S 和数字 K，按照上面描述的规则进行格式化。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>S = &quot;5F3Z-2e-9-w&quot;, K = 4\n\n<strong>输出：</strong>&quot;5F3Z-2E9W&quot;\n\n<strong>解释：</strong>字符串 S 被分成了两个部分，每部分 4 个字符；\n&nbsp;    注意，两个额外的破折号需要删掉。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>S = &quot;2-5g-3-J&quot;, K = 2\n\n<strong>输出：</strong>&quot;2-5G-3J&quot;\n\n<strong>解释：</strong>字符串 S 被分成了 3 个部分，按照前面的规则描述，第一部分的字符可以少于给定的数量，其余部分皆为 2 个字符。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示:</strong></p>\n\n<ol>\n\t<li>S 的长度不超过 12,000，K 为正整数</li>\n\t<li>S 只包含字母数字（a-z，A-Z，0-9）以及破折号&#39;-&#39;</li>\n\t<li>S 非空</li>\n</ol>\n\n<p>&nbsp;</p>\n","the-maze-ii":null,"heaters":"<p>冬季已经来临。&nbsp;你的任务是设计一个有固定加热半径的供暖器向所有房屋供暖。</p>\n\n<p>现在，给出位于一条水平线上的房屋和供暖器的位置，找到可以覆盖所有房屋的最小加热半径。</p>\n\n<p>所以，你的输入将会是房屋和供暖器的位置。你将输出供暖器的最小加热半径。</p>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>给出的房屋和供暖器的数目是非负数且不会超过 25000。</li>\n\t<li>给出的房屋和供暖器的位置均是非负数且不会超过10^9。</li>\n\t<li>只要房屋位于供暖器的半径内(包括在边缘上)，它就可以得到供暖。</li>\n\t<li>所有供暖器都遵循你的半径标准，加热的半径也一样。</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,2,3],[2]\n<strong>输出:</strong> 1\n<strong>解释:</strong> 仅在位置2上有一个供暖器。如果我们将加热半径设为1，那么所有房屋就都能得到供暖。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,2,3,4],[1,4]\n<strong>输出:</strong> 1\n<strong>解释:</strong> 在位置1, 4上有两个供暖器。我们需要将加热半径设为1，这样所有房屋就都能得到供暖。\n</pre>\n","base-7":"<p>给定一个整数，将其转化为7进制，并以字符串形式输出。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> 100\n<strong>输出:</strong> &quot;202&quot;\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> -7\n<strong>输出:</strong> &quot;-10&quot;\n</pre>\n\n<p><strong>注意:</strong> 输入范围是&nbsp;[-1e7, 1e7] 。</p>\n","relative-ranks":"<p>给出&nbsp;<strong>N</strong> 名运动员的成绩，找出他们的相对名次并授予前三名对应的奖牌。前三名运动员将会被分别授予 &ldquo;金牌&rdquo;，&ldquo;银牌&rdquo; 和&ldquo; 铜牌&rdquo;（&quot;Gold Medal&quot;, &quot;Silver Medal&quot;, &quot;Bronze Medal&quot;）。</p>\n\n<p>(注：分数越高的选手，排名越靠前。)</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [5, 4, 3, 2, 1]\n<strong>输出:</strong> [&quot;Gold Medal&quot;, &quot;Silver Medal&quot;, &quot;Bronze Medal&quot;, &quot;4&quot;, &quot;5&quot;]\n<strong>解释:</strong> 前三名运动员的成绩为前三高的，因此将会分别被授予 &ldquo;金牌&rdquo;，&ldquo;银牌&rdquo;和&ldquo;铜牌&rdquo; (&quot;Gold Medal&quot;, &quot;Silver Medal&quot; and &quot;Bronze Medal&quot;).\n余下的两名运动员，我们只需要通过他们的成绩计算将其相对名次即可。</pre>\n\n<p><strong>提示:</strong></p>\n\n<ol>\n\t<li>N 是一个正整数并且不会超过&nbsp;10000。</li>\n\t<li>所有运动员的成绩都不相同。</li>\n</ol>\n","find-bottom-left-tree-value":"<p>给定一个二叉树，在树的最后一行找到最左边的值。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong>\n\n    2\n   / \\\n  1   3\n\n<strong>输出:</strong>\n1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 2: </strong></p>\n\n<pre>\n<strong>输入:</strong>\n\n        1\n       / \\\n      2   3\n     /   / \\\n    4   5   6\n       /\n      7\n\n<strong>输出:</strong>\n7\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意:</strong> 您可以假设树（即给定的根节点）不为 <strong>NULL</strong>。</p>\n","super-washing-machines":"<p>假设有 <strong>n&nbsp;</strong>台超级洗衣机放在同一排上。开始的时候，每台洗衣机内可能有一定量的衣服，也可能是空的。</p>\n\n<p>在<strong>每一步操作</strong>中，你可以选择<strong>任意 m&nbsp;</strong>（1 &le; m &le; n）&nbsp;台洗衣机，与此<strong>同时</strong>将每台洗衣机的<strong>一件衣服</strong>送到相邻的一台洗衣机。</p>\n\n<p>给定一个非负整数数组代表从左至右每台洗衣机中的衣物数量，请给出能让所有洗衣机中剩下的衣物的数量相等的<strong>最少的操作步数</strong>。如果不能使每台洗衣机中衣物的数量相等，则返回 -1。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入:</strong> [1,0,5]\n\n<strong>输出:</strong> 3\n\n<strong>解释:</strong> \n第一步:    1     0 &lt;-- 5    =&gt;    1     1     4\n第二步:    1 &lt;-- 1 &lt;-- 4    =&gt;    2     1     3    \n第三步:    2     1 &lt;-- 3    =&gt;    2     2     2   \n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入:</strong> [0,3,0]\n\n<strong>输出:</strong> 2\n\n<strong>解释:</strong> \n第一步:    0 &lt;-- 3     0    =&gt;    1     2     0    \n第二步:    1     2 --&gt; 0    =&gt;    1     1     1     \n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> [0,2,0]\n\n<strong>输出:</strong> -1\n\n<strong>解释:</strong> \n不可能让所有三个洗衣机同时剩下相同数量的衣物。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>n 的范围是 [1, 10000]。</li>\n\t<li>在每台超级洗衣机中，衣物数量的范围是 [0, 1e5]。</li>\n</ol>\n\n<p>&nbsp;</p>\n","contiguous-array":"<p>给定一个二进制数组, 找到含有相同数量的 0 和 1 的最长连续子数组。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [0,1]\n<strong>输出:</strong> 2\n<strong>说明:</strong> [0, 1] 是具有相同数量0和1的最长连续子数组。</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> [0,1,0]\n<strong>输出:</strong> 2\n<strong>说明:</strong> [0, 1] (或 [1, 0]) 是具有相同数量0和1的最长连续子数组。</pre>\n\n<p><strong>注意:&nbsp;</strong>给定的二进制数组的长度不会超过50000。</p>\n","magical-string":"<p>神奇的字符串&nbsp;<strong>S&nbsp;</strong>只包含 &#39;1&#39; 和 &#39;2&#39;，并遵守以下规则：</p>\n\n<p>字符串 <strong>S</strong> 是神奇的，因为串联字符 &#39;1&#39; 和 &#39;2&#39; 的连续出现次数会生成字符串 <strong>S</strong> 本身。</p>\n\n<p>字符串&nbsp;<strong>S&nbsp;</strong>的前几个元素如下：<strong>S </strong>= &ldquo;1221121221221121122 ......&rdquo;</p>\n\n<p>如果我们将&nbsp;<strong>S</strong> 中连续的 1 和 2 进行分组，它将变成：</p>\n\n<p>1 22 11 2 1 22 1 22 11 2 11 22 ......</p>\n\n<p>并且每个组中 &#39;1&#39; 或 &#39;2&#39; 的出现次数分别是：</p>\n\n<p>1 2 2 1 1 2 1 2 2 1 2 2 ......</p>\n\n<p>你可以看到上面的出现次数就是 <strong>S</strong> 本身。</p>\n\n<p>给定一个整数 N 作为输入，返回神奇字符串 <strong>S&nbsp;</strong>中前 N 个数字中的 &#39;1&#39; 的数目。</p>\n\n<p><strong>注意：</strong>N 不会超过 100,000。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>6\n<strong>输出：</strong>3\n<strong>解释：</strong>神奇字符串 S 的前 6 个元素是 &ldquo;12211&rdquo;，它包含三个 1，因此返回 3。\n</pre>\n\n<p>&nbsp;</p>\n","validate-ip-address":"<p>编写一个函数来验证输入的字符串是否是有效的 IPv4 或&nbsp;IPv6 地址。</p>\n\n<p><strong>IPv4</strong>&nbsp;地址由十进制数和点来表示，每个地址包含4个十进制数，其范围为&nbsp;0 -&nbsp;255，&nbsp;用(&quot;.&quot;)分割。比如，<code>172.16.254.1</code>；</p>\n\n<p>同时，IPv4 地址内的数不会以 0 开头。比如，地址&nbsp;<code>172.16.254.01</code> 是不合法的。</p>\n\n<p><strong>IPv6</strong>&nbsp;地址由8组16进制的数字来表示，每组表示&nbsp;16 比特。这些组数字通过 (&quot;:&quot;)分割。比如,&nbsp;&nbsp;<code>2001:0db8:85a3:0000:0000:8a2e:0370:7334</code> 是一个有效的地址。而且，我们可以加入一些以 0 开头的数字，字母可以使用大写，也可以是小写。所以，&nbsp;<code>2001:db8:85a3:0:0:8A2E:0370:7334</code> 也是一个有效的 IPv6 address地址 (即，忽略 0 开头，忽略大小写)。</p>\n\n<p>然而，我们不能因为某个组的值为 0，而使用一个空的组，以至于出现 (::) 的情况。&nbsp;比如，&nbsp;<code>2001:0db8:85a3::8A2E:0370:7334</code> 是无效的 IPv6 地址。</p>\n\n<p>同时，在 IPv6 地址中，多余的 0 也是不被允许的。比如，&nbsp;<code>02001:0db8:85a3:0000:0000:8a2e:0370:7334</code> 是无效的。</p>\n\n<p><strong>说明:</strong>&nbsp;你可以认为给定的字符串里没有空格或者其他特殊字符。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;172.16.254.1&quot;\n\n<strong>输出:</strong> &quot;IPv4&quot;\n\n<strong>解释:</strong> 这是一个有效的 IPv4 地址, 所以返回 &quot;IPv4&quot;。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;2001:0db8:85a3:0:0:8A2E:0370:7334&quot;\n\n<strong>输出:</strong> &quot;IPv6&quot;\n\n<strong>解释:</strong> 这是一个有效的 IPv6 地址, 所以返回 &quot;IPv6&quot;。\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;256.256.256.256&quot;\n\n<strong>输出:</strong> &quot;Neither&quot;\n\n<strong>解释:</strong> 这个地址既不是 IPv4 也不是 IPv6 地址。\n</pre>\n","keyboard-row":"<p>给定一个单词列表，只返回可以使用在键盘同一行的字母打印出来的单词。键盘如下图所示。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"American keyboard\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/keyboard.png\" style=\"width: 100%; max-width: 600px\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>示例：</strong></p>\r\n\r\n<pre><strong>输入:</strong> [&quot;Hello&quot;, &quot;Alaska&quot;, &quot;Dad&quot;, &quot;Peace&quot;]\r\n<strong>输出:</strong> [&quot;Alaska&quot;, &quot;Dad&quot;]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>注意：</strong></p>\r\n\r\n<ol>\r\n\t<li>你可以重复使用键盘上同一字符。</li>\r\n\t<li>你可以假设输入的字符串将只包含字母。</li>\r\n</ol>","increasing-subsequences":"<p>给定一个整型数组, 你的任务是找到所有该数组的递增子序列，递增子序列的长度至少是2。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\n<strong>输入:</strong> [4, 6, 7, 7]\n<strong>输出:</strong> [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>给定数组的长度不会超过15。</li>\n\t<li>数组中的整数范围是&nbsp;[-100,100]。</li>\n\t<li>给定数组中可能包含重复数字，相等的数字应该被视为递增的一种情况。</li>\n</ol>\n","coin-change-2":"<p>给定不同面额的硬币和一个总金额。写出函数来计算可以凑成总金额的硬币组合数。假设每一种面额的硬币有无限个。&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> amount = 5, coins = [1, 2, 5]\n<strong>输出:</strong> 4\n<strong>解释:</strong> 有四种方式可以凑成总金额:\n5=5\n5=2+2+1\n5=2+1+1+1\n5=1+1+1+1+1\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> amount = 3, coins = [2]\n<strong>输出:</strong> 0\n<strong>解释:</strong> 只用面额2的硬币不能凑成总金额3。\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> amount = 10, coins = [10] \n<strong>输出:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意</strong><strong>:</strong></p>\n\n<p>你可以假设：</p>\n\n<ul>\n\t<li>0 &lt;= amount (总金额) &lt;= 5000</li>\n\t<li>1 &lt;= coin (硬币面额)&nbsp;&lt;= 5000</li>\n\t<li>硬币种类不超过 500 种</li>\n\t<li>结果符合 32 位符号整数</li>\n</ul>\n","next-greater-element-ii":"<p>给定一个循环数组（最后一个元素的下一个元素是数组的第一个元素），输出每个元素的下一个更大元素。数字 x 的下一个更大的元素是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 -1。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,2,1]\n<strong>输出:</strong> [2,-1,2]\n<strong>解释:</strong> 第一个 1 的下一个更大的数是 2；\n数字 2 找不到下一个更大的数； \n第二个 1 的下一个最大的数需要循环搜索，结果也是 2。\n</pre>\n\n<p><strong>注意:</strong> 输入数组的长度不会超过 10000。</p>\n","the-maze-iii":null,"132-pattern":"<p>给定一个整数序列：a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub>，一个132模式的子序列&nbsp;a<sub><strong>i</strong></sub>, a<sub><strong>j</strong></sub>, a<sub><strong>k</strong></sub>&nbsp;被定义为：当 <strong>i</strong> &lt; <strong>j</strong> &lt; <strong>k</strong> 时，a<sub><strong>i</strong></sub> &lt; a<sub><strong>k</strong></sub> &lt; a<sub><strong>j</strong></sub>。设计一个算法，当给定有&nbsp;n 个数字的序列时，验证这个序列中是否含有132模式的子序列。</p>\n\n<p><strong>注意：</strong>n 的值小于15000。</p>\n\n<p><strong>示例1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1, 2, 3, 4]\n\n<strong>输出:</strong> False\n\n<strong>解释:</strong> 序列中不存在132模式的子序列。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> [3, 1, 4, 2]\n\n<strong>输出:</strong> True\n\n<strong>解释:</strong> 序列中有 1 个132模式的子序列： [1, 4, 2].\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong> [-1, 3, 2, 0]\n\n<strong>输出:</strong> True\n\n<strong>解释:</strong> 序列中有 3 个132模式的的子序列: [-1, 3, 2], [-1, 3, 0] 和 [-1, 2, 0].\n</pre>\n","longest-uncommon-subsequence-i":"<p>给定两个字符串，你需要从这两个字符串中找出最长的特殊序列。最长特殊序列定义如下：该序列为某字符串独有的最长子序列（即不能是其他字符串的子序列）。</p>\n\n<p><strong>子序列</strong>可以通过删去字符串中的某些字符实现，但不能改变剩余字符的相对顺序。空序列为所有字符串的子序列，任何字符串为其自身的子序列。</p>\n\n<p>输入为两个字符串，输出最长特殊序列的长度。如果不存在，则返回 -1。</p>\n\n<p><strong>示例 :</strong></p>\n\n<pre><strong>输入:</strong> &quot;aba&quot;, &quot;cdc&quot;\n<strong>输出:</strong> 3\n<strong>解析:</strong> 最长特殊序列可为 &quot;aba&quot; (或 &quot;cdc&quot;)\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>两个字符串长度均小于100。</li>\n\t<li>字符串中的字符仅含有&nbsp;&#39;a&#39;~&#39;z&#39;。</li>\n</ol>\n","all-oone-data-structure":"<p>实现一个数据结构支持以下操作：</p>\n\n<ol>\n\t<li>Inc(key) - 插入一个新的值为 1 的 key。或者使一个存在的 key 增加一，保证 key 不为空字符串。</li>\n\t<li>Dec(key) - 如果这个 key 的值是 1，那么把他从数据结构中移除掉。否者使一个存在的 key 值减一。如果这个 key 不存在，这个函数不做任何事情。key 保证不为空字符串。</li>\n\t<li>GetMaxKey() - 返回 key 中值最大的任意一个。如果没有元素存在，返回一个空字符串<code>&quot;&quot;</code>。</li>\n\t<li>GetMinKey() - 返回 key 中值最小的任意一个。如果没有元素存在，返回一个空字符串<code>&quot;&quot;</code>。</li>\n</ol>\n\n<p>挑战：以 O(1) 的时间复杂度实现所有操作。</p>\n","encode-string-with-shortest-length":null,"can-i-win":"<p>在 &quot;100 game&quot; 这个游戏中，两名玩家轮流选择从 1 到 10 的任意整数，累计整数和，先使得累计整数和达到 100 的玩家，即为胜者。</p>\n\n<p>如果我们将游戏规则改为 &ldquo;玩家不能重复使用整数&rdquo; 呢？</p>\n\n<p>例如，两个玩家可以轮流从公共整数池中抽取从 1 到 15 的整数（不放回），直到累计整数和 &gt;= 100。</p>\n\n<p>给定一个整数&nbsp;<code>maxChoosableInteger</code>&nbsp;（整数池中可选择的最大数）和另一个整数&nbsp;<code>desiredTotal</code>（累计和），判断先出手的玩家是否能稳赢（假设两位玩家游戏时都表现最佳）？</p>\n\n<p>你可以假设&nbsp;<code>maxChoosableInteger</code>&nbsp;不会大于 20，&nbsp;<code>desiredTotal</code>&nbsp;不会大于 300。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>\nmaxChoosableInteger = 10\ndesiredTotal = 11\n\n<strong>输出：</strong>\nfalse\n\n<strong>解释：\n</strong>无论第一个玩家选择哪个整数，他都会失败。\n第一个玩家可以选择从 1 到 10 的整数。\n如果第一个玩家选择 1，那么第二个玩家只能选择从 2 到 10 的整数。\n第二个玩家可以通过选择整数 10（那么累积和为 11 &gt;= desiredTotal），从而取得胜利.\n同样地，第一个玩家选择任意其他整数，第二个玩家都会赢。\n</pre>\n","convex-polygon":null,"minimum-moves-to-equal-array-elements-ii":"<p>给定一个非空整数数组，找到使所有数组元素相等所需的最小移动数，其中每次移动可将选定的一个元素加1或减1。 您可以假设数组的长度最多为10000。</p>\n\n<p><strong>例如:</strong></p>\n\n<pre>\n<strong>输入:</strong>\n[1,2,3]\n\n<strong>输出:</strong>\n2\n\n<strong>说明：\n</strong>只有两个动作是必要的（记得每一步仅可使其中一个元素加1或减1）： \n\n[1,2,3]  =&gt;  [2,2,3]  =&gt;  [2,2,2]\n</pre>\n","add-two-numbers-ii":"<p>给定两个<strong>非空</strong>链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储单个数字。将这两数相加会返回一个新的链表。</p>\n\n<p>&nbsp;</p>\n\n<p>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p>\n\n<p><strong>进阶:</strong></p>\n\n<p>如果输入链表不能修改该如何处理？换句话说，你不能对列表中的节点进行翻转。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\n<strong>输入:</strong> (7 -&gt; 2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\n<strong>输出:</strong> 7 -&gt; 8 -&gt; 0 -&gt; 7\n</pre>\n","count-the-repetitions":"<p>定义由 n 个连接的字符串 s 组成字符串 S，即&nbsp;<code>S = [s,n]</code>。例如，<code>[&quot;abc&quot;, 3]</code>=&ldquo;abcabcabc&rdquo;。</p>\n\n<p>另一方面，如果我们可以从 s<sub>2&nbsp;</sub>中删除某些字符使其变为 s<sub>1</sub>，我们称字符串 s<sub>1&nbsp;</sub>可以从字符串 s<sub>2&nbsp;</sub>获得。例如，&ldquo;abc&rdquo; 可以根据我们的定义从 &ldquo;abdbec&rdquo; 获得，但不能从 &ldquo;acbbe&rdquo; 获得。</p>\n\n<p>现在给出两个非空字符串 S<sub>1&nbsp;</sub>和 S<sub>2</sub>（每个最多 100 个字符长）和两个整数 0 &le; N<sub>1&nbsp;</sub>&le; 10<sup>6&nbsp;</sup>和 1 &le; N<sub>2&nbsp;</sub>&le; 10<sup>6</sup>。现在考虑字符串 S<sub>1&nbsp;</sub>和 S<sub>2</sub>，其中<code>S1=[s1,n1]</code>和<code>S2=[s2,n2]</code>。找出可以使<code>[S2,M]</code>从&nbsp;<code>S1</code>&nbsp;获得的最大整数 M。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>输入：\ns1 =&quot;acb&quot;,n1 = 4\ns2 =&quot;ab&quot;,n2 = 2\n\n返回：\n2\n</pre>\n","find-permutation":null,"find-right-interval":"<p>给定一组区间，对于每一个区间 i，检查是否存在一个区间 j，它的起始点大于或等于区间&nbsp;i 的终点，这可以称为 j 在 i 的&ldquo;右侧&rdquo;。</p>\n\n<p>对于任何区间，你需要存储的满足条件的区间&nbsp;j 的最小索引，这意味着区间 j 有最小的起始点可以使其成为&ldquo;右侧&rdquo;区间。如果区间&nbsp;j 不存在，则将区间 i 存储为 -1。最后，你需要输出一个值为存储的区间值的数组。</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>你可以假设区间的终点总是大于它的起始点。</li>\n\t<li>你可以假定这些区间都不具有相同的起始点。</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [ [1,2] ]\n<strong>输出:</strong> [-1]\n\n<strong>解释:</strong>集合中只有一个区间，所以输出-1。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> [ [3,4], [2,3], [1,2] ]\n<strong>输出:</strong> [-1, 0, 1]\n\n<strong>解释:</strong>对于[3,4]，没有满足条件的&ldquo;右侧&rdquo;区间。\n对于[2,3]，区间[3,4]具有最小的&ldquo;右&rdquo;起点;\n对于[1,2]，区间[2,3]具有最小的&ldquo;右&rdquo;起点。\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong> [ [1,4], [2,3], [3,4] ]\n<strong>输出:</strong> [-1, 2, -1]\n\n<strong>解释:对于</strong>区间[1,4]和[3,4]，没有满足条件的&ldquo;右侧&rdquo;区间。\n对于[2,3]，区间[3,4]有最小的&ldquo;右&rdquo;起点。\n</pre>\n","maximum-xor-of-two-numbers-in-an-array":"<p>给定一个非空数组，数组中元素为 a<sub>0</sub>, a<sub>1</sub>, a<sub>2</sub>, &hellip; , a<sub>n-1</sub>，其中 0 &le; a<sub>i</sub> &lt; 2<sup>31&nbsp;</sup>。</p>\n\n<p>找到 a<sub>i</sub> 和a<sub>j&nbsp;</sub>最大的异或 (XOR) 运算结果，其中0 &le; <em>i</em>,&nbsp;&nbsp;<em>j</em> &lt; <em>n&nbsp;</em>。</p>\n\n<p>你能在O(<em>n</em>)的时间解决这个问题吗？</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\n<strong>输入:</strong> [3, 10, 5, 25, 2, 8]\n\n<strong>输出:</strong> 28\n\n<strong>解释:</strong> 最大的结果是 <strong>5</strong> ^ <strong>25</strong> = 28.\n</pre>\n","path-sum-iii":"<p>给定一个二叉树，它的每个结点都存放着一个整数值。</p>\n\n<p>找出路径和等于给定数值的路径总数。</p>\n\n<p>路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。</p>\n\n<p>二叉树不超过1000个节点，且节点数值范围是 [-1000000,1000000] 的整数。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8\n\n      10\n     /  \\\n    <strong>5</strong>   <strong>-3</strong>\n   <strong>/</strong> <strong>\\</strong>    <strong>\\</strong>\n  <strong>3</strong>   <strong>2</strong>   <strong>11</strong>\n / \\   <strong>\\</strong>\n3  -2   <strong>1</strong>\n\n返回 3。和等于 8 的路径有:\n\n1.  5 -&gt; 3\n2.  5 -&gt; 2 -&gt; 1\n3.  -3 -&gt; 11\n</pre>\n","4sum-ii":"<p>给定四个包含整数的数组列表&nbsp;A , B , C , D ,计算有多少个元组 <code>(i, j, k, l)</code>&nbsp;，使得&nbsp;<code>A[i] + B[j] + C[k] + D[l] = 0</code>。</p>\n\n<p>为了使问题简单化，所有的 A, B, C, D 具有相同的长度&nbsp;N，且 0 &le; N &le; 500 。所有整数的范围在 -2<sup>28</sup> 到 2<sup>28</sup> - 1 之间，最终结果不会超过&nbsp;2<sup>31</sup> - 1 。</p>\n\n<p><strong>例如:</strong></p>\n\n<pre>\n<strong>输入:</strong>\nA = [ 1, 2]\nB = [-2,-1]\nC = [-1, 2]\nD = [ 0, 2]\n\n<strong>输出:</strong>\n2\n\n<strong>解释:</strong>\n两个元组如下:\n1. (0, 0, 0, 1) -&gt; A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0\n2. (1, 1, 0, 0) -&gt; A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0\n</pre>\n","optimal-account-balancing":null,"reconstruct-original-digits-from-english":"<p>给定一个<strong>非空</strong>字符串，其中包含字母顺序打乱的英文单词表示的数字<code>0-9</code>。按升序输出原始的数字。</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>输入只包含小写英文字母。</li>\n\t<li>输入保证合法并可以转换为原始的数字，这意味着像 &quot;abc&quot; 或 &quot;zerone&quot; 的输入是不允许的。</li>\n\t<li>输入字符串的长度小于 50,000。</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n输入: &quot;owoztneoer&quot;\n\n输出: &quot;012&quot; (zeroonetwo)\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n输入: &quot;fviefuro&quot;\n\n输出: &quot;45&quot; (fourfive)\n</pre>\n","strong-password-checker":"<p>一个强密码应满足以下所有条件：</p>\n\n<ol>\n\t<li>由至少6个，至多20个字符组成。</li>\n\t<li>至少包含一个小写字母，一个大写字母，和一个数字。</li>\n\t<li>同一字符<strong>不能</strong>连续出现三次 (比如 &quot;...aaa...&quot; 是不允许的, 但是&nbsp;&quot;...aa...a...&quot; 是可以的)。</li>\n</ol>\n\n<p>编写函数&nbsp;strongPasswordChecker(s)，s 代表输入字符串，如果 s 已经符合强密码条件，则返回0；否则返回要将 s 修改为满足强密码条件的字符串所需要进行修改的<strong>最小</strong>步数。</p>\n\n<p>插入、删除、替换任一字符都算作一次修改。</p>\n","predict-the-winner":"<p>给定一个表示分数的非负整数数组。 玩家1从数组任意一端拿取一个分数，随后玩家2继续从剩余数组任意一端拿取分数，然后玩家1拿，&hellip;&hellip;。每次一个玩家只能拿取一个分数，分数被拿取之后不再可取。直到没有剩余分数可取时游戏结束。最终获得分数总和最多的玩家获胜。</p>\n\n<p>给定一个表示分数的数组，预测玩家1是否会成为赢家。你可以假设每个玩家的玩法都会使他的分数最大化。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1, 5, 2]\n<strong>输出:</strong> False\n<strong>解释:</strong> 一开始，玩家1可以从1和2中进行选择。\n如果他选择2（或者1），那么玩家2可以从1（或者2）和5中进行选择。如果玩家2选择了5，那么玩家1则只剩下1（或者2）可选。\n所以，玩家1的最终分数为 1 + 2 = 3，而玩家2为 5。\n因此，玩家1永远不会成为赢家，返回 False。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1, 5, 233, 7]\n<strong>输出:</strong> True\n<strong>解释:</strong> 玩家1一开始选择1。然后玩家2必须从5和7中进行选择。无论玩家2选择了哪个，玩家1都可以选择233。\n最终，玩家1（234分）比玩家2（12分）获得更多的分数，所以返回 True，表示玩家1可以成为赢家。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>1 &lt;= 给定的数组长度&nbsp;&lt;= 20.</li>\n\t<li>数组里所有分数都为非负数且不会大于10000000。</li>\n\t<li>如果最终两个玩家的分数相等，那么玩家1仍为赢家。</li>\n</ol>\n","assign-cookies":"<p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。对每个孩子 i ，都有一个胃口值&nbsp;g<sub>i ，</sub>这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j ，都有一个尺寸 s<sub>j&nbsp;</sub>。如果 s<sub>j</sub> &gt;= g<sub>i&nbsp;</sub>，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p>\n\n<p><strong>注意：</strong></p>\n\n<p>你可以假设胃口值为正。<br />\n一个小朋友最多只能拥有一块饼干。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,2,3], [1,1]\n\n<strong>输出:</strong> 1\n\n<strong>解释:</strong> \n你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。\n虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。\n所以你应该输出1。\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,2], [1,2,3]\n\n<strong>输出:</strong> 2\n\n<strong>解释:</strong> \n你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。\n你拥有的饼干数量和尺寸都足以让所有孩子满足。\n所以你应该输出2.\n</pre>\n","minimum-moves-to-equal-array-elements":"<p>给定一个长度为 <em>n</em> 的<strong>非空</strong>整数数组，找到让数组所有元素相等的最小移动次数。每次移动可以使 <em>n</em> - 1 个元素增加 1。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\n<strong>输入:</strong>\n[1,2,3]\n\n<strong>输出:</strong>\n3\n\n<strong>解释:</strong>\n只需要3次移动（注意每次移动会增加两个元素的值）：\n\n[1,2,3]  =&gt;  [2,3,3]  =&gt;  [3,4,3]  =&gt;  [4,4,4]\n</pre>\n","pacific-atlantic-water-flow":"<p>给定一个 <code>m x n</code> 的非负整数矩阵来表示一片大陆上各个单元格的高度。&ldquo;太平洋&rdquo;处于大陆的左边界和上边界，而&ldquo;大西洋&rdquo;处于大陆的右边界和下边界。</p>\n\n<p>规定水流只能按照上、下、左、右四个方向流动，且只能从高到低或者在同等高度上流动。</p>\n\n<p>请找出那些水流既可以流动到&ldquo;太平洋&rdquo;，又能流动到&ldquo;大西洋&rdquo;的陆地单元的坐标。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>输出坐标的顺序不重要</li>\n\t<li><em>m</em> 和 <em>n</em> 都小于150</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<p>&nbsp;</p>\n\n<pre>\n给定下面的 5x5 矩阵:\n\n  太平洋 ~   ~   ~   ~   ~ \n       ~  1   2   2   3  (5) *\n       ~  3   2   3  (4) (4) *\n       ~  2   4  (5)  3   1  *\n       ~ (6) (7)  1   4   5  *\n       ~ (5)  1   1   2   4  *\n          *   *   *   *   * 大西洋\n\n返回:\n\n[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (上图中带括号的单元).\n</pre>\n\n<p>&nbsp;</p>\n","largest-palindrome-product":"<p>你需要找到由两个 n 位数的乘积组成的最大回文数。</p>\n\n<p>由于结果会很大，你只需返回最大回文数 mod 1337得到的结果。</p>\n\n<p><strong>示例:</strong></p>\n\n<p>输入: 2</p>\n\n<p>输出: 987</p>\n\n<p>解释: 99 x 91 = 9009, 9009 % 1337 = 987</p>\n\n<p><strong>说明:</strong></p>\n\n<p>n 的取值范围为&nbsp;[1,8]。</p>\n","serialize-and-deserialize-bst":"<p>序列化是将数据结构或对象转换为一系列位的过程，以便它可以存储在文件或内存缓冲区中，或通过网络连接链路传输，以便稍后在同一个或另一个计算机环境中重建。</p>\n\n<p>设计一个算法来序列化和反序列化<strong>二叉搜索树</strong>。 对序列化/反序列化算法的工作方式没有限制。 您只需确保二叉搜索树可以序列化为字符串，并且可以将该字符串反序列化为最初的二叉搜索树。</p>\n\n<p><strong>编码的字符串应尽可能紧凑。</strong></p>\n\n<p><strong>注意</strong>：不要使用类成员/全局/静态变量来存储状态。 你的序列化和反序列化算法应该是无状态的。</p>\n","sort-characters-by-frequency":"<p>给定一个字符串，请将字符串里的字符按照出现的频率降序排列。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong>\n&quot;tree&quot;\n\n<strong>输出:</strong>\n&quot;eert&quot;\n\n<strong>解释:\n</strong>&#39;e&#39;出现两次，&#39;r&#39;和&#39;t&#39;都只出现一次。\n因此&#39;e&#39;必须出现在&#39;r&#39;和&#39;t&#39;之前。此外，&quot;eetr&quot;也是一个有效的答案。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong>\n&quot;cccaaa&quot;\n\n<strong>输出:</strong>\n&quot;cccaaa&quot;\n\n<strong>解释:\n</strong>&#39;c&#39;和&#39;a&#39;都出现三次。此外，&quot;aaaccc&quot;也是有效的答案。\n注意&quot;cacaca&quot;是不正确的，因为相同的字母必须放在一起。\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong>\n&quot;Aabb&quot;\n\n<strong>输出:</strong>\n&quot;bbAa&quot;\n\n<strong>解释:\n</strong>此外，&quot;bbaA&quot;也是一个有效的答案，但&quot;Aabb&quot;是不正确的。\n注意&#39;A&#39;和&#39;a&#39;被认为是两种不同的字符。\n</pre>\n","number-of-boomerangs":"<p>给定平面上<em>&nbsp;n </em>对不同的点，&ldquo;回旋镖&rdquo; 是由点表示的元组&nbsp;<code>(i, j, k)</code>&nbsp;，其中&nbsp;<code>i</code>&nbsp;和&nbsp;<code>j</code>&nbsp;之间的距离和&nbsp;<code>i</code>&nbsp;和&nbsp;<code>k</code>&nbsp;之间的距离相等（<strong>需要考虑元组的顺序</strong>）。</p>\n\n<p>找到所有回旋镖的数量。你可以假设<em>&nbsp;n </em>最大为 <strong>500</strong>，所有点的坐标在闭区间<strong> [-10000, 10000] </strong>中。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\n<strong>输入:</strong>\n[[0,0],[1,0],[2,0]]\n\n<strong>输出:</strong>\n2\n\n<strong>解释:</strong>\n两个回旋镖为 <strong>[[1,0],[0,0],[2,0]]</strong> 和 <strong>[[1,0],[2,0],[0,0]]</strong>\n</pre>\n","delete-node-in-a-bst":"<p>给定一个二叉搜索树的根节点 <strong>root </strong>和一个值 <strong>key</strong>，删除二叉搜索树中的&nbsp;<strong>key&nbsp;</strong>对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。</p>\n\n<p>一般来说，删除节点可分为两个步骤：</p>\n\n<ol>\n\t<li>首先找到需要删除的节点；</li>\n\t<li>如果找到了，删除它。</li>\n</ol>\n\n<p><strong>说明：</strong> 要求算法时间复杂度为&nbsp;O(h)，h 为树的高度。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\nroot = [5,3,6,2,4,null,7]\nkey = 3\n\n    5\n   / \\\n  3   6\n / \\   \\\n2   4   7\n\n给定需要删除的节点值是 3，所以我们首先找到 3 这个节点，然后删除它。\n\n一个正确的答案是 [5,4,6,2,null,null,7], 如下图所示。\n\n    5\n   / \\\n  4   6\n /     \\\n2       7\n\n另一个正确答案是 [5,2,6,null,4,null,7]。\n\n    5\n   / \\\n  2   6\n   \\   \\\n    4   7\n</pre>\n","k-th-smallest-in-lexicographical-order":"<p>给定整数&nbsp;<code>n</code>&nbsp;和&nbsp;<code>k</code>，找到&nbsp;<code>1</code>&nbsp;到&nbsp;<code>n</code>&nbsp;中字典序第&nbsp;<code>k</code>&nbsp;小的数字。</p>\n\n<p>注意：1 &le; k &le; n &le; 10<sup>9</sup>。</p>\n\n<p><strong>示例 :</strong></p>\n\n<pre>\n<strong>输入:</strong>\nn: 13   k: 2\n\n<strong>输出:</strong>\n10\n\n<strong>解释:</strong>\n字典序的排列是 [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9]，所以第二小的数字是 10。\n</pre>\n","third-maximum-number":"<p>给定一个非空数组，返回此数组中第三大的数。如果不存在，则返回数组中最大的数。要求算法时间复杂度必须是O(n)。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [3, 2, 1]\n\n<strong>输出:</strong> 1\n\n<strong>解释:</strong> 第三大的数是 1.\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1, 2]\n\n<strong>输出:</strong> 2\n\n<strong>解释:</strong> 第三大的数不存在, 所以返回最大的数 2 .\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong> [2, 2, 3, 1]\n\n<strong>输出:</strong> 1\n\n<strong>解释:</strong> 注意，要求返回第三大的数，是指第三大且唯一出现的数。\n存在两个值为2的数，它们都排第二。\n</pre>\n","unique-substrings-in-wraparound-string":"<p>把字符串 <code>s</code> 看作是&ldquo;abcdefghijklmnopqrstuvwxyz&rdquo;的无限环绕字符串，所以&nbsp;<code>s</code> 看起来是这样的：&quot;...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....&quot;.&nbsp;</p>\n\n<p>现在我们有了另一个字符串 <code>p</code> 。你需要的是找出 <code>s</code> 中有多少个唯一的 <code>p</code> 的非空子串，尤其是当你的输入是字符串 <code>p</code> ，你需要输出字符串&nbsp;<code>s</code> 中 <code>p</code> 的不同的非空子串的数目。&nbsp;</p>\n\n<p><strong>注意:</strong> <code>p</code>&nbsp;仅由小写的英文字母组成，p 的大小可能超过 10000。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;a&quot;\n<strong>输出:</strong> 1\n<strong>解释:</strong> 字符串 S 中只有一个&quot;a&quot;子字符。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;cac&quot;\n<strong>输出:</strong> 2\n<strong>解释:</strong> 字符串 S 中的字符串&ldquo;cac&rdquo;只有两个子串&ldquo;a&rdquo;、&ldquo;c&rdquo;。.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;zab&quot;\n<strong>输出:</strong> 6\n<strong>解释:</strong> 在字符串 S 中有六个子串&ldquo;z&rdquo;、&ldquo;a&rdquo;、&ldquo;b&rdquo;、&ldquo;za&rdquo;、&ldquo;ab&rdquo;、&ldquo;zab&rdquo;。.\n</pre>\n\n<p>&nbsp;</p>\n","minimum-genetic-mutation":"<p>一条基因序列由一个带有8个字符的字符串表示，其中每个字符都属于 <code>&quot;A&quot;</code>, <code>&quot;C&quot;</code>, <code>&quot;G&quot;</code>, <code>&quot;T&quot;</code>中的任意一个。</p>\n\n<p>假设我们要调查一个基因序列的变化。<strong>一次</strong>基因变化意味着这个基因序列中的<strong>一个</strong>字符发生了变化。</p>\n\n<p>例如，基因序列由<code>&quot;AACCGGTT&quot;</code>&nbsp;变化至&nbsp;<code>&quot;AACCGGTA&quot;&nbsp;</code>即发生了一次基因变化。</p>\n\n<p>与此同时，每一次基因变化的结果，都需要是一个合法的基因串，即该结果属于一个基因库。</p>\n\n<p>现在给定3个参数 &mdash; start, end, bank，分别代表起始基因序列，目标基因序列及基因库，请找出能够使起始基因序列变化为目标基因序列所需的最少变化次数。如果无法实现目标变化，请返回 -1。</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>起始基因序列默认是合法的，但是它并不一定会出现在基因库中。</li>\n\t<li>所有的目标基因序列必须是合法的。</li>\n\t<li>假定起始基因序列与目标基因序列是不一样的。</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\nstart: &quot;AACCGGTT&quot;\nend:   &quot;AACCGGTA&quot;\nbank: [&quot;AACCGGTA&quot;]\n\n返回值: 1\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\nstart: &quot;AACCGGTT&quot;\nend:   &quot;AAACGGTA&quot;\nbank: [&quot;AACCGGTA&quot;, &quot;AACCGCTA&quot;, &quot;AAACGGTA&quot;]\n\n返回值: 2\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\nstart: &quot;AAAAACCC&quot;\nend:   &quot;AACCCCCC&quot;\nbank: [&quot;AAAACCCC&quot;, &quot;AAACCCCC&quot;, &quot;AACCCCCC&quot;]\n\n返回值: 3\n</pre>\n","find-all-anagrams-in-a-string":"<p>给定一个字符串&nbsp;<strong>s&nbsp;</strong>和一个非空字符串&nbsp;<strong>p</strong>，找到&nbsp;<strong>s&nbsp;</strong>中所有是&nbsp;<strong>p&nbsp;</strong>的字母异位词的子串，返回这些子串的起始索引。</p>\n\n<p>字符串只包含小写英文字母，并且字符串&nbsp;<strong>s&nbsp;</strong>和 <strong>p&nbsp;</strong>的长度都不超过 20100。</p>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>字母异位词指字母相同，但排列不同的字符串。</li>\n\t<li>不考虑答案输出的顺序。</li>\n</ul>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>\n<strong>输入:</strong>\ns: &quot;cbaebabacd&quot; p: &quot;abc&quot;\n\n<strong>输出:</strong>\n[0, 6]\n\n<strong>解释:</strong>\n起始索引等于 0 的子串是 &quot;cba&quot;, 它是 &quot;abc&quot; 的字母异位词。\n起始索引等于 6 的子串是 &quot;bac&quot;, 它是 &quot;abc&quot; 的字母异位词。\n</pre>\n\n<p><strong>&nbsp;示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong>\ns: &quot;abab&quot; p: &quot;ab&quot;\n\n<strong>输出:</strong>\n[0, 1, 2]\n\n<strong>解释:</strong>\n起始索引等于 0 的子串是 &quot;ab&quot;, 它是 &quot;ab&quot; 的字母异位词。\n起始索引等于 1 的子串是 &quot;ba&quot;, 它是 &quot;ab&quot; 的字母异位词。\n起始索引等于 2 的子串是 &quot;ab&quot;, 它是 &quot;ab&quot; 的字母异位词。\n</pre>\n","arithmetic-slices":"<p>如果一个数列至少有三个元素，并且任意两个相邻元素之差相同，则称该数列为等差数列。</p>\n\n<p>例如，以下数列为等差数列:</p>\n\n<pre>\n1, 3, 5, 7, 9\n7, 7, 7, 7\n3, -1, -5, -9</pre>\n\n<p>以下数列不是等差数列。</p>\n\n<pre>\n1, 1, 2, 5, 7</pre>\n\n<p>&nbsp;</p>\n\n<p>数组 A 包含 N 个数，且索引从0开始。数组 A 的一个子数组划分为数组 (P, Q)，P 与 Q 是整数且满足 0&lt;=P&lt;Q&lt;N 。</p>\n\n<p>如果满足以下条件，则称子数组(P, Q)为等差数组：</p>\n\n<p>元素 A[P], A[p + 1], ..., A[Q - 1], A[Q] 是等差的。并且&nbsp;P + 1 &lt; Q 。</p>\n\n<p>函数要返回数组 A 中所有为等差数组的子数组个数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\nA = [1, 2, 3, 4]\n\n返回: 3, A 中有三个子等差数组: [1, 2, 3], [2, 3, 4] 以及自身 [1, 2, 3, 4]。\n</pre>\n","find-all-duplicates-in-an-array":"<p>给定一个整数数组 a，其中1 &le; a[i] &le; <em>n</em> （<em>n</em>为数组长度）, 其中有些元素出现<strong>两次</strong>而其他元素出现<strong>一次</strong>。</p>\n\n<p>找到所有出现<strong>两次</strong>的元素。</p>\n\n<p>你可以不用到任何额外空间并在O(<em>n</em>)时间复杂度内解决这个问题吗？</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>\n<strong>输入:</strong>\n[4,3,2,7,8,2,3,1]\n\n<strong>输出:</strong>\n[2,3]\n</pre>\n","arranging-coins":"<p>你总共有&nbsp;<em>n&nbsp;</em>枚硬币，你需要将它们摆成一个阶梯形状，第&nbsp;<em>k&nbsp;</em>行就必须正好有&nbsp;<em>k&nbsp;</em>枚硬币。</p>\n\n<p>给定一个数字&nbsp;<em>n</em>，找出可形成完整阶梯行的总行数。</p>\n\n<p><em>n&nbsp;</em>是一个非负整数，并且在32位有符号整型的范围内。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\nn = 5\n\n硬币可排列成以下几行:\n&curren;\n&curren; &curren;\n&curren; &curren;\n\n因为第三行不完整，所以返回2.\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\nn = 8\n\n硬币可排列成以下几行:\n&curren;\n&curren; &curren;\n&curren; &curren; &curren;\n&curren; &curren;\n\n因为第四行不完整，所以返回3.\n</pre>\n","circular-array-loop":"<p>给定一组含有正整数和负整数的数组。如果某个索引中的 n 是正数的，则向前移动 n 个索引。相反，如果是负数(-n)，则向后移动 n 个索引。</p>\n\n<p>假设数组首尾相接。判断数组中是否有环。环中至少包含 2 个元素。环中的元素一律&ldquo;向前&rdquo;或者一律&ldquo;向后&rdquo;。</p>\n\n<p><strong>示例 1：</strong>给定数组&nbsp;[2, -1, 1, 2, 2], 有一个循环，从索引 0 -&gt; 2 -&gt; 3 -&gt; 0。</p>\n\n<p><strong>示例 2：</strong>给定数组[-1, 2], 没有循环。</p>\n\n<p><strong>注意：</strong>给定数组保证不包含元素&quot;0&quot;。</p>\n\n<p>你能写出时间复杂度为 <strong>O(n) </strong>且空间复杂度为&nbsp;<strong>O(1)&nbsp;</strong>的算法吗？</p>\n","minimum-number-of-arrows-to-burst-balloons":"<p>在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以y坐标并不重要，因此只要知道开始和结束的x坐标就足够了。开始坐标总是小于结束坐标。平面内最多存在10<sup>4</sup>个气球。</p>\n\n<p>一支弓箭可以沿着x轴从不同点完全垂直地射出。在坐标x处射出一支箭，若有一个气球的直径的开始和结束坐标为 x<sub>start，</sub>x<sub>end，</sub> 且满足 &nbsp;x<sub>start</sub>&nbsp;&le; x &le; x<sub>end，</sub>则该气球会被引爆<sub>。</sub>可以射出的弓箭的数量没有限制。 弓箭一旦被射出之后，可以无限地前进。我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。</p>\n\n<p><strong>Example:</strong></p>\n\n<pre>\n<strong>输入:</strong>\n[[10,16], [2,8], [1,6], [7,12]]\n\n<strong>输出:</strong>\n2\n\n<strong>解释:</strong>\n对于该样例，我们可以在x = 6（射爆[2,8],[1,6]两个气球）和 x = 11（射爆另外两个气球）。\n</pre>\n","add-strings":"<p>给定两个字符串形式的非负整数&nbsp;<code>num1</code> 和<code>num2</code>&nbsp;，计算它们的和。</p>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li><code>num1</code> 和<code>num2</code>&nbsp;的长度都小于 5100.</li>\n\t<li><code>num1</code> 和<code>num2</code> 都只包含数字&nbsp;<code>0-9</code>.</li>\n\t<li><code>num1</code> 和<code>num2</code> 都不包含任何前导零。</li>\n\t<li><strong>你不能使用任何內建 BigInteger 库，&nbsp;也不能直接将输入的字符串转换为整数形式。</strong></li>\n</ol>\n","hamming-distance":"<p>两个整数之间的<a href=\"https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB\">汉明距离</a>指的是这两个数字对应二进制位不同的位置的数目。</p>\n\n<p>给出两个整数 <code>x</code> 和 <code>y</code>，计算它们之间的汉明距离。</p>\n\n<p><strong>注意：</strong><br />\n0 &le; <code>x</code>, <code>y</code> &lt; 2<sup>31</sup>.</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\n<strong>输入:</strong> x = 1, y = 4\n\n<strong>输出:</strong> 2\n\n<strong>解释:</strong>\n1   (0 0 0 1)\n4   (0 1 0 0)\n       &uarr;   &uarr;\n\n上面的箭头指出了对应二进制位不同的位置。\n</pre>\n","arithmetic-slices-ii-subsequence":"<p>如果一个数列至少有三个元素，并且任意两个相邻元素之差相同，则称该数列为等差数列。</p>\n\n<p>例如，以下数列为等差数列:</p>\n\n<pre>1, 3, 5, 7, 9\n7, 7, 7, 7\n3, -1, -5, -9</pre>\n\n<p>以下数列不是等差数列。</p>\n\n<pre>1, 1, 2, 5, 7</pre>\n\n<p>&nbsp;</p>\n\n<p>数组 A 包含 N 个数，且索引从 0 开始。该数组<strong>子序列</strong>将划分为整数序列&nbsp;(P<sub>0</sub>, P<sub>1</sub>, ..., P<sub>k</sub>)，P 与 Q 是整数且满足 0 &le; P<sub>0</sub> &lt; P<sub>1</sub> &lt; ... &lt; P<sub>k</sub> &lt; N。</p>\n\n<p>&nbsp;</p>\n\n<p>如果序列 A[P<sub>0</sub>]，A[P<sub>1</sub>]，...，A[P<sub>k-1</sub>]，A[P<sub>k</sub>] 是等差的，那么数组 A 的<strong>子序列</strong> (P0，P1，&hellip;，PK) 称为等差序列。值得注意的是，这意味着 k &ge; 2。</p>\n\n<p>函数要返回数组 A 中所有等差子序列的个数。</p>\n\n<p>输入包含 N 个整数。每个整数都在 -2<sup>31</sup> 和 2<sup>31</sup>-1 之间，另外 0 &le; N &le; 1000。保证输出小于 2<sup>31</sup>-1。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<p>&nbsp;</p>\n\n<pre><strong>输入：</strong>[2, 4, 6, 8, 10]\n\n<strong>输出：</strong>7\n\n<strong>解释：</strong>\n所有的等差子序列为：\n[2,4,6]\n[4,6,8]\n[6,8,10]\n[2,4,6,8]\n[4,6,8,10]\n[2,4,6,8,10]\n[2,6,10]\n</pre>\n\n<p>&nbsp;</p>\n","ternary-expression-parser":null,"lfu-cache":"<p>设计并实现<a href=\"https://baike.baidu.com/item/%E7%BC%93%E5%AD%98%E7%AE%97%E6%B3%95\">最不经常使用（LFU）</a>缓存的数据结构。它应该支持以下操作：<code>get</code>&nbsp;和&nbsp;<code>put</code>。</p>\n\n<p><code>get(key)</code>&nbsp;- 如果键存在于缓存中，则获取键的值（总是正数），否则返回 -1。<br />\n<code>put(key, value)</code>&nbsp;- 如果键不存在，请设置或插入值。当缓存达到其容量时，它应该在插入新项目之前，使最不经常使用的项目无效。在此问题中，当存在平局（即两个或更多个键具有相同使用频率）时，<strong>最近</strong>最少使用的键将被去除。</p>\n\n<p><strong>进阶：</strong><br />\n你是否可以在&nbsp;<strong>O(1)&nbsp;</strong>时间复杂度内执行两项操作？</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>\nLFUCache cache = new LFUCache( 2 /* capacity (缓存容量) */ );\n\ncache.put(1, 1);\ncache.put(2, 2);\ncache.get(1);       // 返回 1\ncache.put(3, 3);    // 去除 key 2\ncache.get(2);       // 返回 -1 (未找到key 2)\ncache.get(3);       // 返回 3\ncache.put(4, 4);    // 去除 key 1\ncache.get(1);       // 返回 -1 (未找到 key 1)\ncache.get(3);       // 返回 3\ncache.get(4);       // 返回 4</pre>\n","repeated-substring-pattern":"<p>给定一个非空的字符串，判断它是否可以由它的一个子串重复多次构成。给定的字符串只含有小写英文字母，并且长度不超过10000。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;abab&quot;\n\n<strong>输出:</strong> True\n\n<strong>解释:</strong> 可由子字符串 &quot;ab&quot; 重复两次构成。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;aba&quot;\n\n<strong>输出:</strong> False\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;abcabcabcabc&quot;\n\n<strong>输出:</strong> True\n\n<strong>解释:</strong> 可由子字符串 &quot;abc&quot; 重复四次构成。 (或者子字符串 &quot;abcabc&quot; 重复两次构成。)\n</pre>\n","string-compression":"<p>给定一组字符，使用<a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">原地算法</a>将其压缩。</p>\n\n<p>压缩后的长度必须始终小于或等于原数组长度。</p>\n\n<p>数组的每个元素应该是长度为1&nbsp;的<strong>字符</strong>（不是 int 整数类型）。</p>\n\n<p>在完成<a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">原地</a><strong>修改输入数组</strong>后，返回数组的新长度。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶：</strong><br />\n你能否仅使用O(1) 空间解决问题？</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>\n[&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;]\n\n<strong>输出：</strong>\n返回6，输入数组的前6个字符应该是：[&quot;a&quot;,&quot;2&quot;,&quot;b&quot;,&quot;2&quot;,&quot;c&quot;,&quot;3&quot;]\n\n<strong>说明：</strong>\n&quot;aa&quot;被&quot;a2&quot;替代。&quot;bb&quot;被&quot;b2&quot;替代。&quot;ccc&quot;被&quot;c3&quot;替代。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>\n[&quot;a&quot;]\n\n<strong>输出：</strong>\n返回1，输入数组的前1个字符应该是：[&quot;a&quot;]\n\n<strong>说明：</strong>\n没有任何字符串被替代。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>\n[&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;]\n\n<strong>输出：</strong>\n返回4，输入数组的前4个字符应该是：[&quot;a&quot;,&quot;b&quot;,&quot;1&quot;,&quot;2&quot;]。\n\n<strong>说明：</strong>\n由于字符&quot;a&quot;不重复，所以不会被压缩。&quot;bbbbbbbbbbbb&quot;被&ldquo;b12&rdquo;替代。\n注意每个数字在数组中都有它自己的位置。\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li>所有字符都有一个ASCII值在<code>[35, 126]</code>区间内。</li>\n\t<li><code>1 &lt;= len(chars) &lt;= 1000</code>。</li>\n</ol>\n","sliding-window-median":"<p>中位数是有序序列最中间的那个数。如果序列的大小是偶数，则没有最中间的数；此时中位数是最中间的两个数的平均数。</p>\n\n<p>例如：</p>\n\n<p><code>[2,3,4]</code>，中位数是&nbsp;<code>3</code></p>\n\n<p><code>[2,3]</code>，中位数是 <code>(2 + 3) / 2 = 2.5</code></p>\n\n<p>给出一个数组 nums，有一个大小为 <em>k</em> 的窗口从最左端滑动到最右端。窗口中有 k 个数，每次窗口移动 1 位。你的任务是找出每次窗口移动后得到的新窗口中元素的中位数，并输出由它们组成的数组。</p>\n\n<p>例如：</p>\n\n<p>给出&nbsp;<em>nums</em> = <code>[1,3,-1,-3,5,3,6,7]</code>，以及&nbsp;<em>k</em> = 3。</p>\n\n<pre>\n窗口位置                      中位数\n---------------               -----\n[1  3  -1] -3  5  3  6  7       1\n 1 [3  -1  -3] 5  3  6  7       -1\n 1  3 [-1  -3  5] 3  6  7       -1\n 1  3  -1 [-3  5  3] 6  7       3\n 1  3  -1  -3 [5  3  6] 7       5\n 1  3  -1  -3  5 [3  6  7]      6\n</pre>\n\n<p>&nbsp;因此，返回该滑动窗口的中位数数组&nbsp;<code>[1,-1,-1,3,5,6]</code>。</p>\n\n<p><strong>提示：</strong><br />\n假设<code>k</code>是合法的，即：<code>k</code> 始终小于输入的非空数组的元素个数.</p>\n","word-squares":null,"longest-repeating-character-replacement":"<p>给你一个仅由大写英文字母组成的字符串，你可以将任意位置上的字符替换成另外的字符，总共可最多替换&nbsp;<em>k&nbsp;</em>次。在执行上述操作后，找到包含重复字母的最长子串的长度。</p>\n\n<p><strong>注意:</strong><br>\n字符串长度 和 <em>k </em>不会超过&nbsp;10<sup>4</sup>。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong>\ns = &quot;ABAB&quot;, k = 2\n\n<strong>输出:</strong>\n4\n\n<strong>解释:</strong>\n用两个&#39;A&#39;替换为两个&#39;B&#39;,反之亦然。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong>\ns = &quot;AABABBA&quot;, k = 1\n\n<strong>输出:</strong>\n4\n\n<strong>解释:</strong>\n将中间的一个&#39;A&#39;替换为&#39;B&#39;,字符串变为 &quot;AABBBBA&quot;。\n子串 &quot;BBBB&quot; 有最长重复字母, 答案为 4。\n</pre>\n","sequence-reconstruction":null,"battleships-in-a-board":"<p>给定一个二维的甲板， 请计算其中有多少艘战舰。&nbsp;战舰用&nbsp;<code>&#39;X&#39;</code>表示，空位用&nbsp;<code>&#39;.&#39;</code>表示。&nbsp;你需要遵守以下规则：</p>\n\n<ul>\n\t<li>给你一个有效的甲板，仅由战舰或者空位组成。</li>\n\t<li>战舰只能水平或者垂直放置。换句话说,战舰只能由&nbsp;<code>1xN</code> (1 行, N 列)组成，或者&nbsp;<code>Nx1</code> (N 行, 1 列)组成，其中N可以是任意大小。</li>\n\t<li>两艘战舰之间至少有一个水平或垂直的空位分隔&nbsp;- 即没有相邻的战舰。</li>\n</ul>\n\n<p><strong>示例 :</strong></p>\n\n<pre>\nX..X\n...X\n...X\n</pre>\n\n<p>在上面的甲板中有2艘战舰。</p>\n\n<p><strong>无效样例 :</strong></p>\n\n<pre>\n...X\nXXXX\n...X\n</pre>\n\n<p>你不会收到这样的无效甲板&nbsp;- 因为战舰之间至少会有一个空位将它们分开。</p>\n\n<p><strong>进阶:</strong></p>\n\n<p>你可以用<strong>一次扫描算法</strong>，只使用<strong>O(1)额外空间，</strong>并且<strong>不修改</strong>甲板的值来解决这个问题吗？</p>\n","find-all-numbers-disappeared-in-an-array":"<p>给定一个范围在&nbsp; 1 &le; a[i] &le; <em>n</em> (&nbsp;<em>n</em> = 数组大小 ) 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。</p>\n\n<p>找到所有在 [1, <em>n</em>] 范围之间没有出现在数组中的数字。</p>\n\n<p>您能在不使用额外空间且时间复杂度为<em>O(n)</em>的情况下完成这个任务吗? 你可以假定返回的数组不算在额外空间内。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\n<strong>输入:</strong>\n[4,3,2,7,8,2,3,1]\n\n<strong>输出:</strong>\n[5,6]\n</pre>\n","number-of-segments-in-a-string":"<p>统计字符串中的单词个数，这里的单词指的是连续的不是空格的字符。</p>\n\n<p>请注意，你可以假定字符串里不包括任何不可打印的字符。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> &quot;Hello, my name is John&quot;\n<strong>输出:</strong> 5\n</pre>\n","sentence-screen-fitting":null,"evaluate-division":"<p>给出方程式&nbsp;<code>A / B = k</code>, 其中&nbsp;<code>A</code> 和&nbsp;<code>B</code> 均为代表字符串的变量，&nbsp;<code>k</code> 是一个浮点型数字。根据已知方程式求解问题，并返回计算结果。如果结果不存在，则返回&nbsp;<code>-1.0</code>。</p>\n\n<p><strong>示例 :</strong><br />\n给定&nbsp;<code>a / b = 2.0, b / c = 3.0</code><br />\n问题: <code> a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?&nbsp;</code><br />\n返回&nbsp;<code>[6.0, 0.5, -1.0, 1.0, -1.0 ]</code></p>\n\n<p>输入为: <code> vector&lt;pair&lt;string, string&gt;&gt; equations, vector&lt;double&gt;&amp; values, vector&lt;pair&lt;string, string&gt;&gt; queries</code>(方程式，方程式结果，问题方程式)，&nbsp;其中&nbsp;<code>equations.size() == values.size()</code>，即方程式的长度与方程式结果长度相等（程式与结果一一对应），并且结果值均为正数。以上为方程式的描述。&nbsp;返回<code>vector&lt;double&gt;</code>类型。</p>\n\n<p>基于上述例子，输入如下：</p>\n\n<pre>\nequations(方程式) = [ [&quot;a&quot;, &quot;b&quot;], [&quot;b&quot;, &quot;c&quot;] ],\nvalues(方程式结果) = [2.0, 3.0],\nqueries(问题方程式) = [ [&quot;a&quot;, &quot;c&quot;], [&quot;b&quot;, &quot;a&quot;], [&quot;a&quot;, &quot;e&quot;], [&quot;a&quot;, &quot;a&quot;], [&quot;x&quot;, &quot;x&quot;] ]. \n</pre>\n\n<p>输入总是有效的。你可以假设除法运算中不会出现除数为0的情况，且不存在任何矛盾的结果。</p>\n","island-perimeter":"<p>给定一个包含 0 和 1 的二维网格地图，其中 1 表示陆地&nbsp;0 表示水域。</p>\n\n<p>网格中的格子水平和垂直方向相连（对角线方向不相连）。整个网格被水完全包围，但其中恰好有一个岛屿（或者说，一个或多个表示陆地的格子相连组成的岛屿）。</p>\n\n<p>岛屿中没有&ldquo;湖&rdquo;（&ldquo;湖&rdquo; 指水域在岛屿内部且不和岛屿周围的水相连）。格子是边长为 1 的正方形。网格为长方形，且宽度和高度均不超过 100 。计算这个岛屿的周长。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 :</strong></p>\n\n<pre><strong>输入:</strong>\n[[0,1,0,0],\n [1,1,1,0],\n [0,1,0,0],\n [1,1,0,0]]\n\n<strong>输出:</strong> 16\n\n<strong>解释:</strong> 它的周长是下面图片中的 16 个黄色的边：\n\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/island.png\">\n</pre>\n","elimination-game":"<p>给定一个从1 到 n 排序的整数列表。<br />\n首先，从左到右，从第一个数字开始，每隔一个数字进行删除，直到列表的末尾。<br />\n第二步，在剩下的数字中，从右到左，从倒数第一个数字开始，每隔一个数字进行删除，直到列表开头。<br />\n我们不断重复这两步，从左到右和从右到左交替进行，直到只剩下一个数字。<br />\n返回长度为 n 的列表中，最后剩下的数字。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>\n<strong>输入:</strong>\nn = 9,\n<u>1</u> 2 <u>3</u> 4 <u>5</u> 6 <u>7</u> 8 <u>9</u>\n2 <u>4</u> 6 <u>8</u>\n<u>2</u> 6\n6\n\n<strong>输出:</strong>\n6</pre>\n","partition-equal-subset-sum":"<p>给定一个<strong>只包含正整数</strong>的<strong>非空</strong>数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>每个数组中的元素不会超过 100</li>\n\t<li>数组的大小不会超过 200</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>输入: [1, 5, 11, 5]\n\n输出: true\n\n解释: 数组可以分割成 [1, 5, 5] 和 [11].\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre>输入: [1, 2, 3, 5]\n\n输出: false\n\n解释: 数组不能分割成两个元素和相等的子集.\n</pre>\n\n<p>&nbsp;</p>\n","guess-number-higher-or-lower":"<p>我们正在玩一个猜数字游戏。 游戏规则如下：<br>\n我从&nbsp;<strong>1</strong>&nbsp;到&nbsp;<em><strong>n</strong></em>&nbsp;选择一个数字。 你需要猜我选择了哪个数字。<br>\n每次你猜错了，我会告诉你这个数字是大了还是小了。<br>\n你调用一个预先定义好的接口&nbsp;<code>guess(int num)</code>，它会返回 3 个可能的结果（<code>-1</code>，<code>1</code>&nbsp;或 <code>0</code>）：</p>\n\n<pre>-1 : 我的数字比较小\n 1 : 我的数字比较大\n 0 : 恭喜！你猜对了！\n</pre>\n\n<p><strong>示例 :</strong></p>\n\n<pre><strong>输入: </strong>n = 10, pick = 6\n<strong>输出: </strong>6</pre>\n","utf-8-validation":"<p>UTF-8 中的一个字符可能的长度为 <strong>1 到 4 字节</strong>，遵循以下的规则：</p>\n\n<ol>\n\t<li>对于 1 字节的字符，字节的第一位设为0，后面7位为这个符号的unicode码。</li>\n\t<li>对于 n 字节的字符 (n &gt; 1)，第一个字节的前 n 位都设为1，第 n+1 位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。</li>\n</ol>\n\n<p>这是 UTF-8 编码的工作方式：</p>\n\n<pre>\n<code>   Char. number range  |        UTF-8 octet sequence\n      (hexadecimal)    |              (binary)\n   --------------------+---------------------------------------------\n   0000 0000-0000 007F | 0xxxxxxx\n   0000 0080-0000 07FF | 110xxxxx 10xxxxxx\n   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx\n   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n</code></pre>\n\n<p>给定一个表示数据的整数数组，返回它是否为有效的 utf-8 编码。</p>\n\n<p><strong>注意:</strong><br />\n输入是整数数组。只有每个整数的<strong>最低 8 个有效位</strong>用来存储数据。这意味着每个整数只表示 1 字节的数据。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\ndata = [197, 130, 1], 表示 8 位的序列: <strong>11000101 10000010 00000001</strong>.\n\n返回 <strong>true </strong>。\n这是有效的 utf-8 编码，为一个2字节字符，跟着一个1字节字符。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\ndata = [235, 140, 4], 表示 8 位的序列: <strong>11101011 10001100 00000100</strong>.\n\n返回<strong> false</strong> 。\n前 3 位都是 1 ，第 4 位为 0 表示它是一个3字节字符。\n下一个字节是开头为 10 的延续字节，这是正确的。\n但第二个延续字节不以 10 开头，所以是不符合规则的。\n</pre>\n","mini-parser":"<p>给定一个用字符串表示的整数的嵌套列表，实现一个解析它的语法分析器。</p>\n\n<p>列表中的每个元素只可能是整数或整数嵌套列表</p>\n\n<p><strong>提示：</strong>你可以假定这些字符串都是格式良好的：</p>\n\n<ul>\n\t<li>字符串非空</li>\n\t<li>字符串不包含空格</li>\n\t<li>字符串只包含数字<code>0-9</code>, <code>[</code>, <code>-</code> <code>,</code>, <code>]</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n给定 s = &quot;324&quot;,\n\n你应该返回一个 NestedInteger 对象，其中只包含整数值 324。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n给定 s = &quot;[123,[456,[789]]]&quot;,\n\n返回一个 NestedInteger 对象包含一个有两个元素的嵌套列表：\n\n1. 一个 integer 包含值 123\n2. 一个包含两个元素的嵌套列表：\n    i.  一个 integer 包含值 456\n    ii. 一个包含一个元素的嵌套列表\n         a. 一个 integer 包含值 789\n</pre>\n\n<p>&nbsp;</p>\n","longest-palindrome":"<p>给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。</p>\n\n<p>在构造过程中，请注意区分大小写。比如&nbsp;<code>&quot;Aa&quot;</code>&nbsp;不能当做一个回文字符串。</p>\n\n<p><strong>注意:</strong><br />\n假设字符串的长度不会超过 1010。</p>\n\n<p><strong>示例 1: </strong></p>\n\n<pre>\n输入:\n&quot;abccccdd&quot;\n\n输出:\n7\n\n解释:\n我们可以构造的最长的回文串是&quot;dccaccd&quot;, 它的长度是 7。\n</pre>\n","integer-replacement":"<p>给定一个正整数&nbsp;<em>n</em>，你可以做如下操作：</p>\n\n<p>1. 如果&nbsp;<em>n&nbsp;</em>是偶数，则用&nbsp;<code>n / 2</code>替换&nbsp;<em>n</em>。<br />\n2. 如果&nbsp;<em>n&nbsp;</em>是奇数，则可以用&nbsp;<code>n + 1</code>或<code>n - 1</code>替换&nbsp;<em>n</em>。<br />\n<em>n&nbsp;</em>变为 1 所需的最小替换次数是多少？</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong>\n8\n\n<strong>输出:</strong>\n3\n\n<strong>解释:</strong>\n8 -&gt; 4 -&gt; 2 -&gt; 1\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong>\n7\n\n<strong>输出:</strong>\n4\n\n<strong>解释:</strong>\n7 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1\n或\n7 -&gt; 6 -&gt; 3 -&gt; 2 -&gt; 1\n</pre>\n","decode-string":"<p>给定一个经过编码的字符串，返回它解码后的字符串。</p>\n\n<p>编码规则为: <code>k[encoded_string]</code>，表示其中方括号内部的 <em>encoded_string</em> 正好重复 <em>k</em> 次。注意 <em>k</em> 保证为正整数。</p>\n\n<p>你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。</p>\n\n<p>此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 <em>k</em> ，例如不会出现像&nbsp;<code>3a</code>&nbsp;或&nbsp;<code>2[4]</code>&nbsp;的输入。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\ns = &quot;3[a]2[bc]&quot;, 返回 &quot;aaabcbc&quot;.\ns = &quot;3[a2[c]]&quot;, 返回 &quot;accaccacc&quot;.\ns = &quot;2[abc]3[cd]ef&quot;, 返回 &quot;abcabccdcdcdef&quot;.\n</pre>\n","rotate-function":"<p>给定一个长度为 <em>n</em> 的整数数组&nbsp;<code>A</code>&nbsp;。</p>\n\n<p>假设&nbsp;<code>B<sub>k</sub></code>&nbsp;是数组&nbsp;<code>A</code>&nbsp;顺时针旋转 <em>k</em> 个位置后的数组，我们定义&nbsp;<code>A</code>&nbsp;的&ldquo;旋转函数&rdquo;&nbsp;<code>F</code>&nbsp;为：</p>\n\n<p><code>F(k) = 0 * B<sub>k</sub>[0] + 1 * B<sub>k</sub>[1] + ... + (n-1) * B<sub>k</sub>[n-1]</code>。</p>\n\n<p>计算<code>F(0), F(1), ..., F(n-1)</code>中的最大值。</p>\n\n<p><strong>注意:</strong><br />\n可以认为<em> n</em> 的值小于 10<sup>5</sup>。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\nA = [4, 3, 2, 6]\n\nF(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25\nF(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16\nF(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23\nF(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26\n\n所以 F(0), F(1), F(2), F(3) 中的最大值是 F(3) = 26 。\n</pre>\n","frog-jump":"<p>一只青蛙想要过河。 假定河流被等分为&nbsp;x<em>&nbsp;</em>个单元格，并且在每一个单元格内都有可能放有一石子（也有可能没有）。 青蛙可以跳上石头，但是不可以跳入水中。</p>\n\n<p>给定石子的位置列表（用单元格序号升序表示），&nbsp;<strong>请判定青蛙能否成功过河</strong>（即能否在最后一步跳至最后一个石子上）。&nbsp;开始时，&nbsp;青蛙默认已站在第一个石子上，并可以假定它第一步只能跳跃一个单位（即只能从单元格1跳至单元格2）。</p>\n\n<p>如果青蛙上一步跳跃了&nbsp;<em>k&nbsp;</em>个单位，那么它接下来的跳跃距离只能选择为&nbsp;<em>k - 1</em>、<em>k&nbsp;</em>或&nbsp;<em>k + 1</em>个单位。&nbsp;另请注意，青蛙只能向前方（终点的方向）跳跃。</p>\n\n<p><strong>请注意：</strong></p>\n\n<ul>\n\t<li>石子的数量 &ge; 2 且&nbsp;&lt; 1100；</li>\n\t<li>每一个石子的位置序号都是一个非负整数，且其 &lt; 2<sup>31</sup>；</li>\n\t<li>第一个石子的位置永远是0。</li>\n</ul>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>\n<strong>[0,1,3,5,6,8,12,17]</strong>\n\n总共有8个石子。\n第一个石子处于序号为0的单元格的位置, 第二个石子处于序号为1的单元格的位置,\n第三个石子在序号为3的单元格的位置， 以此定义整个数组...\n最后一个石子处于序号为17的单元格的位置。\n\n返回 <strong>true</strong>。即青蛙可以成功过河，按照如下方案跳跃： \n跳1个单位到第2块石子, 然后跳2个单位到第3块石子, 接着 \n跳2个单位到第4块石子, 然后跳3个单位到第6块石子, \n跳4个单位到第7块石子, 最后，跳5个单位到第8个石子（即最后一块石子）。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>[0,1,2,3,4,8,9,11]</strong>\n\n返回 <strong>false。</strong>青蛙没有办法过河。 \n这是因为第5和第6个石子之间的间距太大，没有可选的方案供青蛙跳跃过去。\n</pre>\n","binary-watch":"<p>二进制手表顶部有 4 个 LED 代表<strong>小时（0-11）</strong>，底部的 6 个 LED 代表<strong>分钟（0-59）</strong>。</p>\n\n<p>每个 LED 代表一个 0 或 1，最低位在右侧。</p>\n\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/8/8b/Binary_clock_samui_moon.jpg\" style=\"height:300px\" /></p>\n\n<p>例如，上面的二进制手表读取 &ldquo;3:25&rdquo;。</p>\n\n<p>给定一个非负整数 <em>n&nbsp;</em>代表当前 LED 亮着的数量，返回所有可能的时间。</p>\n\n<p><strong>案例:</strong></p>\n\n<pre>\n输入: n = 1\n返回: [&quot;1:00&quot;, &quot;2:00&quot;, &quot;4:00&quot;, &quot;8:00&quot;, &quot;0:01&quot;, &quot;0:02&quot;, &quot;0:04&quot;, &quot;0:08&quot;, &quot;0:16&quot;, &quot;0:32&quot;]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意事项:</strong></p>\n\n<ul>\n\t<li>输出的顺序没有要求。</li>\n\t<li>小时不会以零开头，比如 &ldquo;01:00&rdquo;&nbsp;是不允许的，应为 &ldquo;1:00&rdquo;。</li>\n\t<li>分钟必须由两位数组成，可能会以零开头，比如 &ldquo;10:2&rdquo;&nbsp;是无效的，应为 &ldquo;10:02&rdquo;。</li>\n</ul>\n","is-subsequence":"<p>给定字符串 <strong>s</strong> 和 <strong>t</strong> ，判断 <strong>s</strong> 是否为 <strong>t</strong> 的子序列。</p>\n\n<p>你可以认为 <strong>s</strong> 和 <strong>t</strong> 中仅包含英文小写字母。字符串 <strong>t</strong> 可能会很长（长度 ~= 500,000），而 <strong>s</strong> 是个短字符串（长度 &lt;=100）。</p>\n\n<p>字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，<code>&quot;ace&quot;</code>是<code>&quot;abcde&quot;</code>的一个子序列，而<code>&quot;aec&quot;</code>不是）。</p>\n\n<p><strong>示例&nbsp;1:</strong><br />\n<strong>s</strong> = <code>&quot;abc&quot;</code>, <strong>t</strong> = <code>&quot;ahbgdc&quot;</code></p>\n\n<p>返回&nbsp;<code>true</code>.</p>\n\n<p><strong>示例&nbsp;2:</strong><br />\n<strong>s</strong> = <code>&quot;axc&quot;</code>, <strong>t</strong> = <code>&quot;ahbgdc&quot;</code></p>\n\n<p>返回&nbsp;<code>false</code>.</p>\n\n<p><strong>后续挑战</strong> <strong>:</strong></p>\n\n<p>如果有大量输入的 S，称作S1, S2, ... , Sk 其中 k &gt;= 10亿，你需要依次检查它们是否为 T 的子序列。在这种情况下，你会怎样改变代码？</p>\n\n<p><strong>致谢:</strong></p>\n\n<p>特别感谢<strong> </strong><a href=\"https://leetcode.com/pbrother/\">@pbrother&nbsp;</a>添加此问题并且创建所有测试用例。</p>\n","queue-reconstruction-by-height":"<p>假设有打乱顺序的一群人站成一个队列。 每个人由一个整数对<code>(h, k)</code>表示，其中<code>h</code>是这个人的身高，<code>k</code>是排在这个人前面且身高大于或等于<code>h</code>的人数。 编写一个算法来重建这个队列。</p>\n\n<p><strong>注意：</strong><br />\n总人数少于1100人。</p>\n\n<p><strong>示例</strong></p>\n\n<pre>\n输入:\n[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]\n\n输出:\n[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]\n</pre>\n","wiggle-subsequence":"<p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为<strong>摆动序列。</strong>第一个差（如果存在的话）可能是正数或负数。少于两个元素的序列也是摆动序列。</p>\n\n<p>例如，&nbsp;<code>[1,7,4,9,2,5]</code> 是一个摆动序列，因为差值 <code>(6,-3,5,-7,3)</code>&nbsp;是正负交替出现的。相反, <code>[1,4,7,2,5]</code>&nbsp;和&nbsp;<code>[1,7,4,5,5]</code> 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。</p>\n\n<p>给定一个整数序列，返回作为摆动序列的最长子序列的长度。 通过从原始序列中删除一些（也可以不删除）元素来获得子序列，剩下的元素保持其原始顺序。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong>[1,7,4,9,2,5]\n<strong>输出: </strong>6 \n<strong>解释: </strong>整个序列均为摆动序列。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>[1,17,5,10,13,15,10,5,16,8]\n<strong>输出: </strong>7\n<strong>解释: </strong>这个序列包含几个长度为 7 摆动序列，其中一个可为[1,17,10,13,10,16,8]。</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入: </strong>[1,2,3,4,5,6,7,8,9]\n<strong>输出: </strong>2</pre>\n\n<p><strong>进阶:</strong><br>\n你能否用&nbsp;O(<em>n</em>) 时间复杂度完成此题?</p>\n","trapping-rain-water-ii":"<p>给定一个 <code>m x n</code>&nbsp;的矩阵，其中的值均为正整数，代表二维高度图每个单元的高度，请计算图中形状最多能接多少体积的雨水。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>说明:</strong></p>\r\n\r\n<p><em>m&nbsp;</em>和 <em>n&nbsp;</em>都是小于110的整数。每一个单位的高度都大于0 且小于 20000。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>示例：</strong></p>\r\n\r\n<pre>给出如下 3x6 的高度图:\r\n[\r\n  [1,4,3,1,3,2],\r\n  [3,2,1,3,2,4],\r\n  [2,3,3,2,3,1]\r\n]\r\n\r\n返回 4。\r\n</pre>\r\n\r\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/rainwater_empty.png\" style=\"width: 100%; max-width: 500px;\"></p>\r\n\r\n<p>如上图所示，这是下雨前的高度图<code>[[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]</code> 的状态。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/rainwater_fill.png\" style=\"width: 100%; max-width: 500px;\"></p>\r\n\r\n<p>下雨后，雨水将会被存储在这些方块中。总的接雨水量是4。</p>","non-overlapping-intervals":"<p>给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>可以认为区间的终点总是大于它的起点。</li>\n\t<li>区间 [1,2] 和 [2,3] 的边界相互&ldquo;接触&rdquo;，但没有相互重叠。</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [ [1,2], [2,3], [3,4], [1,3] ]\n\n<strong>输出:</strong> 1\n\n<strong>解释:</strong> 移除 [1,3] 后，剩下的区间没有重叠。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> [ [1,2], [1,2], [1,2] ]\n\n<strong>输出:</strong> 2\n\n<strong>解释:</strong> 你需要移除两个 [1,2] 来使剩下的区间没有重叠。\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong> [ [1,2], [2,3] ]\n\n<strong>输出:</strong> 0\n\n<strong>解释:</strong> 你不需要移除任何区间，因为它们已经是无重叠的了。\n</pre>\n","guess-number-higher-or-lower-ii":"<p>我们正在玩一个猜数游戏，游戏规则如下：</p>\n\n<p>我从&nbsp;<strong>1&nbsp;</strong>到 <strong>n</strong> 之间选择一个数字，你来猜我选了哪个数字。</p>\n\n<p>每次你猜错了，我都会告诉你，我选的数字比你的大了或者小了。</p>\n\n<p>然而，当你猜了数字 x 并且猜错了的时候，你需要支付金额为 x 的现金。直到你猜到我选的数字，你才算赢得了这个游戏。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>n = 10, 我选择了8.\n\n第一轮: 你猜我选择的数字是5，我会告诉你，我的数字更大一些，然后你需要支付5块。\n第二轮: 你猜是7，我告诉你，我的数字更大一些，你支付7块。\n第三轮: 你猜是9，我告诉你，我的数字更小一些，你支付9块。\n\n游戏结束。8 就是我选的数字。\n\n你最终要支付 5 + 7 + 9 = 21 块钱。\n</pre>\n\n<p>给定&nbsp;<strong>n &ge; 1，</strong>计算你至少需要拥有多少现金才能确保你能赢得这个游戏。</p>\n","fizz-buzz":"<p>写一个程序，输出从 1 到 <em>n</em> 数字的字符串表示。</p>\n\n<p>1. 如果&nbsp;<em>n&nbsp;</em>是3的倍数，输出&ldquo;Fizz&rdquo;；</p>\n\n<p>2. 如果&nbsp;<em>n&nbsp;</em>是5的倍数，输出&ldquo;Buzz&rdquo;；</p>\n\n<p>3.如果&nbsp;<em>n&nbsp;</em>同时是3和5的倍数，输出 &ldquo;FizzBuzz&rdquo;。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>n = 15,\n\n返回:\n[\n    &quot;1&quot;,\n    &quot;2&quot;,\n    &quot;Fizz&quot;,\n    &quot;4&quot;,\n    &quot;Buzz&quot;,\n    &quot;Fizz&quot;,\n    &quot;7&quot;,\n    &quot;8&quot;,\n    &quot;Fizz&quot;,\n    &quot;Buzz&quot;,\n    &quot;11&quot;,\n    &quot;Fizz&quot;,\n    &quot;13&quot;,\n    &quot;14&quot;,\n    &quot;FizzBuzz&quot;\n]\n</pre>\n","insert-delete-getrandom-o1-duplicates-allowed":"<p>设计一个支持在<em>平均&nbsp;</em>时间复杂度&nbsp;<strong>O(1)&nbsp;</strong>下<strong>，&nbsp;</strong>执行以下操作的数据结构。</p>\n\n<p><strong>注意: 允许出现重复元素。</strong></p>\n\n<ol>\n\t<li><code>insert(val)</code>：向集合中插入元素 val。</li>\n\t<li><code>remove(val)</code>：当 val 存在时，从集合中移除一个 val。</li>\n\t<li><code>getRandom</code>：从现有集合中随机获取一个元素。每个元素被返回的概率应该与其在集合中的数量呈线性相关。</li>\n</ol>\n\n<p><strong>示例:</strong></p>\n\n<pre>// 初始化一个空的集合。\nRandomizedCollection collection = new RandomizedCollection();\n\n// 向集合中插入 1 。返回 true 表示集合不包含 1 。\ncollection.insert(1);\n\n// 向集合中插入另一个 1 。返回 false 表示集合包含 1 。集合现在包含 [1,1] 。\ncollection.insert(1);\n\n// 向集合中插入 2 ，返回 true 。集合现在包含 [1,1,2] 。\ncollection.insert(2);\n\n// getRandom 应当有 2/3 的概率返回 1 ，1/3 的概率返回 2 。\ncollection.getRandom();\n\n// 从集合中删除 1 ，返回 true 。集合现在包含 [1,2] 。\ncollection.remove(1);\n\n// getRandom 应有相同概率返回 1 和 2 。\ncollection.getRandom();\n</pre>\n","find-k-pairs-with-smallest-sums":"<p>给定两个以升序排列的整形数组 <strong>nums1</strong> 和 <strong>nums2</strong>, 以及一个整数 <strong>k</strong>。</p>\n\n<p>定义一对值&nbsp;<strong>(u,v)</strong>，其中第一个元素来自&nbsp;<strong>nums1</strong>，第二个元素来自 <strong>nums2</strong>。</p>\n\n<p>找到和最小的 k 对数字&nbsp;<strong>(u<sub>1</sub>,v<sub>1</sub>), (u<sub>2</sub>,v<sub>2</sub>) ... (u<sub>k</sub>,v<sub>k</sub>)</strong>。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> nums1 = [1,7,11], nums2 = [2,4,6], k = 3\n<strong>输出:</strong> [1,2],[1,4],[1,6]\n<strong>解释: </strong>返回序列中的前 3 对数：\n     [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>nums1 = [1,1,2], nums2 = [1,2,3], k = 2\n<strong>输出: </strong>[1,1],[1,1]\n<strong>解释: </strong>返回序列中的前 2 对数：\n&nbsp;    [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入: </strong>nums1 = [1,2], nums2 = [3], k = 3 \n<strong>输出:</strong> [1,3],[2,3]\n<strong>解释: </strong>也可能序列中所有的数对都被返回:[1,3],[2,3]\n</pre>\n","kth-smallest-element-in-a-sorted-matrix":"<p>给定一个&nbsp;<em>n x n&nbsp;</em>矩阵，其中每行和每列元素均按升序排序，找到矩阵中第k小的元素。<br />\n请注意，它是排序后的第k小元素，而不是第k个元素。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\nmatrix = [\n   [ 1,  5,  9],\n   [10, 11, 13],\n   [12, 13, 15]\n],\nk = 8,\n\n返回 13。\n</pre>\n\n<p><strong>说明: </strong><br />\n你可以假设 k 的值永远是有效的, 1 &le; k &le; n<sup>2&nbsp;</sup>。</p>\n","shuffle-an-array":"<p>打乱一个没有重复元素的数组。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\n// 以数字集合 1, 2 和 3 初始化数组。\nint[] nums = {1,2,3};\nSolution solution = new Solution(nums);\n\n// 打乱数组 [1,2,3] 并返回结果。任何 [1,2,3]的排列返回的概率应该相同。\nsolution.shuffle();\n\n// 重设数组到它的初始状态[1,2,3]。\nsolution.reset();\n\n// 随机返回数组[1,2,3]打乱后的结果。\nsolution.shuffle();\n</pre>\n","sum-of-left-leaves":"<p>计算给定二叉树的所有左叶子之和。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\n在这个二叉树中，有两个左叶子，分别是 9 和 15，所以返回 24</pre>\n\n<p>&nbsp;</p>\n","valid-word-square":null,"poor-pigs":"<p>有1000只水桶，其中有且只有一桶装的含有毒药，其余装的都是水。它们从外观看起来都一样。如果小猪喝了毒药，它会在15分钟内死去。</p>\n\n<p>问题来了，如果需要你在一小时内，弄清楚哪只水桶含有毒药，你最少需要多少只猪？</p>\n\n<p>回答这个问题，并为下列的进阶问题编写一个通用算法。</p>\n\n<p><strong>进阶: </strong></p>\n\n<p>假设有 n 只水桶，猪饮水中毒后会在 m 分钟内死亡，你需要多少猪（x）就能在 p 分钟内找出&ldquo;有毒&rdquo;水桶？n只水桶里有且仅有一只有毒的桶。</p>\n","water-and-jug-problem":"<p>有两个容量分别为&nbsp;<em>x</em>升 和<em> y</em>升 的水壶以及无限多的水。请判断能否通过使用这两个水壶，从而可以得到恰好&nbsp;<em>z</em>升 的水？</p>\n\n<p>如果可以，最后请用以上水壶中的一或两个来盛放取得的&nbsp;<em>z升&nbsp;</em>水。</p>\n\n<p>你允许：</p>\n\n<ul>\n\t<li>装满任意一个水壶</li>\n\t<li>清空任意一个水壶</li>\n\t<li>从一个水壶向另外一个水壶倒水，直到装满或者倒空</li>\n</ul>\n\n<p><strong>示例 1:</strong> (From the famous <a href=\"https://www.youtube.com/watch?v=BVtQNK_ZUJg\"><em>&quot;Die Hard&quot;</em> example</a>)</p>\n\n<pre>输入: x = 3, y = 5, z = 4\n输出: True\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>输入: x = 2, y = 6, z = 5\n输出: False\n</pre>\n","combination-sum-iv":"<p>给定一个由正整数组成且不存在重复数字的数组，找出和为给定目标正整数的组合的个数。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\n<em><strong>nums</strong></em> = [1, 2, 3]\n<em><strong>target</strong></em> = 4\n\n所有可能的组合为：\n(1, 1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 3)\n(2, 1, 1)\n(2, 2)\n(3, 1)\n\n请注意，顺序不同的序列被视作不同的组合。\n\n因此输出为 <strong>7</strong>。\n</pre>\n\n<p><strong>进阶：</strong><br />\n如果给定的数组中含有负数会怎么样？<br />\n问题会产生什么变化？<br />\n我们需要在题目中添加什么限制来允许负数的出现？</p>\n\n<p><strong>致谢：</strong><br />\n特别感谢&nbsp;<a href=\"https://leetcode.com/pbrother/\">@pbrother</a>&nbsp;添加此问题并创建所有测试用例。</p>\n","longest-substring-with-at-least-k-repeating-characters":"<p>找到给定字符串（由小写字符组成）中的最长子串 <strong><em>T</em></strong> ，&nbsp;要求&nbsp;<strong><em>T</em></strong>&nbsp;中的每一字符出现次数都不少于 <em>k</em> 。输出 <strong><em>T&nbsp;</em></strong>的长度。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n输入:\ns = &quot;aaabb&quot;, k = 3\n\n输出:\n3\n\n最长子串为 &quot;aaa&quot; ，其中 &#39;a&#39; 重复了 3 次。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n输入:\ns = &quot;ababbc&quot;, k = 2\n\n输出:\n5\n\n最长子串为 &quot;ababb&quot; ，其中 &#39;a&#39; 重复了 2 次， &#39;b&#39; 重复了 3 次。\n</pre>\n","find-the-difference":"<p>给定两个字符串 <em><strong>s</strong></em> 和 <em><strong>t</strong></em>，它们只包含小写字母。</p>\n\n<p>字符串&nbsp;<strong><em>t</em></strong>&nbsp;由字符串&nbsp;<strong><em>s</em></strong>&nbsp;随机重排，然后在随机位置添加一个字母。</p>\n\n<p>请找出在 <em><strong>t</strong></em> 中被添加的字母。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>输入：\ns = &quot;abcd&quot;\nt = &quot;abcde&quot;\n\n输出：\ne\n\n解释：\n&#39;e&#39; 是那个被添加的字母。\n</pre>\n","insert-delete-getrandom-o1":"<p>设计一个支持在<em>平均&nbsp;</em>时间复杂度 <strong>O(1)</strong>&nbsp;下，执行以下操作的数据结构。</p>\n\n<ol>\n\t<li><code>insert(val)</code>：当元素 val 不存在时，向集合中插入该项。</li>\n\t<li><code>remove(val)</code>：元素 val 存在时，从集合中移除该项。</li>\n\t<li><code>getRandom</code>：随机返回现有集合中的一项。每个元素应该有<strong>相同的概率</strong>被返回。</li>\n</ol>\n\n<p><strong>示例 :</strong></p>\n\n<pre>\n// 初始化一个空的集合。\nRandomizedSet randomSet = new RandomizedSet();\n\n// 向集合中插入 1 。返回 true 表示 1 被成功地插入。\nrandomSet.insert(1);\n\n// 返回 false ，表示集合中不存在 2 。\nrandomSet.remove(2);\n\n// 向集合中插入 2 。返回 true 。集合现在包含 [1,2] 。\nrandomSet.insert(2);\n\n// getRandom 应随机返回 1 或 2 。\nrandomSet.getRandom();\n\n// 从集合中移除 1 ，返回 true 。集合现在包含 [2] 。\nrandomSet.remove(1);\n\n// 2 已在集合中，所以返回 false 。\nrandomSet.insert(2);\n\n// 由于 2 是集合中唯一的数字，getRandom 总是返回 2 。\nrandomSet.getRandom();\n</pre>\n","sum-of-two-integers":"<p><strong>不使用</strong>运算符&nbsp;<code>+</code> 和&nbsp;<code>-</code>&nbsp;​​​​​​​，计算两整数&nbsp;​​​​​​​<code>a</code>&nbsp;、<code>b</code>&nbsp;​​​​​​​之和。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong>a = 1, b = 2\n<strong>输出: </strong>3\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>a = -2, b = 3\n<strong>输出: </strong>1</pre>\n","remove-k-digits":"<p>给定一个以字符串表示的非负整数&nbsp;<em>num</em>，移除这个数中的 <em>k </em>位数字，使得剩下的数字最小。</p>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><em>num</em> 的长度小于 10002 且&nbsp;&ge; <em>k。</em></li>\n\t<li><em>num</em> 不会包含任何前导零。</li>\n</ul>\n\n<p><strong>示例 1 :</strong></p>\n\n<pre>\n输入: num = &quot;1432219&quot;, k = 3\n输出: &quot;1219&quot;\n解释: 移除掉三个数字 4, 3, 和 2 形成一个新的最小的数字 1219。\n</pre>\n\n<p><strong>示例 2 :</strong></p>\n\n<pre>\n输入: num = &quot;10200&quot;, k = 1\n输出: &quot;200&quot;\n解释: 移掉首位的 1 剩下的数字为 200. 注意输出不能有任何前导零。\n</pre>\n\n<p>示例<strong> 3 :</strong></p>\n\n<pre>\n输入: num = &quot;10&quot;, k = 2\n输出: &quot;0&quot;\n解释: 从原数字移除所有的数字，剩余为空就是0。\n</pre>\n","nth-digit":"<p>在无限的整数序列&nbsp;1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...中找到第&nbsp;<em>n&nbsp;</em>个数字。</p>\n\n<p><strong>注意:</strong><br />\n<em>n&nbsp;</em>是正数且在32为整形范围内&nbsp;(&nbsp;<em>n</em> &lt; 2<sup>31</sup>)。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong>\n3\n\n<strong>输出:</strong>\n3\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong>\n11\n\n<strong>输出:</strong>\n0\n\n<strong>说明:</strong>\n第11个数字在序列 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... 里是<strong>0</strong>，它是10的一部分。\n</pre>\n","ransom-note":"<p>给定一个赎金信 (ransom) 字符串和一个杂志(magazine)字符串，判断第一个字符串ransom能不能由第二个字符串magazines里面的字符构成。如果可以构成，返回 true ；否则返回 false。</p>\n\n<p>(题目说明：为了不暴露赎金信字迹，要从杂志上搜索各个需要的字母，组成单词来表达意思。)</p>\n\n<p><strong>注意：</strong></p>\n\n<p>你可以假设两个字符串均只含有小写字母。</p>\n\n<pre>\ncanConstruct(&quot;a&quot;, &quot;b&quot;) -&gt; false\ncanConstruct(&quot;aa&quot;, &quot;ab&quot;) -&gt; false\ncanConstruct(&quot;aa&quot;, &quot;aab&quot;) -&gt; true\n</pre>\n","nested-list-weight-sum-ii":null,"convert-a-number-to-hexadecimal":"<p>给定一个整数，编写一个算法将这个数转换为十六进制数。对于负整数，我们通常使用&nbsp;<a href=\"https://baike.baidu.com/item/%E8%A1%A5%E7%A0%81/6854613?fr=aladdin\">补码运算</a>&nbsp;方法。</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>十六进制中所有字母(<code>a-f</code>)都必须是小写。</li>\n\t<li>十六进制字符串中不能包含多余的前导零。如果要转化的数为0，那么以单个字符<code>&#39;0&#39;</code>来表示；对于其他情况，十六进制字符串中的第一个字符将不会是0字符。&nbsp;</li>\n\t<li>给定的数确保在32位有符号整数范围内。</li>\n\t<li><strong>不能使用任何由库提供的将数字直接转换或格式化为十六进制的方法。</strong></li>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n输入:\n26\n\n输出:\n&quot;1a&quot;\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n输入:\n-1\n\n输出:\n&quot;ffffffff&quot;\n</pre>\n","perfect-rectangle":"<p>我们有 N 个与坐标轴对齐的矩形, 其中 N &gt; 0, 判断它们是否能精确地覆盖一个矩形区域。</p>\n\n<p>每个矩形用左下角的点和右上角的点的坐标来表示。例如，&nbsp;一个单位正方形可以表示为 [1,1,2,2]。&nbsp;( 左下角的点的坐标为 (1, 1) 以及右上角的点的坐标为 (2, 2) )。</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rectangle_perfect.gif\"></p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>rectangles = [\n  [1,1,3,3],\n  [3,1,4,2],\n  [3,2,4,4],\n  [1,3,2,4],\n  [2,3,3,4]\n]\n\n返回 true。5个矩形一起可以精确地覆盖一个矩形区域。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rectangle_separated.gif\"></p>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre>rectangles = [\n  [1,1,2,3],\n  [1,3,2,4],\n  [3,1,4,2],\n  [3,2,4,4]\n]\n\n返回 false。两个矩形之间有间隔，无法覆盖成一个矩形。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rectangle_hole.gif\"></p>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>rectangles = [\n  [1,1,3,3],\n  [3,1,4,2],\n  [1,3,2,4],\n  [3,2,4,4]\n]\n\n返回 false。图形顶端留有间隔，无法覆盖成一个矩形。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rectangle_intersect.gif\"></p>\n\n<p><strong>示例 4:</strong></p>\n\n<pre>rectangles = [\n  [1,1,3,3],\n  [3,1,4,2],\n  [1,3,2,4],\n  [2,2,4,4]\n]\n\n返回 false。因为中间有相交区域，虽然形成了矩形，但不是精确覆盖。\n</pre>\n","design-phone-directory":null,"range-addition":null,"valid-perfect-square":"<p>给定一个正整数 <em>num</em>，编写一个函数，如果 <em>num</em> 是一个完全平方数，则返回 True，否则返回 False。</p>\n\n<p><strong>说明：</strong>不要使用任何内置的库函数，如&nbsp; <code>sqrt</code>。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>16\n<strong>输出：</strong>True</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>14\n<strong>输出：</strong>False\n</pre>\n","find-leaves-of-binary-tree":null,"minimum-unique-word-abbreviation":null,"plus-one-linked-list":null,"first-unique-character-in-a-string":"<p>给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。</p>\n\n<p><strong>案例:</strong></p>\n\n<pre>\ns = &quot;leetcode&quot;\n返回 0.\n\ns = &quot;loveleetcode&quot;,\n返回 2.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意事项：</strong>您可以假定该字符串只包含小写字母。</p>\n","lexicographical-numbers":"<p>给定一个整数&nbsp;<em>n</em>, 返回从&nbsp;<em>1&nbsp;</em>到&nbsp;<em>n&nbsp;</em>的字典顺序。</p>\n\n<p>例如，</p>\n\n<p>给定 <em>n</em> =1 3，返回 [1,10,11,12,13,2,3,4,5,6,7,8,9] 。</p>\n\n<p>请尽可能的优化算法的时间复杂度和空间复杂度。 输入的数据&nbsp;<em>n&nbsp;</em>小于等于&nbsp;5,000,000。</p>\n","longest-absolute-file-path":"<p>假设我们以下述方式将我们的文件系统抽象成一个字符串:</p>\n\n<p>字符串&nbsp;<code>&quot;dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext&quot;</code> 表示:</p>\n\n<pre>\ndir\n    subdir1\n    subdir2\n        file.ext\n</pre>\n\n<p>目录&nbsp;<code>dir</code> 包含一个空的子目录&nbsp;<code>subdir1</code> 和一个包含一个文件&nbsp;<code>file.ext</code>&nbsp;的子目录&nbsp;<code>subdir2</code> 。</p>\n\n<p>字符串&nbsp;<code>&quot;dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext&quot;</code> 表示:</p>\n\n<pre>\ndir\n    subdir1\n        file1.ext\n        subsubdir1\n    subdir2\n        subsubdir2\n            file2.ext\n</pre>\n\n<p>目录&nbsp;<code>dir</code> 包含两个子目录 <code>subdir1</code> 和&nbsp;<code>subdir2</code>。&nbsp;<code>subdir1</code> 包含一个文件&nbsp;<code>file1.ext</code> 和一个空的二级子目录 <code>subsubdir1</code>。<code>subdir2</code> 包含一个二级子目录&nbsp;<code>subsubdir2</code> ，其中包含一个文件&nbsp;<code>file2.ext</code>。</p>\n\n<p>我们致力于寻找我们文件系统中文件的最长 (按字符的数量统计) 绝对路径。例如，在上述的第二个例子中，最长路径为&nbsp;<code>&quot;dir/subdir2/subsubdir2/file2.ext&quot;</code>，其长度为&nbsp;<code>32</code> (不包含双引号)。</p>\n\n<p>给定一个以上述格式表示文件系统的字符串，返回文件系统中文件的最长绝对路径的长度。 如果系统中没有文件，返回&nbsp;<code>0</code>。</p>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>文件名至少存在一个&nbsp;<code>.</code> 和一个扩展名。</li>\n\t<li>目录或者子目录的名字不能包含&nbsp;<code>.</code>。</li>\n</ul>\n\n<p>要求时间复杂度为&nbsp;<code>O(n)</code>&nbsp;，其中&nbsp;<code>n</code> 是输入字符串的大小。</p>\n\n<p>请注意，如果存在路径&nbsp;<code>aaaaaaaaaaaaaaaaaaaaa/sth.png</code>&nbsp;的话，那么&nbsp;&nbsp;<code>a/aa/aaa/file1.txt</code>&nbsp;就不是一个最长的路径。</p>\n","largest-divisible-subset":"<p>给出一个由<strong>无重复的</strong>正整数组成的集合，找出其中最大的整除子集，子集中任意一对 (S<sub>i，</sub>S<sub>j</sub>) 都要满足：S<sub>i</sub> % S<sub>j</sub> = 0 或 S<sub>j</sub> % S<sub>i</sub> = 0。</p>\n\n<p>如果有多个目标子集，返回其中任何一个均可。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [1,2,3]\n<strong>输出:</strong> [1,2] (当然, [1,3] 也正确)\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [1,2,4,8]\n<strong>输出:</strong> [1,2,4,8]\n</pre>\n","random-pick-index":"<p>给定一个可能含有重复元素的整数数组，要求随机输出给定的数字的索引。 您可以假设给定的数字一定存在于数组中。</p>\n\n<p><strong>注意：</strong><br />\n数组大小可能非常大。 使用太多额外空间的解决方案将不会通过测试。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\nint[] nums = new int[] {1,2,3,3,3};\nSolution solution = new Solution(nums);\n\n// pick(3) 应该返回索引 2,3 或者 4。每个索引的返回概率应该相等。\nsolution.pick(3);\n\n// pick(1) 应该返回 0。因为只有nums[0]等于1。\nsolution.pick(1);\n</pre>\n","valid-word-abbreviation":null,"linked-list-random-node":"<p>给定一个单链表，随机选择链表的一个节点，并返回相应的节点值。保证每个节点<strong>被选的概率一样</strong>。</p>\n\n<p><strong>进阶:</strong><br />\n如果链表十分大且长度未知，如何解决这个问题？你能否使用常数级空间复杂度实现？</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\n// 初始化一个单链表 [1,2,3].\nListNode head = new ListNode(1);\nhead.next = new ListNode(2);\nhead.next.next = new ListNode(3);\nSolution solution = new Solution(head);\n\n// getRandom()方法应随机返回1,2,3中的一个，保证每个元素被返回的概率相等。\nsolution.getRandom();\n</pre>\n","max-sum-of-rectangle-no-larger-than-k":"<p>给定一个非空二维矩阵&nbsp;<em>matrix&nbsp;</em>和一个整数<em> k</em>，找到这个矩阵内部不大于 <em>k</em> 的最大矩形和。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入: </strong>matrix = [[1,0,1],[0,-2,3]], k = 2\n<strong>输出: </strong>2 \n<strong>解释:</strong>&nbsp;矩形区域&nbsp;<code>[[0, 1], [-2, 3]]</code>&nbsp;的数值和是 2，且 2 是不超过 k 的最大数字（k = 2）。\n</pre>\n\n<p><strong>说明：</strong></p>\n\n<ol>\n\t<li>矩阵内的矩形区域面积必须大于 0。</li>\n\t<li>如果行数远大于列数，你将如何解答呢？</li>\n</ol>\n","super-pow":"<p>你的任务是计算&nbsp;<em>a</em><sup><em>b</em></sup>&nbsp;对&nbsp;1337 取模，<em>a</em> 是一个正整数，<em>b</em> 是一个非常大的正整数且会以数组形式给出。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong>a = 2, b = [3]\n<strong>输出: </strong>8\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入: </strong>a = 2, b = [1,0]\n<strong>输出: </strong>1024</pre>\n","split-array-largest-sum":"<p>给定一个非负整数数组和一个整数&nbsp;<em>m</em>，你需要将这个数组分成&nbsp;<em>m&nbsp;</em>个非空的连续子数组。设计一个算法使得这&nbsp;<em>m&nbsp;</em>个子数组各自和的最大值最小。</p>\n\n<p><strong>注意:</strong><br />\n数组长度&nbsp;<em>n&nbsp;</em>满足以下条件:</p>\n\n<ul>\n\t<li>1 &le; <em>n</em> &le; 1000</li>\n\t<li>1 &le; <em>m</em> &le; min(50, <em>n</em>)</li>\n</ul>\n\n<p><strong>示例: </strong></p>\n\n<pre>\n输入:\n<strong>nums</strong> = [7,2,5,10,8]\n<strong>m</strong> = 2\n\n输出:\n18\n\n解释:\n一共有四种方法将<strong>nums</strong>分割为2个子数组。\n其中最好的方式是将其分为<strong>[7,2,5]</strong> 和 <strong>[10,8]</strong>，\n因为此时这两个子数组各自的和的最大值为18，在所有情况中最小。\n</pre>\n","design-hit-counter":null,"create-maximum-number":"<p>给定长度分别为&nbsp;<code>m</code>&nbsp;和&nbsp;<code>n</code>&nbsp;的两个数组，其元素由&nbsp;<code>0-9</code>&nbsp;构成，表示两个自然数各位上的数字。现在从这两个数组中选出 <code>k (k &lt;= m + n)</code>&nbsp;个数字拼接成一个新的数，要求从同一个数组中取出的数字保持其在原数组中的相对顺序。</p>\n\n<p>求满足该条件的最大数。结果返回一个表示该最大数的长度为&nbsp;<code>k</code>&nbsp;的数组。</p>\n\n<p><strong>说明: </strong>请尽可能地优化你算法的时间和空间复杂度。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong>\nnums1 = <code>[3, 4, 6, 5]</code>\nnums2 = <code>[9, 1, 2, 5, 8, 3]</code>\nk = <code>5</code>\n<strong>输出:</strong>\n<code>[9, 8, 6, 5, 3]</code></pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong>\nnums1 = <code>[6, 7]</code>\nnums2 = <code>[6, 0, 4]</code>\nk = <code>5</code>\n<strong>输出:</strong>\n<code>[6, 7, 6, 0, 4]</code></pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong>\nnums1 = <code>[3, 9]</code>\nnums2 = <code>[8, 9]</code>\nk = <code>3</code>\n<strong>输出:</strong>\n<code>[9, 8, 9]</code></pre>\n","flatten-nested-list-iterator":"<p>给定一个嵌套的整型列表。设计一个迭代器，使其能够遍历这个整型列表中的所有整数。</p>\n\n<p>列表中的项或者为一个整数，或者是另一个列表。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong>[[1,1],2,[1,1]]\n<strong>输出: </strong>[1,1,2,1,1]\n<strong>解释: </strong>通过重复调用&nbsp;<em>next </em>直到&nbsp;<em>hasNex</em>t 返回false，<em>next&nbsp;</em>返回的元素的顺序应该是: <code>[1,1,2,1,1]</code>。</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>[1,[4,[6]]]\n<strong>输出: </strong>[1,4,6]\n<strong>解释: </strong>通过重复调用&nbsp;<em>next&nbsp;</em>直到&nbsp;<em>hasNex</em>t 返回false，<em>next&nbsp;</em>返回的元素的顺序应该是: <code>[1,4,6]</code>。\n</pre>\n","palindrome-pairs":"<p>给定一组<strong>唯一</strong>的单词， 找出所有<strong><em>不同&nbsp;</em></strong>的索引对<code>(i, j)</code>，使得列表中的两个单词，&nbsp;<code>words[i] + words[j]</code>&nbsp;，可拼接成回文串。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong>[&quot;abcd&quot;,&quot;dcba&quot;,&quot;lls&quot;,&quot;s&quot;,&quot;sssll&quot;]\n<strong>输出: </strong>[[0,1],[1,0],[3,2],[2,4]] \n<strong>解释: </strong>可拼接成的回文串为 <code>[&quot;dcbaabcd&quot;,&quot;abcddcba&quot;,&quot;slls&quot;,&quot;llssssll&quot;]</code>\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>[&quot;bat&quot;,&quot;tab&quot;,&quot;cat&quot;]\n<strong>输出: </strong>[[0,1],[1,0]] \n<strong>解释: </strong>可拼接成的回文串为 <code>[&quot;battab&quot;,&quot;tabbat&quot;]</code></pre>\n","reconstruct-itinerary":"<p>给定一个机票的字符串二维数组 <code>[from, to]</code>，子数组中的两个成员分别表示飞机出发和降落的机场地点，对该行程进行重新规划排序。所有这些机票都属于一个从JFK（肯尼迪国际机场）出发的先生，所以该行程必须从 JFK 出发。</p>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>如果存在多种有效的行程，你可以按字符自然排序返回最小的行程组合。例如，行程 [&quot;JFK&quot;, &quot;LGA&quot;] 与 [&quot;JFK&quot;, &quot;LGB&quot;] 相比就更小，排序更靠前</li>\n\t<li>所有的机场都用三个大写字母表示（机场代码）。</li>\n\t<li>假定所有机票至少存在一种合理的行程。</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><code><strong>输入: </strong></code><code>[[&quot;MUC&quot;, &quot;LHR&quot;], [&quot;JFK&quot;, &quot;MUC&quot;], [&quot;SFO&quot;, &quot;SJC&quot;], [&quot;LHR&quot;, &quot;SFO&quot;]]</code>\n<strong>输出: </strong><code>[&quot;JFK&quot;, &quot;MUC&quot;, &quot;LHR&quot;, &quot;SFO&quot;, &quot;SJC&quot;]</code>\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><code><strong>输入: </strong></code><code>[[&quot;JFK&quot;,&quot;SFO&quot;],[&quot;JFK&quot;,&quot;ATL&quot;],[&quot;SFO&quot;,&quot;ATL&quot;],[&quot;ATL&quot;,&quot;JFK&quot;],[&quot;ATL&quot;,&quot;SFO&quot;]]</code>\n<strong>输出: </strong><code>[&quot;JFK&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;SFO&quot;]</code>\n<strong>解释: </strong>另一种有效的行程是&nbsp;<code>[&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;ATL&quot;,&quot;SFO&quot;]</code>。但是它自然排序更大更靠后。</pre>\n","reverse-string":"<p>编写一个函数，其作用是将输入的字符串反转过来。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入: </strong>&quot;hello&quot;\n<strong>输出: </strong>&quot;olleh&quot;\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>&quot;A man, a plan, a canal: Panama&quot;\n<strong>输出: </strong>&quot;amanaP :lanac a ,nalp a ,nam A&quot;</pre>\n","intersection-of-two-arrays-ii":"<p>给定两个数组，编写一个函数来计算它们的交集。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong>nums1 = [1,2,2,1], nums2 = [2,2]\n<strong>输出: </strong>[2,2]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n<strong>输出: </strong>[4,9]</pre>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。</li>\n\t<li>我们可以不考虑输出结果的顺序。</li>\n</ul>\n\n<p><strong><strong>进阶:</strong></strong></p>\n\n<ul>\n\t<li>如果给定的数组已经排好序呢？你将如何优化你的算法？</li>\n\t<li>如果&nbsp;<em>nums1&nbsp;</em>的大小比&nbsp;<em>nums2&nbsp;</em>小很多，哪种方法更优？</li>\n\t<li>如果&nbsp;<em>nums2&nbsp;</em>的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？</li>\n</ul>\n","reverse-vowels-of-a-string":"<p>编写一个函数，以字符串作为输入，反转该字符串中的元音字母。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong>&quot;hello&quot;\n<strong>输出: </strong>&quot;holle&quot;\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>&quot;leetcode&quot;\n<strong>输出: </strong>&quot;leotcede&quot;</pre>\n\n<p><strong>说明:</strong><br>\n元音字母不包含字母&quot;y&quot;。</p>\n","power-of-three":"<p>给定一个整数，写一个函数来判断它是否是 3&nbsp;的幂次方。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> 27\n<strong>输出:</strong> true\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> 0\n<strong>输出:</strong> false</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> 9\n<strong>输出:</strong> true</pre>\n\n<p><strong>示例 4:</strong></p>\n\n<pre><strong>输入:</strong> 45\n<strong>输出:</strong> false</pre>\n\n<p><strong>进阶：</strong><br>\n你能不使用循环或者递归来完成本题吗？</p>\n","power-of-four":"<p>给定一个整数 (32 位有符号整数)，请编写一个函数来判断它是否是 4&nbsp;的幂次方。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong>16\n<strong>输出: </strong>true\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>5\n<strong>输出: </strong>false</pre>\n\n<p><strong>进阶：</strong><br>\n你能不使用循环或者递归来完成本题吗？</p>\n","count-numbers-with-unique-digits":"<p>给定一个<strong>非负</strong>整数 n，计算各位数字都不同的数字 x 的个数，其中 0 &le; x &lt; 10<sup>n&nbsp;</sup>。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入: </strong>2\n<strong>输出: </strong>91 \n<strong>解释: </strong>答案应为除去 <code>11,22,33,44,55,66,77,88,99 </code>外，在 [0,100) 区间内的所有数字。\n</pre>\n","self-crossing":"<p>给定一个含有&nbsp;<code>n</code>&nbsp;个正数的数组&nbsp;<em>x</em>。从点&nbsp;<code>(0,0)</code>&nbsp;开始，先向北移动&nbsp;<code>x[0]</code>&nbsp;米，然后向西移动&nbsp;<code>x[1]</code>&nbsp;米，向南移动&nbsp;<code>x[2]</code>&nbsp;米，向东移动&nbsp;<code>x[3]</code>&nbsp;米，持续移动。也就是说，每次移动后你的方位会发生逆时针变化。</p>\n\n<p>编写一个&nbsp;<code>O(1)</code>&nbsp;空间复杂度的一趟扫描算法，判断你所经过的路径是否相交。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入: </strong><code>[2,1,1,2]\n</code>\n?????\n?   ?\n???????&gt;\n    ?\n\n<strong>输出:</strong> true \n<strong>解释:</strong> 路径交叉了\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入: </strong><code>[1,2,3,4]\n</code>\n????????\n?      ?\n?\n?\n?????????????&gt;\n\n<strong>输出: </strong>false \n<strong>解释:</strong> 路径没有相交\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> <code>[1,1,1,1]\n</code>\n?????\n?   ?\n?????&gt;\n\n<strong>输出:</strong> true \n<strong>解释:</strong> 路径相交了\n</pre>\n","odd-even-linked-list":"<p>给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。</p>\n\n<p>请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL\n<strong>输出:</strong> 1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> 2-&gt;1-&gt;3-&gt;5-&gt;6-&gt;4-&gt;7-&gt;NULL \n<strong>输出:</strong> 2-&gt;3-&gt;6-&gt;7-&gt;1-&gt;5-&gt;4-&gt;NULL</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>应当保持奇数节点和偶数节点的相对顺序。</li>\n\t<li>链表的第一个节点视为奇数节点，第二个节点视为偶数节点，以此类推。</li>\n</ul>\n","wiggle-sort-ii":"<p>给定一个无序的数组&nbsp;<code>nums</code>，将它重新排列成&nbsp;<code>nums[0] &lt; nums[1] &gt; nums[2] &lt; nums[3]...</code>&nbsp;的顺序。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入: </strong><code>nums = [1, 5, 1, 1, 6, 4]</code>\n<strong>输出: </strong>一个可能的答案是 <code>[1, 4, 1, 5, 1, 6]</code></pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong><code>nums = [1, 3, 2, 2, 3, 1]</code>\n<strong>输出:</strong> 一个可能的答案是 <code>[2, 3, 1, 3, 1, 2]</code></pre>\n\n<p><strong>说明:</strong><br>\n你可以假设所有输入都会得到有效的结果。</p>\n\n<p><strong>进阶:</strong><br>\n你能用&nbsp;O(n) 时间复杂度和 / 或原地 O(1) 额外空间来实现吗？</p>\n","top-k-frequent-elements":"<p>给定一个非空的整数数组，返回其中出现频率前&nbsp;<strong><em>k&nbsp;</em></strong>高的元素。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong>nums = [1,1,1,2,2,3], k = 2\n<strong>输出: </strong>[1,2]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>nums = [1], k = 1\n<strong>输出: </strong>[1]</pre>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>你可以假设给定的&nbsp;<em>k&nbsp;</em>总是合理的，且 1 &le; k &le; 数组中不相同的元素的个数。</li>\n\t<li>你的算法的时间复杂度<strong>必须</strong>优于 O(<em>n</em> log <em>n</em>) ,&nbsp;<em>n&nbsp;</em>是数组的大小。</li>\n</ul>\n","russian-doll-envelopes":"<p>给定一些标记了宽度和高度的信封，宽度和高度以整数对形式&nbsp;<code>(w, h)</code>&nbsp;出现。当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。</p>\n\n<p>请计算最多能有多少个信封能组成一组&ldquo;俄罗斯套娃&rdquo;信封（即可以把一个信封放到另一个信封里面）。</p>\n\n<p><strong>说明:</strong><br>\n不允许旋转信封。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> envelopes = <code>[[5,4],[6,4],[6,7],[2,3]]</code>\n<strong>输出:</strong> 3 \n<strong>解释:</strong> 最多信封的个数为 <code>3, 组合为: </code>[2,3] =&gt; [5,4] =&gt; [6,7]。\n</pre>\n","integer-break":"<p>给定一个正整数&nbsp;<em>n</em>，将其拆分为<strong>至少</strong>两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong>2\n<strong>输出: </strong>1\n<strong>解释: </strong>2 = 1 + 1, 1 &times; 1 = 1。</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入: </strong>10\n<strong>输出: </strong>36\n<strong>解释: </strong>10 = 3 + 3 + 4, 3 &times;&nbsp;3 &times;&nbsp;4 = 36。</pre>\n\n<p><strong>说明: </strong>你可以假设&nbsp;<em>n&nbsp;</em>不小于 2 且不大于 58。</p>\n","longest-increasing-path-in-a-matrix":"<p>给定一个整数矩阵，找出最长递增路径的长度。</p>\n\n<p>对于每个单元格，你可以往上，下，左，右四个方向移动。 你不能在对角线方向上移动或移动到边界外（即不允许环绕）。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong>nums = \n[\n  [<strong>9</strong>,9,4],\n  [<strong>6</strong>,6,8],\n  [<strong>2</strong>,<strong>1</strong>,1]\n] \n<strong>输出:</strong> 4 \n<strong>解释:</strong> 最长递增路径为&nbsp;<code>[1, 2, 6, 9]</code>。</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> nums = \n[\n  [<strong>3</strong>,<strong>4</strong>,<strong>5</strong>],\n  [3,2,<strong>6</strong>],\n  [2,2,1]\n] \n<strong>输出: </strong>4 \n<strong>解释: </strong>最长递增路径是&nbsp;<code>[3, 4, 5, 6]</code>。注意不允许在对角线方向上移动。\n</pre>\n","verify-preorder-serialization-of-a-binary-tree":"<p>序列化二叉树的一种方法是使用前序遍历。当我们遇到一个非空节点时，我们可以记录下这个节点的值。如果它是一个空节点，我们可以使用一个标记值记录，例如 <code>#</code>。</p>\n\n<pre>     _9_\n    /   \\\n   3     2\n  / \\   / \\\n 4   1  #  6\n/ \\ / \\   / \\\n# # # #   # #\n</pre>\n\n<p>例如，上面的二叉树可以被序列化为字符串 <code>&quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;</code>，其中 <code>#</code> 代表一个空节点。</p>\n\n<p>给定一串以逗号分隔的序列，验证它是否是正确的二叉树的前序序列化。编写一个在不重构树的条件下的可行算法。</p>\n\n<p>每个以逗号分隔的字符或为一个整数或为一个表示 <code>null</code> 指针的 <code>&#39;#&#39;</code> 。</p>\n\n<p>你可以认为输入格式总是有效的，例如它永远不会包含两个连续的逗号，比如&nbsp;<code>&quot;1,,3&quot;</code> 。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong><code>&quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;</code>\n<strong>输出: </strong><code>true</code></pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入: </strong><code>&quot;1,#&quot;</code>\n<strong>输出: </strong><code>false</code>\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入: </strong><code>&quot;9,#,#,1&quot;</code>\n<strong>输出: </strong><code>false</code></pre>\n","count-of-smaller-numbers-after-self":"<p>给定一个整数数组 <em>nums</em>，按要求返回一个新数组&nbsp;<em>counts</em>。数组 <em>counts</em> 有该性质： <code>counts[i]</code> 的值是&nbsp; <code>nums[i]</code> 右侧小于&nbsp;<code>nums[i]</code> 的元素的数量。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [5,2,6,1]\n<strong>输出:</strong> <code>[2,1,1,0] \n<strong>解释:</strong></code>\n5 的右侧有 <strong>2 </strong>个更小的元素 (2 和 1).\n2 的右侧仅有 <strong>1 </strong>个更小的元素 (1).\n6 的右侧有 <strong>1 </strong>个更小的元素 (1).\n1 的右侧有 <strong>0 </strong>个更小的元素.\n</pre>\n","maximum-product-of-word-lengths":"<p>给定一个字符串数组&nbsp;<code>words</code>，找到&nbsp;<code>length(word[i]) * length(word[j])</code>&nbsp;的最大值，并且这两个单词不含有公共字母。你可以认为每个单词只包含小写字母。如果不存在这样的两个单词，返回 0。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> <code>[&quot;abcw&quot;,&quot;baz&quot;,&quot;foo&quot;,&quot;bar&quot;,&quot;xtfn&quot;,&quot;abcdef&quot;]</code>\n<strong>输出: </strong><code>16 \n<strong>解释:</strong> 这两个单词为<strong> </strong></code><code>&quot;abcw&quot;, &quot;xtfn&quot;</code>。</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> <code>[&quot;a&quot;,&quot;ab&quot;,&quot;abc&quot;,&quot;d&quot;,&quot;cd&quot;,&quot;bcd&quot;,&quot;abcd&quot;]</code>\n<strong>输出: </strong><code>4 \n<strong>解释: </strong></code>这两个单词为 <code>&quot;ab&quot;, &quot;cd&quot;</code>。</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> <code>[&quot;a&quot;,&quot;aa&quot;,&quot;aaa&quot;,&quot;aaaa&quot;]</code>\n<strong>输出: </strong><code>0 \n<strong>解释: </strong>不存在这样的两个单词。</code></pre>\n","maximum-size-subarray-sum-equals-k":null,"design-tic-tac-toe":null,"shortest-distance-from-all-buildings":null,"increasing-triplet-subsequence":"<p>给定一个未排序的数组，判断这个数组中是否存在长度为 3 的递增子序列。</p>\n\n<p>数学表达式如下:</p>\n\n<blockquote>如果存在这样的&nbsp;<em>i, j, k,&nbsp;</em>&nbsp;且满足&nbsp;0 &le; <em>i</em> &lt; <em>j</em> &lt; <em>k</em> &le; <em>n</em>-1，<br>\n使得&nbsp;<em>arr[i]</em> &lt; <em>arr[j]</em> &lt; <em>arr[k] </em>，返回 true ;&nbsp;否则返回 false 。</blockquote>\n\n<p><strong>说明:</strong> 要求算法的时间复杂度为 O(<em>n</em>)，空间复杂度为 O(<em>1</em>) 。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong>[1,2,3,4,5]\n<strong>输出: </strong>true\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>[5,4,3,2,1]\n<strong>输出: </strong>false</pre>\n","intersection-of-two-arrays":"<p>给定两个数组，编写一个函数来计算它们的交集。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong>nums1 = [1,2,2,1], nums2 = [2,2]\n<strong>输出: </strong>[2]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n<strong>输出: </strong>[9,4]</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>输出结果中的每个元素一定是唯一的。</li>\n\t<li>我们可以不考虑输出结果的顺序。</li>\n</ul>\n","logger-rate-limiter":null,"moving-average-from-data-stream":null,"rearrange-string-k-distance-apart":null,"nested-list-weight-sum":null,"binary-tree-vertical-order-traversal":null,"sort-transformed-array":null,"data-stream-as-disjoint-intervals":"<p>给定一个非负整数的数据流输入 a<sub>1</sub>，a<sub>2</sub>，&hellip;，a<sub>n，</sub>&hellip;，将到目前为止看到的数字总结为不相交的间隔列表。</p>\n\n<p>例如，假设数据流中的整数为 1，3，7，2，6，&hellip;，每次的总结为：</p>\n\n<pre>\n[1, 1]\n[1, 1], [3, 3]\n[1, 1], [3, 3], [7, 7]\n[1, 3], [7, 7]\n[1, 3], [6, 7]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶：</strong><br />\n如果有很多合并，并且与数据流的大小相比，不相交间隔的数量很小，该怎么办?</p>\n\n<p><strong>提示：</strong><br />\n特别感谢 <a href=\"https://discuss.leetcode.com/user/yunhong\">@yunhong</a> 提供了本问题和其测试用例。</p>\n","bomb-enemy":null,"generalized-abbreviation":null,"counting-bits":"<p>给定一个非负整数&nbsp;<strong>num</strong>。对于&nbsp;<strong>0 &le; i &le; num </strong>范围中的每个数字&nbsp;<strong>i&nbsp;</strong>，计算其二进制数中的 1 的数目并将它们作为数组返回。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong>2\n<strong>输出: </strong>[0,1,1]</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入: </strong>5\n<strong>输出: </strong><code>[0,1,1,2,1,2]</code></pre>\n\n<p><strong>进阶:</strong></p>\n\n<ul>\n\t<li>给出时间复杂度为<strong>O(n*sizeof(integer))</strong>的解答非常容易。但你可以在线性时间<strong>O(n)</strong>内用一趟扫描做到吗？</li>\n\t<li>要求算法的空间复杂度为<strong>O(n)</strong>。</li>\n\t<li>你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的&nbsp;<strong>__builtin_popcount</strong>）来执行此操作。</li>\n</ul>\n","android-unlock-patterns":null,"coin-change":"<p>给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回&nbsp;<code>-1</code>。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入: </strong>coins = <code>[1, 2, 5]</code>, amount = <code>11</code>\n<strong>输出: </strong><code>3</code> \n<strong>解释:</strong> 11 = 5 + 5 + 1</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>coins = <code>[2]</code>, amount = <code>3</code>\n<strong>输出: </strong>-1</pre>\n\n<p><strong>说明</strong>:<br>\n你可以认为每种硬币的数量是无限的。</p>\n","line-reflection":null,"bulb-switcher":"<p>初始时有&nbsp;<em>n&nbsp;</em>个灯泡关闭。 第 1 轮，你打开所有的灯泡。 第 2 轮，每两个灯泡你关闭一次。 第 3 轮，每三个灯泡切换一次开关（如果关闭则开启，如果开启则关闭）。第&nbsp;<em>i</em> 轮，每&nbsp;<em>i&nbsp;</em>个灯泡切换一次开关。 对于第&nbsp;<em>n&nbsp;</em>轮，你只切换最后一个灯泡的开关。 找出&nbsp;<em>n&nbsp;</em>轮后有多少个亮着的灯泡。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入: </strong>3\n<strong>输出:</strong> 1 \n<strong>解释:</strong> \n初始时, 灯泡状态 <strong>[关闭, 关闭, 关闭]</strong>.\n第一轮后, 灯泡状态 <strong>[开启, 开启, 开启]</strong>.\n第二轮后, 灯泡状态 <strong>[开启, 关闭, 开启]</strong>.\n第三轮后, 灯泡状态 <strong>[开启, 关闭, 关闭]</strong>. \n\n你应该返回 1，因为只有一个灯泡还亮着。\n</pre>\n","remove-duplicate-letters":"<p>给定一个仅包含小写字母的字符串，去除字符串中重复的字母，使得每个字母只出现一次。需保证返回结果的字典序最小（要求不能打乱其他字符的相对位置）。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> <code>&quot;bcabc&quot;</code>\n<strong>输出:</strong> <code>&quot;abc&quot;</code>\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> <code>&quot;cbacdcbc&quot;</code>\n<strong>输出:</strong> <code>&quot;acdb&quot;</code></pre>\n","house-robber-iii":"<p>在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为&ldquo;根&rdquo;。 除了&ldquo;根&rdquo;之外，每栋房子有且只有一个&ldquo;父&ldquo;房子与之相连。一番侦察之后，聪明的小偷意识到&ldquo;这个地方的所有房屋的排列类似于一棵二叉树&rdquo;。 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。</p>\n\n<p>计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong>[3,2,3,null,3,null,1]\n\n     <strong>3</strong>\n    / \\\n   2   3\n    \\   \\ \n     <strong>3</strong>   <strong>1</strong>\n\n<strong>输出:</strong> 7 \n<strong>解释:</strong>&nbsp;小偷一晚能够盗取的最高金额 = 3 + 3 + 1 = <strong>7</strong>.</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>[3,4,5,1,3,null,1]\n\n&nbsp;    3\n    / \\\n   <strong>4</strong>   <strong>5</strong>\n  / \\   \\ \n 1   3   1\n\n<strong>输出:</strong> 9\n<strong>解释:</strong>&nbsp;小偷一晚能够盗取的最高金额&nbsp;= <strong>4</strong> + <strong>5</strong> = <strong>9</strong>.\n</pre>\n","design-snake-game":null,"largest-bst-subtree":null,"number-of-connected-components-in-an-undirected-graph":null,"burst-balloons":"<p>有 <code>n</code> 个气球，编号为<code>0</code> 到 <code>n-1</code>，每个气球上都标有一个数字，这些数字存在数组&nbsp;<code>nums</code>&nbsp;中。</p>\n\n<p>现在要求你戳破所有的气球。每当你戳破一个气球 <code>i</code> 时，你可以获得&nbsp;<code>nums[left] * nums[i] * nums[right]</code>&nbsp;个硬币。&nbsp;这里的&nbsp;<code>left</code>&nbsp;和&nbsp;<code>right</code>&nbsp;代表和&nbsp;<code>i</code>&nbsp;相邻的两个气球的序号。注意当你戳破了气球 <code>i</code> 后，气球&nbsp;<code>left</code>&nbsp;和气球&nbsp;<code>right</code>&nbsp;就变成了相邻的气球。</p>\n\n<p>求所能获得硬币的最大数量。</p>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>你可以假设&nbsp;<code>nums[-1] = nums[n] = 1</code>，但注意它们不是真实存在的所以并不能被戳破。</li>\n\t<li>0 &le; <code>n</code> &le; 500, 0 &le; <code>nums[i]</code> &le; 100</li>\n</ul>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> <code>[3,1,5,8]</code>\n<strong>输出:</strong> <code>167 \n<strong>解释: </strong></code>nums = [3,1,5,8] --&gt; [3,5,8] --&gt;   [3,8]   --&gt;  [8]  --&gt; []\n&nbsp;    coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167\n</pre>\n","patching-array":"<p>给定一个已排序的正整数数组 <em>nums，</em>和一个正整数&nbsp;<em>n 。</em>从&nbsp;<code>[1, n]</code>&nbsp;区间内选取任意个数字补充到&nbsp;<em>nums&nbsp;</em>中，使得&nbsp;<code>[1, n]</code>&nbsp;区间内的任何数字都可以用&nbsp;<em>nums&nbsp;</em>中某几个数字的和来表示。请输出满足上述要求的最少需要补充的数字个数。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入: </strong><em>nums</em> = <code>[1,3]</code>, <em>n</em> = <code>6</code>\n<strong>输出: </strong>1 \n<strong>解释:</strong>\n根据<em> nums&nbsp;</em>里现有的组合&nbsp;<code>[1], [3], [1,3]</code>，可以得出&nbsp;<code>1, 3, 4</code>。\n现在如果我们将&nbsp;<code>2</code>&nbsp;添加到&nbsp;<em>nums 中，</em>&nbsp;组合变为: <code>[1], [2], [3], [1,3], [2,3], [1,2,3]</code>。\n其和可以表示数字&nbsp;<code>1, 2, 3, 4, 5, 6</code>，能够覆盖&nbsp;<code>[1, 6]</code>&nbsp;区间里所有的数。\n所以我们最少需要添加一个数字。</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong><em>nums</em> = <code>[1,5,10]</code>, <em>n</em> = <code>20</code>\n<strong>输出:</strong> 2\n<strong>解释: </strong>我们需要添加&nbsp;<code>[2, 4]</code>。\n</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre><strong>输入: </strong><em>nums</em> = <code>[1,2,2]</code>, <em>n</em> = <code>5</code>\n<strong>输出:</strong> 0\n</pre>\n","longest-substring-with-at-most-k-distinct-characters":null,"count-of-range-sum":"<p>给定一个整数数组&nbsp;<code>nums</code>，返回区间和在&nbsp;<code>[lower, upper]</code>&nbsp;之间的个数，包含&nbsp;<code>lower</code>&nbsp;和&nbsp;<code>upper</code>。<br>\n区间和&nbsp;<code>S(i, j)</code>&nbsp;表示在&nbsp;<code>nums</code>&nbsp;中，位置从&nbsp;<code>i</code>&nbsp;到&nbsp;<code>j</code>&nbsp;的元素之和，包含&nbsp;<code>i</code>&nbsp;和&nbsp;<code>j</code>&nbsp;(<code>i</code> &le; <code>j</code>)。</p>\n\n<p><strong>说明:</strong><br>\n最直观的算法复杂度是&nbsp;<em>O</em>(<em>n</em><sup>2</sup>) ，请在此基础上优化你的算法。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入: </strong><em>nums</em> = <code>[-2,5,-1]</code>, <em>lower</em> = <code>-2</code>, <em>upper</em> = <code>2</code>,\n<strong>输出: </strong>3 \n<strong>解释: </strong>3个区间分别是: <code>[0,0]</code>, <code>[2,2]</code>, <code>[0,2]，</code>它们表示的和分别为: <code>-2, -1, 2。</code>\n</pre>\n","design-twitter":"<p>设计一个简化版的推特(Twitter)，可以让用户实现发送推文，关注/取消关注其他用户，能够看见关注人（包括自己）的最近十条推文。你的设计需要支持以下的几个功能：</p>\n\n<ol>\n\t<li><strong>postTweet(userId, tweetId)</strong>: 创建一条新的推文</li>\n\t<li><strong>getNewsFeed(userId)</strong>: 检索最近的十条推文。每个推文都必须是由此用户关注的人或者是用户自己发出的。推文必须按照时间顺序由最近的开始排序。</li>\n\t<li><strong>follow(followerId, followeeId)</strong>: 关注一个用户</li>\n\t<li><strong>unfollow(followerId, followeeId)</strong>: 取消关注一个用户</li>\n</ol>\n\n<p><strong>示例:</strong></p>\n\n<pre>\nTwitter twitter = new Twitter();\n\n// 用户1发送了一条新推文 (用户id = 1, 推文id = 5).\ntwitter.postTweet(1, 5);\n\n// 用户1的获取推文应当返回一个列表，其中包含一个id为5的推文.\ntwitter.getNewsFeed(1);\n\n// 用户1关注了用户2.\ntwitter.follow(1, 2);\n\n// 用户2发送了一个新推文 (推文id = 6).\ntwitter.postTweet(2, 6);\n\n// 用户1的获取推文应当返回一个列表，其中包含两个推文，id分别为 -&gt; [6, 5].\n// 推文id6应当在推文id5之前，因为它是在5之后发送的.\ntwitter.getNewsFeed(1);\n\n// 用户1取消关注了用户2.\ntwitter.unfollow(1, 2);\n\n// 用户1的获取推文应当返回一个列表，其中包含一个id为5的推文.\n// 因为用户1已经不再关注用户2.\ntwitter.getNewsFeed(1);\n</pre>\n","super-ugly-number":"<p>编写一段程序来查找第 <code><em>n</em></code> 个超级丑数。</p>\n\n<p>超级丑数是指其所有质因数都是长度为&nbsp;<code>k</code>&nbsp;的质数列表&nbsp;<code>primes</code>&nbsp;中的正整数。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> n = 12, <code>primes</code> = <code>[2,7,13,19]</code>\n<strong>输出:</strong> 32 \n<strong>解释: </strong>给定长度为 4 的质数列表 primes = [2,7,13,19]，前 12 个超级丑数序列为：[1,2,4,7,8,13,14,16,19,26,28,32] 。</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li><code>1</code>&nbsp;是任何给定&nbsp;<code>primes</code>&nbsp;的超级丑数。</li>\n\t<li>&nbsp;给定&nbsp;<code>primes</code>&nbsp;中的数字以升序排列。</li>\n\t<li>0 &lt; <code>k</code> &le; 100, 0 &lt; <code>n</code> &le; 10<sup>6</sup>, 0 &lt; <code>primes[i]</code> &lt; 1000 。</li>\n\t<li>第&nbsp;<code>n</code>&nbsp;个超级丑数确保在 32 位有符整数范围内。</li>\n</ul>\n","word-pattern":"<p>给定一种 <code>pattern(模式)</code>&nbsp;和一个字符串&nbsp;<code>str</code>&nbsp;，判断 <code>str</code> 是否遵循相同的模式。</p>\n\n<p>这里的<strong>遵循</strong>指完全匹配，例如，&nbsp;<code>pattern</code>&nbsp;里的每个字母和字符串&nbsp;<code>str</code><strong>&nbsp;</strong>中的每个非空单词之间存在着双向连接的对应模式。</p>\n\n<p><strong>示例1:</strong></p>\n\n<pre><strong>输入:</strong> pattern = <code>&quot;abba&quot;</code>, str = <code>&quot;dog cat cat dog&quot;</code>\n<strong>输出:</strong> true</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong>pattern = <code>&quot;abba&quot;</code>, str = <code>&quot;dog cat cat fish&quot;</code>\n<strong>输出:</strong> false</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> pattern = <code>&quot;aaaa&quot;</code>, str = <code>&quot;dog cat cat dog&quot;</code>\n<strong>输出:</strong> false</pre>\n\n<p><strong>示例&nbsp;4:</strong></p>\n\n<pre><strong>输入:</strong> pattern = <code>&quot;abba&quot;</code>, str = <code>&quot;dog dog dog dog&quot;</code>\n<strong>输出:</strong> false</pre>\n\n<p><strong>说明:</strong><br>\n你可以假设&nbsp;<code>pattern</code>&nbsp;只包含小写字母，&nbsp;<code>str</code>&nbsp;包含了由单个空格分隔的小写字母。&nbsp; &nbsp;&nbsp;</p>\n","find-the-duplicate-number":"<p>给定一个包含&nbsp;<em>n</em> + 1 个整数的数组&nbsp;<em>nums</em>，其数字都在 1 到 <em>n&nbsp;</em>之间（包括 1 和 <em>n</em>），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> <code>[1,3,4,2,2]</code>\n<strong>输出:</strong> 2\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [3,1,3,4,2]\n<strong>输出:</strong> 3\n</pre>\n\n<p><strong>说明：</strong></p>\n\n<ol>\n\t<li><strong>不能</strong>更改原数组（假设数组是只读的）。</li>\n\t<li>只能使用额外的 <em>O</em>(1) 的空间。</li>\n\t<li>时间复杂度小于 <em>O</em>(<em>n</em><sup>2</sup>) 。</li>\n\t<li>数组中只有一个重复的数字，但它可能不止重复出现一次。</li>\n</ol>\n","move-zeroes":"<p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> <code>[0,1,0,3,12]</code>\n<strong>输出:</strong> <code>[1,3,12,0,0]</code></pre>\n\n<p><strong>说明</strong>:</p>\n\n<ol>\n\t<li>必须在原数组上操作，不能拷贝额外的数组。</li>\n\t<li>尽量减少操作次数。</li>\n</ol>\n","ugly-number":"<p>编写一个程序判断给定的数是否为丑数。</p>\n\n<p>丑数就是只包含质因数&nbsp;<code>2, 3, 5</code>&nbsp;的<strong>正整数</strong>。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> 6\n<strong>输出:</strong> true\n<strong>解释: </strong>6 = 2 &times;&nbsp;3</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> 8\n<strong>输出:</strong> true\n<strong>解释: </strong>8 = 2 &times; 2 &times;&nbsp;2\n</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre><strong>输入:</strong> 14\n<strong>输出:</strong> false \n<strong>解释: </strong><code>14</code> 不是丑数，因为它包含了另外一个质因数&nbsp;<code>7</code>。</pre>\n\n<p><strong>说明：</strong></p>\n\n<ol>\n\t<li><code>1</code>&nbsp;是丑数。</li>\n\t<li>输入不会超过 32 位有符号整数的范围:&nbsp;[&minus;2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>&minus; 1]。</li>\n</ol>\n","peeking-iterator":"<p>给定一个迭代器类的接口，接口包含两个方法：&nbsp;<code>next()</code>&nbsp;和&nbsp;<code>hasNext()</code>。设计并实现一个支持&nbsp;<code>peek()</code>&nbsp;操作的顶端迭代器 -- 其本质就是把原本应由&nbsp;<code>next()</code>&nbsp;方法返回的元素&nbsp;<code>peek()</code>&nbsp;出来。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>假设迭代器被初始化为列表&nbsp;<strong><code>[1,2,3]</code></strong>。\n\n调用&nbsp;<strong><code>next() </code></strong>返回 <strong>1</strong>，得到列表中的第一个元素。\n现在调用&nbsp;<strong><code>peek()</code></strong>&nbsp;返回 <strong>2</strong>，下一个元素。在此之后调用&nbsp;<strong><code>next() </code></strong>仍然返回 <strong>2</strong>。\n最后一次调用&nbsp;<strong><code>next()</code></strong>&nbsp;返回 <strong>3</strong>，末尾元素。在此之后调用&nbsp;<strong><code>hasNext()</code></strong>&nbsp;应该返回 <strong>false</strong>。\n</pre>\n\n<p><strong>进阶：</strong>你将如何拓展你的设计？使之变得通用化，从而适应所有的类型，而不只是整数型？</p>\n","missing-number":"<p>给定一个包含 <code>0, 1, 2, ..., n</code>&nbsp;中&nbsp;<em>n</em>&nbsp;个数的序列，找出 0 .. <em>n</em>&nbsp;中没有出现在序列中的那个数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [3,0,1]\n<strong>输出:</strong> 2\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> [9,6,4,2,3,5,7,0,1]\n<strong>输出:</strong> 8\n</pre>\n\n<p><strong>说明:</strong><br>\n你的算法应具有线性时间复杂度。你能否仅使用额外常数空间来实现?</p>\n","bulls-and-cows":"<p>你正在和你的朋友玩&nbsp;<a href=\"https://baike.baidu.com/item/%E7%8C%9C%E6%95%B0%E5%AD%97/83200?fromtitle=Bulls+and+Cows&amp;fromid=12003488&amp;fr=aladdin\" target=\"_blank\">猜数字（Bulls and Cows）</a>游戏：你写下一个数字让你的朋友猜。每次他猜测后，你给他一个提示，告诉他有多少位数字和确切位置都猜对了（称为&ldquo;Bulls&rdquo;, 公牛），有多少位数字猜对了但是位置不对（称为&ldquo;Cows&rdquo;, 奶牛）。你的朋友将会根据提示继续猜，直到猜出秘密数字。</p>\n\n<p>请写出一个根据秘密数字和朋友的猜测数返回提示的函数，用 <code>A</code> 表示公牛，用&nbsp;<code>B</code>&nbsp;表示奶牛。</p>\n\n<p>请注意秘密数字和朋友的猜测数都可能含有重复数字。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> secret = &quot;1807&quot;, guess = &quot;7810&quot;\n\n<strong>输出:</strong> &quot;1A3B&quot;\n\n<strong>解释:</strong> <code>1</code>&nbsp;公牛和&nbsp;<code>3</code>&nbsp;奶牛。公牛是 <code>8</code>，奶牛是 <code>0</code>, <code>1</code>&nbsp;和 <code>7</code>。</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> secret = &quot;1123&quot;, guess = &quot;0111&quot;\n\n<strong>输出:</strong> &quot;1A1B&quot;\n\n<strong>解释: </strong>朋友猜测数中的第一个 <code>1</code>&nbsp;是公牛，第二个或第三个 <code>1</code>&nbsp;可被视为奶牛。</pre>\n\n<p><strong>说明: </strong>你可以假设秘密数字和朋友的猜测数都只包含数字，并且它们的长度永远相等。</p>\n","additive-number":"<p>累加数是一个字符串，组成它的数字可以形成累加序列。</p>\n\n<p>一个有效的累加序列必须<strong>至少</strong>包含 3 个数。除了最开始的两个数以外，字符串中的其他数都等于它之前两个数相加的和。</p>\n\n<p>给定一个只包含数字&nbsp;<code>&#39;0&#39;-&#39;9&#39;</code>&nbsp;的字符串，编写一个算法来判断给定输入是否是累加数。</p>\n\n<p><strong>说明:&nbsp;</strong>累加序列里的数不会以 0 开头，所以不会出现&nbsp;<code>1, 2, 03</code> 或者&nbsp;<code>1, 02, 3</code>&nbsp;的情况。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> <code>&quot;112358&quot;</code>\n<strong>输出:</strong> true \n<strong>解释: </strong>累加序列为: <code>1, 1, 2, 3, 5, 8 </code>。1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> <code>&quot;199100199&quot;</code>\n<strong>输出:</strong> true \n<strong>解释: </strong>累加序列为: <code>1, 99, 100, 199。</code>1 + 99 = 100, 99 + 100 = 199</pre>\n\n<p><strong>进阶:</strong><br>\n你如何处理一个溢出的过大的整数输入?</p>\n","range-sum-query-2d-immutable":"<p>给定一个二维矩阵，计算其子矩形范围内元素的总和，该子矩阵的左上角为 (<em>row</em>1,&nbsp;<em>col</em>1) ，右下角为 (<em>row</em>2,&nbsp;<em>col</em>2)。</p>\n\n<p><img alt=\"Range Sum Query 2D\" src=\"/static/images/courses/range_sum_query_2d.png\"><br>\n<small>上图子矩阵左上角&nbsp;(row1, col1) = <strong>(2, 1)</strong>&nbsp;，右下角(row2, col2) = <strong>(4, 3)，</strong>该子矩形内元素的总和为 8。</small></p>\n\n<p><strong>示例:</strong></p>\n\n<pre>给定 matrix = [\n  [3, 0, 1, 4, 2],\n  [5, 6, 3, 2, 1],\n  [1, 2, 0, 1, 5],\n  [4, 1, 0, 1, 7],\n  [1, 0, 3, 0, 5]\n]\n\nsumRegion(2, 1, 4, 3) -&gt; 8\nsumRegion(1, 1, 2, 2) -&gt; 11\nsumRegion(1, 2, 2, 4) -&gt; 12\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>你可以假设矩阵不可变。</li>\n\t<li>会多次调用&nbsp;<em>sumRegion&nbsp;</em>方法<em>。</em></li>\n\t<li>你可以假设&nbsp;<em>row</em>1 &le; <em>row</em>2 且&nbsp;<em>col</em>1 &le; <em>col</em>2。</li>\n</ol>\n","nim-game":"<p>你和你的朋友，两个人一起玩&nbsp;<a href=\"https://baike.baidu.com/item/Nim游戏/6737105\" target=\"_blank\">Nim游戏</a>：桌子上有一堆石头，每次你们轮流拿掉&nbsp;1 - 3 块石头。 拿掉最后一块石头的人就是获胜者。你作为先手。</p>\n\n<p>你们是聪明人，每一步都是最优解。 编写一个函数，来判断你是否可以在给定石头数量的情况下赢得游戏。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> <code>4</code>\n<strong>输出:</strong> false \n<strong>解释: </strong>如果堆中有 4 块石头，那么你永远不会赢得比赛；\n&nbsp;    因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿走。\n</pre>\n","inorder-successor-in-bst":null,"range-sum-query-mutable":"<p>给定一个整数数组 &nbsp;<em>nums</em>，求出数组从索引&nbsp;<em>i&nbsp;</em>到&nbsp;<em>j&nbsp;&nbsp;</em>(<em>i</em>&nbsp;&le;&nbsp;<em>j</em>) 范围内元素的总和，包含&nbsp;<em>i,&nbsp; j&nbsp;</em>两点。</p>\n\n<p><em>update(i, val)</em> 函数可以通过将下标为&nbsp;<em>i&nbsp;</em>的数值更新为&nbsp;<em>val</em>，从而对数列进行修改。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>Given nums = [1, 3, 5]\n\nsumRange(0, 2) -&gt; 9\nupdate(1, 2)\nsumRange(0, 2) -&gt; 8\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>数组仅可以在&nbsp;<em>update&nbsp;</em>函数下进行修改。</li>\n\t<li>你可以假设 <em>update</em> 函数与 <em>sumRange</em> 函数的调用次数是均匀分布的。</li>\n</ol>\n","best-meeting-point":null,"longest-increasing-subsequence":"<p>给定一个无序的整数数组，找到其中最长上升子序列的长度。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> <code>[10,9,2,5,3,7,101,18]\n</code><strong>输出: </strong>4 \n<strong>解释: </strong>最长的上升子序列是&nbsp;<code>[2,3,7,101]，</code>它的长度是 <code>4</code>。</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。</li>\n\t<li>你算法的时间复杂度应该为&nbsp;O(<em>n<sup>2</sup></em>) 。</li>\n</ul>\n\n<p><strong>进阶:</strong> 你能将算法的时间复杂度降低到&nbsp;O(<em>n</em> log <em>n</em>) 吗?</p>\n","binary-tree-longest-consecutive-sequence":null,"sparse-matrix-multiplication":null,"paint-fence":null,"serialize-and-deserialize-binary-tree":"<p>序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。</p>\n\n<p>请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。</p>\n\n<p><strong>示例:&nbsp;</strong></p>\n\n<pre>你可以将以下二叉树：\n\n    1\n   / \\\n  2   3\n     / \\\n    4   5\n\n序列化为 <code>&quot;[1,2,3,null,null,4,5]&quot;</code></pre>\n\n<p><strong>提示:&nbsp;</strong>这与 LeetCode 目前使用的方式一致，详情请参阅&nbsp;<a href=\"/faq/#binary-tree\">LeetCode 序列化二叉树的格式</a>。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。</p>\n\n<p><strong>说明:&nbsp;</strong>不要使用类的成员 / 全局 / 静态变量来存储状态，你的序列化和反序列化算法应该是无状态的。</p>\n","minimum-height-trees":"<p>对于一个具有树特征的无向图，我们可选择任何一个节点作为根。图因此可以成为树，在所有可能的树中，具有最小高度的树被称为最小高度树。给出这样的一个图，写出一个函数找到所有的最小高度树并返回他们的根节点。</p>\n\n<p><strong>格式</strong></p>\n\n<p>该图包含&nbsp;<code>n</code>&nbsp;个节点，标记为&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n - 1</code>。给定数字&nbsp;<code>n</code>&nbsp;和一个无向边&nbsp;<code>edges</code>&nbsp;列表（每一个边都是一对标签）。</p>\n\n<p>你可以假设没有重复的边会出现在&nbsp;<code>edges</code>&nbsp;中。由于所有的边都是无向边， <code>[0, 1]</code>和&nbsp;<code>[1, 0]</code>&nbsp;是相同的，因此不会同时出现在&nbsp;<code>edges</code>&nbsp;里。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> <code>n = 4</code>, <code>edges = [[1, 0], [1, 2], [1, 3]]</code>\n\n        0\n        |\n        1\n       / \\\n      2   3 \n\n<strong>输出:</strong> <code>[1]</code>\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> <code>n = 6</code>, <code>edges = [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]</code>\n\n     0  1  2\n      \\ | /\n        3\n        |\n        4\n        |\n        5 \n\n<strong>输出:</strong> <code>[3, 4]</code></pre>\n\n<p><strong>说明</strong>:</p>\n\n<ul>\n\t<li>&nbsp;根据<a href=\"https://baike.baidu.com/item/%E6%A0%91/2699484?fromtitle=%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84+%E6%A0%91&amp;fromid=12062173&amp;fr=aladdin\" target=\"_blank\">树的定义</a>，树是一个无向图，其中任何两个顶点只通过一条路径连接。 换句话说，一个任何没有简单环路的连通图都是一棵树。</li>\n\t<li>树的高度是指根节点和叶子节点之间最长向下路径上边的数量。</li>\n</ul>\n","range-sum-query-2d-mutable":null,"word-pattern-ii":null,"flip-game-ii":null,"number-of-islands-ii":null,"perfect-squares":"<p>给定正整数&nbsp;<em>n</em>，找到若干个完全平方数（比如&nbsp;<code>1, 4, 9, 16, ...</code>）使得它们的和等于<em> n</em>。你需要让组成和的完全平方数的个数最少。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> <em>n</em> = <code>12</code>\n<strong>输出:</strong> 3 \n<strong>解释: </strong><code>12 = 4 + 4 + 4.</code></pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> <em>n</em> = <code>13</code>\n<strong>输出:</strong> 2\n<strong>解释: </strong><code>13 = 4 + 9.</code></pre>\n","encode-and-decode-strings":null,"closest-binary-search-tree-value-ii":null,"integer-to-english-words":"<p>将非负整数转换为其对应的英文表示。可以保证给定输入小于&nbsp;2<sup>31</sup> - 1 。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> 123\n<strong>输出:</strong> &quot;One Hundred Twenty Three&quot;\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> 12345\n<strong>输出:</strong> &quot;Twelve Thousand Three Hundred Forty Five&quot;</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> 1234567\n<strong>输出:</strong> &quot;One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven&quot;</pre>\n\n<p><strong>示例 4:</strong></p>\n\n<pre><strong>输入:</strong> 1234567891\n<strong>输出:</strong> &quot;One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One&quot;</pre>\n","flip-game":null,"smallest-rectangle-enclosing-black-pixels":null,"first-bad-version":"<p>你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。</p>\n\n<p>假设你有 <code>n</code> 个版本 <code>[1, 2, ..., n]</code>，你想找出导致之后所有版本出错的第一个错误的版本。</p>\n\n<p>你可以通过调用&nbsp;<code>bool isBadVersion(version)</code>&nbsp;接口来判断版本号 <code>version</code> 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>给定 n = 5，并且 version = 4 是第一个错误的版本。\n\n<code>调用 isBadVersion(3) -&gt; false\n调用 isBadVersion(5)&nbsp;-&gt; true\n调用 isBadVersion(4)&nbsp;-&gt; true\n\n所以，4 是第一个错误的版本。&nbsp;</code></pre>\n","closest-binary-search-tree-value":null,"alien-dictionary":null,"wiggle-sort":null,"trips-and-users":"<p><code>Trips</code>&nbsp;表中存所有出租车的行程信息。每段行程有唯一键 Id，Client_Id 和&nbsp;Driver_Id 是&nbsp;<code>Users</code>&nbsp;表中 Users_Id 的外键。Status 是枚举类型，枚举成员为 (&lsquo;completed&rsquo;, &lsquo;cancelled_by_driver&rsquo;, &lsquo;cancelled_by_client&rsquo;)。</p>\n\n<pre>+----+-----------+-----------+---------+--------------------+----------+\n| Id | Client_Id | Driver_Id | City_Id |        Status      |Request_at|\n+----+-----------+-----------+---------+--------------------+----------+\n| 1  |     1     |    10     |    1    |     completed      |2013-10-01|\n| 2  |     2     |    11     |    1    | cancelled_by_driver|2013-10-01|\n| 3  |     3     |    12     |    6    |     completed      |2013-10-01|\n| 4  |     4     |    13     |    6    | cancelled_by_client|2013-10-01|\n| 5  |     1     |    10     |    1    |     completed      |2013-10-02|\n| 6  |     2     |    11     |    6    |     completed      |2013-10-02|\n| 7  |     3     |    12     |    6    |     completed      |2013-10-02|\n| 8  |     2     |    12     |    12   |     completed      |2013-10-03|\n| 9  |     3     |    10     |    12   |     completed      |2013-10-03| \n| 10 |     4     |    13     |    12   | cancelled_by_driver|2013-10-03|\n+----+-----------+-----------+---------+--------------------+----------+\n</pre>\n\n<p><code>Users</code>&nbsp;表存所有用户。每个用户有唯一键 Users_Id。Banned 表示这个用户是否被禁止，Role 则是一个表示（&lsquo;client&rsquo;, &lsquo;driver&rsquo;, &lsquo;partner&rsquo;）的枚举类型。</p>\n\n<pre>+----------+--------+--------+\n| Users_Id | Banned |  Role  |\n+----------+--------+--------+\n|    1     |   No   | client |\n|    2     |   Yes  | client |\n|    3     |   No   | client |\n|    4     |   No   | client |\n|    10    |   No   | driver |\n|    11    |   No   | driver |\n|    12    |   No   | driver |\n|    13    |   No   | driver |\n+----------+--------+--------+\n</pre>\n\n<p>写一段 SQL 语句查出&nbsp;<strong>2013年10月1日&nbsp;</strong>至&nbsp;<strong>2013年10月3日&nbsp;</strong>期间非禁止用户的取消率。基于上表，你的 SQL 语句应返回如下结果，取消率（Cancellation Rate）保留两位小数。</p>\n\n<pre>+------------+-------------------+\n|     Day    | Cancellation Rate |\n+------------+-------------------+\n| 2013-10-01 |       0.33        |\n| 2013-10-02 |       0.00        |\n| 2013-10-03 |       0.50        |\n+------------+-------------------+\n</pre>\n\n<p><strong>致谢:</strong><br>\n非常感谢&nbsp;<a href=\"https://leetcode.com/discuss/user/cak1erlizhou\">@cak1erlizhou</a>&nbsp;详细的提供了这道题和相应的测试用例。</p>\n","find-median-from-data-stream":"<p>中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。</p>\n\n<p>例如，</p>\n\n<p>[2,3,4]&nbsp;的中位数是 3</p>\n\n<p>[2,3] 的中位数是 (2 + 3) / 2 = 2.5</p>\n\n<p>设计一个支持以下两种操作的数据结构：</p>\n\n<ul>\n\t<li>void addNum(int num) - 从数据流中添加一个整数到数据结构中。</li>\n\t<li>double findMedian() - 返回目前所有元素的中位数。</li>\n</ul>\n\n<p><strong>示例：</strong></p>\n\n<pre>addNum(1)\naddNum(2)\nfindMedian() -&gt; 1.5\naddNum(3) \nfindMedian() -&gt; 2</pre>\n\n<p><strong>进阶:</strong></p>\n\n<ol>\n\t<li>如果数据流中所有整数都在 0 到 100 范围内，你将如何优化你的算法？</li>\n\t<li>如果数据流中 99% 的整数都在 0 到 100 范围内，你将如何优化你的算法？</li>\n</ol>\n","zigzag-iterator":null,"h-index-ii":"<p>给定一位研究者论文被引用次数的数组（被引用次数是非负整数），数组已经按照<strong>升序排列</strong>。编写一个方法，计算出研究者的 <em>h</em> 指数。</p>\n\n<p><a href=\"https://baike.baidu.com/item/h-index/3991452?fr=aladdin\">h 指数的定义</a>: &ldquo;h 代表&ldquo;高引用次数&rdquo;（high citations），一名科研人员的 h 指数是指他（她）的 （N 篇论文中）<strong>至多</strong>有 h 篇论文分别被引用了<strong>至少</strong> h 次。（其余的&nbsp;<em>N - h&nbsp;</em>篇论文每篇被引用次数<strong>不多于 </strong><em>h </em>次。）&quot;</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> <code>citations = [0,1,3,5,6]</code>\n<strong>输出:</strong> 3 \n<strong>解释: </strong>给定数组表示研究者总共有 <code>5</code> 篇论文，每篇论文相应的被引用了 0<code>, 1, 3, 5, 6</code> 次。\n&nbsp;    由于研究者有 <code>3 </code>篇论文每篇<strong>至少</strong>被引用了 <code>3</code> 次，其余两篇论文每篇被引用<strong>不多于</strong> <code>3</code> 次，所以她的<em> h </em>指数是 <code>3</code>。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>说明:</strong></p>\n\n<p>如果 <em>h </em>有多有种可能的值 ，<em>h</em> 指数是其中最大的那个。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶：</strong></p>\n\n<ul>\n\t<li>这是&nbsp;<a href=\"/problems/h-index/description/\">H指数</a>&nbsp;的延伸题目，本题中的&nbsp;<code>citations</code>&nbsp;数组是保证有序的。</li>\n\t<li>你可以优化你的算法到对数时间复杂度吗？</li>\n</ul>\n","find-the-celebrity":null,"palindrome-permutation-ii":null,"range-sum-query-immutable":"<p>给定一个整数数组 &nbsp;<em>nums</em>，求出数组从索引&nbsp;<em>i&nbsp;</em>到&nbsp;<em>j&nbsp;&nbsp;</em>(<em>i</em>&nbsp;&le;&nbsp;<em>j</em>) 范围内元素的总和，包含&nbsp;<em>i,&nbsp; j&nbsp;</em>两点。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>给定 nums = [-2, 0, 3, -5, 2, -1]，求和函数为 sumRange()\n\nsumRange(0, 2) -&gt; 1\nsumRange(2, 5) -&gt; -1\nsumRange(0, 5) -&gt; -3</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>你可以假设数组不可变。</li>\n\t<li>会多次调用&nbsp;<em>sumRange</em>&nbsp;方法。</li>\n</ol>\n","expression-add-operators":"<p>给定一个仅包含数字&nbsp;<code>0-9</code>&nbsp;的字符串和一个目标值，在数字之间添加<strong>二元</strong>运算符（不是一元）<code>+</code>、<code>-</code>&nbsp;或&nbsp;<code>*</code>&nbsp;，返回所有能够得到目标值的表达式。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> <code><em>num</em> = </code>&quot;123&quot;, <em>target</em> = 6\n<strong>输出: </strong>[&quot;1+2+3&quot;, &quot;1*2*3&quot;] \n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> <code><em>num</em> = </code>&quot;232&quot;, <em>target</em> = 8\n<strong>输出: </strong>[&quot;2*3+2&quot;, &quot;2+3*2&quot;]</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> <code><em>num</em> = </code>&quot;105&quot;, <em>target</em> = 5\n<strong>输出: </strong>[&quot;1*0+5&quot;,&quot;10-5&quot;]</pre>\n\n<p><strong>示例&nbsp;4:</strong></p>\n\n<pre><strong>输入:</strong> <code><em>num</em> = </code>&quot;00&quot;, <em>target</em> = 0\n<strong>输出: </strong>[&quot;0+0&quot;, &quot;0-0&quot;, &quot;0*0&quot;]\n</pre>\n\n<p><strong>示例 5:</strong></p>\n\n<pre><strong>输入:</strong> <code><em>num</em> = </code>&quot;3456237490&quot;, <em>target</em> = 9191\n<strong>输出: </strong>[]\n</pre>\n","best-time-to-buy-and-sell-stock-with-cooldown":"<p>给定一个整数数组，其中第<em>&nbsp;i</em>&nbsp;个元素代表了第&nbsp;<em>i</em>&nbsp;天的股票价格 。​</p>\n\n<p>设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:</p>\n\n<ul>\n\t<li>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</li>\n\t<li>卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。</li>\n</ul>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [1,2,3,0,2]\n<strong>输出: </strong>3 \n<strong>解释:</strong> 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]</pre>\n","unique-word-abbreviation":null,"remove-invalid-parentheses":"<p>删除最小数量的无效括号，使得输入的字符串有效，返回所有可能的结果。</p>\n\n<p><strong>说明:</strong> 输入可能包含了除&nbsp;<code>(</code>&nbsp;和&nbsp;<code>)</code>&nbsp;以外的字符。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> &quot;()())()&quot;\n<strong>输出:</strong> [&quot;()()()&quot;, &quot;(())()&quot;]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> &quot;(a)())()&quot;\n<strong>输出:</strong> [&quot;(a)()()&quot;, &quot;(a())()&quot;]\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> &quot;)(&quot;\n<strong>输出: </strong>[&quot;&quot;]</pre>\n","game-of-life":"<p>根据<a href=\"https://baike.baidu.com/item/%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/2926434?fr=aladdin\" target=\"_blank\">百度百科</a>，生命游戏，简称为生命，是英国数学家约翰&middot;何顿&middot;康威在1970年发明的细胞自动机。</p>\n\n<p>给定一个包含 m &times; n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞具有一个初始状态 <em>live</em>（1）即为活细胞， 或 <em>dead</em>（0）即为死细胞。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：</p>\n\n<ol>\n\t<li>如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；</li>\n\t<li>如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；</li>\n\t<li>如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；</li>\n\t<li>如果死细胞周围正好有三个活细胞，则该位置死细胞复活；</li>\n</ol>\n\n<p>根据当前状态，写一个函数来计算面板上细胞的下一个（一次更新后的）状态。下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，其中细胞的出生和死亡是同时发生的。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入: \n</strong>[\n&nbsp; [0,1,0],\n&nbsp; [0,0,1],\n&nbsp; [1,1,1],\n&nbsp; [0,0,0]\n]\n<strong>输出: \n</strong>[\n&nbsp; [0,0,0],\n&nbsp; [1,0,1],\n&nbsp; [0,1,1],\n&nbsp; [0,1,0]\n]</pre>\n\n<p><strong>进阶:</strong></p>\n\n<ul>\n\t<li>你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。</li>\n\t<li>本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？</li>\n</ul>\n","walls-and-gates":null,"palindrome-permutation":null,"h-index":"<p>给定一位研究者论文被引用次数的数组（被引用次数是非负整数）。编写一个方法，计算出研究者的 <em>h&nbsp;</em>指数。</p>\n\n<p><a href=\"https://baike.baidu.com/item/h-index/3991452?fr=aladdin\" target=\"_blank\">h 指数的定义</a>: &ldquo;h 代表&ldquo;高引用次数&rdquo;（high citations），一名科研人员的 h 指数是指他（她）的 （N 篇论文中）<strong>至多</strong>有 h 篇论文分别被引用了<strong>至少</strong> h 次。（其余的&nbsp;<em>N - h&nbsp;</em>篇论文每篇被引用次数<strong>不多于 </strong><em>h </em>次。）&rdquo;</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> <code>citations = [3,0,6,1,5]</code>\n<strong>输出:</strong> 3 \n<strong>解释: </strong>给定数组表示研究者总共有 <code>5</code> 篇论文，每篇论文相应的被引用了 <code>3, 0, 6, 1, 5</code> 次。\n&nbsp;    由于研究者有 <code>3 </code>篇论文每篇<strong>至少</strong>被引用了 <code>3</code> 次，其余两篇论文每篇被引用<strong>不多于</strong> <code>3</code> 次，所以她的 <em>h </em>指数是 <code>3</code>。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>说明:&nbsp;</strong>如果 <em>h </em>有多种可能的值，<em>h</em> 指数是其中最大的那个。</p>\n","paint-house-ii":null,"ugly-number-ii":"<p>编写一个程序，找出第 <code>n</code> 个丑数。</p>\n\n<p>丑数就是只包含质因数&nbsp;<code>2, 3, 5</code> 的<strong>正整数</strong>。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> n = 10\n<strong>输出:</strong> 12\n<strong>解释: </strong><code>1, 2, 3, 4, 5, 6, 8, 9, 10, 12</code> 是前 10 个丑数。</pre>\n\n<p><strong>说明:&nbsp;</strong>&nbsp;</p>\n\n<ol>\n\t<li><code>1</code>&nbsp;是丑数。</li>\n\t<li><code>n</code>&nbsp;<strong>不超过</strong>1690。</li>\n</ol>\n","lowest-common-ancestor-of-a-binary-tree":"<p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p>\n\n<p><a href=\"https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin\" target=\"_blank\">百度百科</a>中最近公共祖先的定义为：&ldquo;对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。&rdquo;</p>\n\n<p>例如，给定如下二叉树:&nbsp; root =&nbsp;[3,5,1,6,2,0,8,null,null,7,4]</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/binarytree.png\" style=\"height: 190px; width: 200px;\"></p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\n<strong>输出:</strong> 3\n<strong>解释: </strong>节点 <code>5 </code>和节点 <code>1 </code>的最近公共祖先是节点 <code>3。</code>\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\n<strong>输出:</strong> 5\n<strong>解释: </strong>节点 <code>5 </code>和节点 <code>4 </code>的最近公共祖先是节点 <code>5。</code>因为根据定义最近公共祖先节点可以为节点本身。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>所有节点的值都是唯一的。</li>\n\t<li>p、q 为不同节点且均存在于给定的二叉树中。</li>\n</ul>\n","implement-stack-using-queues":"<p>使用队列实现栈的下列操作：</p>\n\n<ul>\n\t<li>push(x) -- 元素 x 入栈</li>\n\t<li>pop() -- 移除栈顶元素</li>\n\t<li>top() -- 获取栈顶元素</li>\n\t<li>empty() -- 返回栈是否为空</li>\n</ul>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li>你只能使用队列的基本操作-- 也就是&nbsp;<code>push to back</code>, <code>peek/pop from front</code>, <code>size</code>, 和&nbsp;<code>is empty</code>&nbsp;这些操作是合法的。</li>\n\t<li>你所使用的语言也许不支持队列。&nbsp;你可以使用 list 或者 deque（双端队列）来模拟一个队列&nbsp;, 只要是标准的队列操作即可。</li>\n\t<li>你可以假设所有操作都是有效的（例如, 对一个空的栈不会调用 pop 或者 top 操作）。</li>\n</ul>\n","kth-smallest-element-in-a-bst":"<p>给定一个二叉搜索树，编写一个函数&nbsp;<code>kthSmallest</code>&nbsp;来查找其中第&nbsp;<strong>k&nbsp;</strong>个最小的元素。</p>\n\n<p><strong>说明：</strong><br>\n你可以假设 k 总是有效的，1 &le; k &le; 二叉搜索树元素个数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> root = [3,1,4,null,2], k = 1\n   3\n  / \\\n 1   4\n  \\\n&nbsp;  2\n<strong>输出:</strong> 1</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> root = [5,3,6,2,4,null,null,1], k = 3\n       5\n      / \\\n     3   6\n    / \\\n   2   4\n  /\n 1\n<strong>输出:</strong> 3</pre>\n\n<p><strong>进阶：</strong><br>\n如果二叉搜索树经常被修改（插入/删除操作）并且你需要频繁地查找第 k 小的值，你将如何优化&nbsp;<code>kthSmallest</code>&nbsp;函数？</p>\n","product-of-array-except-self":"<p>给定长度为&nbsp;<em>n</em>&nbsp;的整数数组&nbsp;<code>nums</code>，其中&nbsp;<em>n</em> &gt; 1，返回输出数组&nbsp;<code>output</code>&nbsp;，其中 <code>output[i]</code>&nbsp;等于&nbsp;<code>nums</code>&nbsp;中除&nbsp;<code>nums[i]</code>&nbsp;之外其余各元素的乘积。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> <code>[1,2,3,4]</code>\n<strong>输出:</strong> <code>[24,12,8,6]</code></pre>\n\n<p><strong>说明: </strong>请<strong>不要使用除法，</strong>且在&nbsp;O(<em>n</em>) 时间复杂度内完成此题。</p>\n\n<p><strong>进阶：</strong><br>\n你可以在常数空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组<strong>不被视为</strong>额外空间。）</p>\n","sliding-window-maximum":"<p>给定一个数组 <em>nums</em>，有一个大小为&nbsp;<em>k&nbsp;</em>的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口 <em>k</em> 内的数字。滑动窗口每次只向右移动一位。</p>\n\n<p>返回滑动窗口最大值。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> <em>nums</em> = <code>[1,3,-1,-3,5,3,6,7]</code>, 和 <em>k</em> = 3\n<strong>输出: </strong><code>[3,3,5,5,6,7] \n<strong>解释: \n</strong></code>\n  滑动窗口的位置                最大值\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7</pre>\n\n<p><strong>注意：</strong></p>\n\n<p>你可以假设 <em>k </em>总是有效的，1 &le; k &le;&nbsp;输入数组的大小，且输入数组不为空。</p>\n\n<p><strong>进阶：</strong></p>\n\n<p>你能在线性时间复杂度内解决此题吗？</p>\n","valid-anagram":"<p>给定两个字符串 <em>s</em> 和 <em>t</em> ，编写一个函数来判断 <em>t</em> 是否是 <em>s</em> 的一个字母异位词。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> <em>s</em> = &quot;anagram&quot;, <em>t</em> = &quot;nagaram&quot;\n<strong>输出:</strong> true\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> <em>s</em> = &quot;rat&quot;, <em>t</em> = &quot;car&quot;\n<strong>输出: </strong>false</pre>\n\n<p><strong>说明:</strong><br>\n你可以假设字符串只包含小写字母。</p>\n\n<p><strong>进阶:</strong><br>\n如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？</p>\n","invert-binary-tree":"<p>翻转一棵二叉树。</p>\n\n<p><strong>示例：</strong></p>\n\n<p>输入：</p>\n\n<pre>     4\n   /   \\\n  2     7\n / \\   / \\\n1   3 6   9</pre>\n\n<p>输出：</p>\n\n<pre>     4\n   /   \\\n  7     2\n / \\   / \\\n9   6 3   1</pre>\n\n<p><strong>备注:</strong><br>\n这个问题是受到 <a href=\"https://twitter.com/mxcl\" target=\"_blank\">Max Howell </a>的 <a href=\"https://twitter.com/mxcl/status/608682016205344768\" target=\"_blank\">原问题</a> 启发的 ：</p>\n\n<blockquote>谷歌：我们90％的工程师使用您编写的软件(Homebrew)，但是您却无法在面试时在白板上写出翻转二叉树这道题，这太糟糕了。</blockquote>\n","search-a-2d-matrix-ii":"<p>编写一个高效的算法来搜索&nbsp;<em>m</em>&nbsp;x&nbsp;<em>n</em>&nbsp;矩阵 matrix 中的一个目标值 target。该矩阵具有以下特性：</p>\n\n<ul>\n\t<li>每行的元素从左到右升序排列。</li>\n\t<li>每列的元素从上到下升序排列。</li>\n</ul>\n\n<p><strong>示例:</strong></p>\n\n<p>现有矩阵 matrix 如下：</p>\n\n<pre>[\n  [1,   4,  7, 11, 15],\n  [2,   5,  8, 12, 19],\n  [3,   6,  9, 16, 22],\n  [10, 13, 14, 17, 24],\n  [18, 21, 23, 26, 30]\n]\n</pre>\n\n<p>给定 target&nbsp;=&nbsp;<code>5</code>，返回&nbsp;<code>true</code>。</p>\n\n<p>给定&nbsp;target&nbsp;=&nbsp;<code>20</code>，返回&nbsp;<code>false</code>。</p>\n","power-of-two":"<p>给定一个整数，编写一个函数来判断它是否是 2 的幂次方。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> 1\n<strong>输出:</strong> true\n<strong>解释: </strong>2<sup>0</sup>&nbsp;= 1</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> 16\n<strong>输出:</strong> true\n<strong>解释: </strong>2<sup>4</sup>&nbsp;= 16</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> 218\n<strong>输出:</strong> false</pre>\n","lowest-common-ancestor-of-a-binary-search-tree":"<p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p>\n\n<p><a href=\"https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin\" target=\"_blank\">百度百科</a>中最近公共祖先的定义为：&ldquo;对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。&rdquo;</p>\n\n<p>例如，给定如下二叉搜索树:&nbsp; root =&nbsp;[6,2,8,0,4,7,9,null,null,3,5]</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/binarysearchtree_improved.png\" style=\"height: 190px; width: 200px;\"></p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\n<strong>输出:</strong> 6 \n<strong>解释: </strong>节点 <code>2 </code>和节点 <code>8 </code>的最近公共祖先是 <code>6。</code>\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\n<strong>输出:</strong> 2\n<strong>解释: </strong>节点 <code>2</code> 和节点 <code>4</code> 的最近公共祖先是 <code>2</code>, 因为根据定义最近公共祖先节点可以为节点本身。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>所有节点的值都是唯一的。</li>\n\t<li>p、q 为不同节点且均存在于给定的二叉搜索树中。</li>\n</ul>\n","majority-element-ii":"<p>给定一个大小为&nbsp;<em>n&nbsp;</em>的数组，找出其中所有出现超过&nbsp;<code>&lfloor; n/3 &rfloor;</code>&nbsp;次的元素。</p>\n\n<p><strong>说明: </strong>要求算法的时间复杂度为 O(n)，空间复杂度为 O(1)。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> [3,2,3]\n<strong>输出:</strong> [3]</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [1,1,1,3,3,2,2,2]\n<strong>输出:</strong> [1,2]</pre>\n","shortest-palindrome":"<p>给定一个字符串 <em><strong>s</strong></em>，你可以通过在字符串前面添加字符将其转换为回文串。找到并返回可以用这种方式转换的最短回文串。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入: </strong><code>&quot;aacecaaa&quot;</code>\n<strong>输出:</strong> <code>&quot;aaacecaaa&quot;</code>\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong><code>&quot;abcd&quot;</code>\n<strong>输出:</strong> <code>&quot;dcbabcd&quot;</code></pre>\n","3sum-smaller":null,"flatten-2d-vector":null,"different-ways-to-add-parentheses":"<p>给定一个含有数字和运算符的字符串，为表达式添加括号，改变其运算优先级以求出不同的结果。你需要给出所有可能的组合的结果。有效的运算符号包含 <code>+</code>,&nbsp;<code>-</code>&nbsp;以及&nbsp;<code>*</code>&nbsp;。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> <code>&quot;2-1-1&quot;</code>\n<strong>输出:</strong> <code>[0, 2]</code>\n<strong>解释: </strong>\n((2-1)-1) = 0 \n(2-(1-1)) = 2</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入: </strong><code>&quot;2*3-4*5&quot;</code>\n<strong>输出:</strong> <code>[-34, -14, -10, -10, 10]</code>\n<strong>解释: \n</strong>(2*(3-(4*5))) = -34 \n((2*3)-(4*5)) = -14 \n((2*(3-4))*5) = -10 \n(2*((3-4)*5)) = -10 \n(((2*3)-4)*5) = 10</pre>\n","strobogrammatic-number":null,"count-univalue-subtrees":null,"contains-duplicate":"<p>给定一个整数数组，判断是否存在重复元素。</p>\n\n<p>如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [1,2,3,1]\n<strong>输出:</strong> true</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>[1,2,3,4]\n<strong>输出:</strong> false</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre><strong>输入: </strong>[1,1,1,3,3,4,3,2,4,2]\n<strong>输出:</strong> true</pre>\n","single-number-iii":"<p>给定一个整数数组&nbsp;<code>nums</code>，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。</p>\n\n<p><strong>示例 :</strong></p>\n\n<pre><strong>输入:</strong> <code>[1,2,1,3,2,5]</code>\n<strong>输出:</strong> <code>[3,5]</code></pre>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li>结果输出的顺序并不重要，对于上面的例子，&nbsp;<code>[5, 3]</code>&nbsp;也是正确答案。</li>\n\t<li>你的算法应该具有线性时间复杂度。你能否仅使用常数空间复杂度来实现？</li>\n</ol>\n","paint-house":null,"contains-duplicate-ii":"<p>给定一个整数数组和一个整数&nbsp;<em>k</em>，判断数组中是否存在两个不同的索引<em>&nbsp;i</em>&nbsp;和<em>&nbsp;j</em>，使得&nbsp;<strong>nums [i] = nums [j]</strong>，并且 <em>i</em> 和 <em>j</em>&nbsp;的差的绝对值最大为 <em>k</em>。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> nums = [1,2,3,1], k<em> </em>= 3\n<strong>输出:</strong> true</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>nums = [1,0,1,1], k<em> </em>=<em> </em>1\n<strong>输出:</strong> true</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入: </strong>nums = [1,2,3,1,2,3], k<em> </em>=<em> </em>2\n<strong>输出:</strong> false</pre>\n","number-of-digit-one":"<p>给定一个整数 n，计算所有小于等于 n 的非负整数中数字 1 出现的个数。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> 13\n<strong>输出:</strong> 6 \n<strong>解释: </strong>数字 1 出现在以下数字中: 1, 10, 11, 12, 13 。</pre>\n","verify-preorder-sequence-in-binary-search-tree":null,"shortest-word-distance":null,"factor-combinations":null,"house-robber-ii":"<p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都<strong>围成一圈，</strong>这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong>。</p>\n\n<p>给定一个代表每个房屋存放金额的非负整数数组，计算你<strong>在不触动警报装置的情况下，</strong>能够偷窃到的最高金额。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> [2,3,2]\n<strong>输出:</strong> 3\n<strong>解释:</strong> 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [1,2,3,1]\n<strong>输出:</strong> 4\n<strong>解释:</strong> 你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。\n&nbsp;    偷窃到的最高金额 = 1 + 3 = 4 。</pre>\n","strobogrammatic-number-iii":null,"shortest-word-distance-iii":null,"graph-valid-tree":null,"meeting-rooms-ii":null,"meeting-rooms":null,"binary-tree-paths":"<p>给定一个二叉树，返回所有从根节点到叶子节点的路径。</p>\n\n<p><strong>说明:</strong>&nbsp;叶子节点是指没有子节点的节点。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong>\n\n   1\n /   \\\n2     3\n \\\n  5\n\n<strong>输出:</strong> [&quot;1-&gt;2-&gt;5&quot;, &quot;1-&gt;3&quot;]\n\n<strong>解释:</strong> 所有根节点到叶子节点的路径为: 1-&gt;2-&gt;5, 1-&gt;3</pre>\n","implement-queue-using-stacks":"<p>使用栈实现队列的下列操作：</p>\n\n<ul>\n\t<li>push(x) -- 将一个元素放入队列的尾部。</li>\n\t<li>pop() -- 从队列首部移除元素。</li>\n\t<li>peek() -- 返回队列首部的元素。</li>\n\t<li>empty() -- 返回队列是否为空。</li>\n</ul>\n\n<p><strong>示例:</strong></p>\n\n<pre>MyQueue queue = new MyQueue();\n\nqueue.push(1);\nqueue.push(2);  \nqueue.peek();  // 返回 1\nqueue.pop();   // 返回 1\nqueue.empty(); // 返回 false</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>你只能使用标准的栈操作 -- 也就是只有&nbsp;<code>push to top</code>,&nbsp;<code>peek/pop from top</code>,&nbsp;<code>size</code>, 和&nbsp;<code>is empty</code>&nbsp;操作是合法的。</li>\n\t<li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</li>\n\t<li>假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）。</li>\n</ul>\n","group-shifted-strings":null,"delete-node-in-a-linked-list":"<p>请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。</p>\n\n<p>现有一个链表 --&nbsp;head =&nbsp;[4,5,1,9]，它可以表示为:</p>\n\n<pre>    4 -&gt; 5 -&gt; 1 -&gt; 9\n</pre>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> head = [4,5,1,9], node = 5\n<strong>输出:</strong> [4,1,9]\n<strong>解释: </strong>给定你链表中值为&nbsp;<span style=\"\">5</span>&nbsp;的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> head = [4,5,1,9], node = 1\n<strong>输出:</strong> [4,5,9]\n<strong>解释: </strong>给定你链表中值为&nbsp;1&nbsp;的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>链表至少包含两个节点。</li>\n\t<li>链表中所有节点的值都是唯一的。</li>\n\t<li>给定的节点为非末尾节点并且一定是链表中的一个有效节点。</li>\n\t<li>不要从你的函数中返回任何结果。</li>\n</ul>\n","add-digits":"<p>给定一个非负整数 <code>num</code>，反复将各个位上的数字相加，直到结果为一位数。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> <code>38</code>\n<strong>输出:</strong> 2 \n<strong>解释: </strong>各位相加的过程为<strong>：</strong><code>3 + 8 = 11</code>, <code>1 + 1 = 2</code>。 由于&nbsp;<code>2</code> 是一位数，所以返回 2。\n</pre>\n\n<p><strong>进阶:</strong><br>\n你可以不使用循环或者递归，且在 O(1) 时间复杂度内解决这个问题吗？</p>\n","word-search-ii":"<p>给定一个二维网格&nbsp;<strong>board&nbsp;</strong>和一个字典中的单词列表 <strong>words</strong>，找出所有同时在二维网格和字典中出现的单词。</p>\n\n<p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中&ldquo;相邻&rdquo;单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母在一个单词中不允许被重复使用。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> \n<strong>words</strong> = <code>[&quot;oath&quot;,&quot;pea&quot;,&quot;eat&quot;,&quot;rain&quot;]</code> and <strong>board </strong>=\n[\n  [&#39;<strong>o</strong>&#39;,&#39;<strong>a</strong>&#39;,&#39;a&#39;,&#39;n&#39;],\n  [&#39;e&#39;,&#39;<strong>t</strong>&#39;,&#39;<strong>a</strong>&#39;,&#39;<strong>e</strong>&#39;],\n  [&#39;i&#39;,&#39;<strong>h</strong>&#39;,&#39;k&#39;,&#39;r&#39;],\n  [&#39;i&#39;,&#39;f&#39;,&#39;l&#39;,&#39;v&#39;]\n]\n\n<strong>输出:&nbsp;</strong><code>[&quot;eat&quot;,&quot;oath&quot;]</code></pre>\n\n<p><strong>说明:</strong><br>\n你可以假设所有输入都由小写字母 <code>a-z</code>&nbsp;组成。</p>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li>你需要优化回溯算法以通过更大数据量的测试。你能否早点停止回溯？</li>\n\t<li>如果当前单词不存在于所有单词的前缀中，则可以立即停止回溯。什么样的数据结构可以有效地执行这样的操作？散列表是否可行？为什么？ 前缀树如何？如果你想学习如何实现一个基本的前缀树，请先查看这个问题： <a href=\"/problems/implement-trie-prefix-tree/description/\">实现Trie（前缀树）</a>。</li>\n</ul>\n","kth-largest-element-in-an-array":"<p>在未排序的数组中找到第 <strong>k</strong> 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> <code>[3,2,1,5,6,4] 和</code> k = 2\n<strong>输出:</strong> 5\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> <code>[3,2,3,1,2,4,5,5,6] 和</code> k = 4\n<strong>输出:</strong> 4</pre>\n\n<p><strong>说明: </strong></p>\n\n<p>你可以假设 k 总是有效的，且 1 &le; k &le; 数组的长度。</p>\n","strobogrammatic-number-ii":null,"basic-calculator-ii":"<p>实现一个基本的计算器来计算一个简单的字符串表达式的值。</p>\n\n<p>字符串表达式仅包含非负整数，<code>+</code>， <code>-</code> ，<code>*</code>，<code>/</code> 四种运算符和空格&nbsp;<code>&nbsp;</code>。 整数除法仅保留整数部分。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入: </strong>&quot;3+2*2&quot;\n<strong>输出:</strong> 7\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> &quot; 3/2 &quot;\n<strong>输出:</strong> 1</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> &quot; 3+5 / 2 &quot;\n<strong>输出:</strong> 5\n</pre>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>你可以假设所给定的表达式都是有效的。</li>\n\t<li>请<strong>不要</strong>使用内置的库函数 <code>eval</code>。</li>\n</ul>\n","contains-duplicate-iii":"<p>给定一个整数数组，判断数组中是否有两个不同的索引 <em>i</em> 和 <em>j</em>，使得&nbsp;<strong>nums [i]</strong> 和&nbsp;<strong>nums [j]</strong>&nbsp;的差的绝对值最大为 <em>t</em>，并且 <em>i</em> 和 <em>j</em> 之间的差的绝对值最大为 <em>ķ</em>。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> nums = [1,2,3,1], k<em> </em>= 3, t = 0\n<strong>输出:</strong> true</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>nums = [1,0,1,1], k<em> </em>=<em> </em>1, t = 2\n<strong>输出:</strong> true</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入: </strong>nums = [1,5,9,1,5,9], k = 2, t = 3\n<strong>输出:</strong> false</pre>\n","palindrome-linked-list":"<p>请判断一个链表是否为回文链表。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> 1-&gt;2\n<strong>输出:</strong> false</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> 1-&gt;2-&gt;2-&gt;1\n<strong>输出:</strong> true\n</pre>\n\n<p><strong>进阶：</strong><br>\n你能否用&nbsp;O(n) 时间复杂度和 O(1) 空间复杂度解决此题？</p>\n","basic-calculator":"<p>实现一个基本的计算器来计算一个简单的字符串表达式的值。</p>\n\n<p>字符串表达式可以包含左括号&nbsp;<code>(</code>&nbsp;，右括号&nbsp;<code>)</code>，加号&nbsp;<code>+</code>&nbsp;，减号&nbsp;<code>-</code>，<strong>非负</strong>整数和空格&nbsp;<code>&nbsp;</code>。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> &quot;1 + 1&quot;\n<strong>输出:</strong> 2\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> &quot; 2-1 + 2 &quot;\n<strong>输出:</strong> 3</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> &quot;(1+(4+5+2)-3)+(6+8)&quot;\n<strong>输出:</strong> 23</pre>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>你可以假设所给定的表达式都是有效的。</li>\n\t<li>请<strong>不要</strong>使用内置的库函数 <code>eval</code>。</li>\n</ul>\n","shortest-word-distance-ii":null,"maximal-square":"<p>在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入: \n</strong>\n1 0 1 0 0\n1 0 <strong>1 1</strong> 1\n1 1 <strong>1 1 </strong>1\n1 0 0 1 0\n\n<strong>输出: </strong>4</pre>\n","count-complete-tree-nodes":"<p>给出一个<strong>完全二叉树</strong>，求出该树的节点个数。</p>\n\n<p><strong>说明：</strong></p>\n\n<p><a href=\"https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91/7773232?fr=aladdin\">完全二叉树</a>的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 h 层，则该层包含 1~&nbsp;2<sup>h</sup>&nbsp;个节点。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> \n    1\n   / \\\n  2   3\n / \\  /\n4  5 6\n\n<strong>输出:</strong> 6</pre>\n","summary-ranges":"<p>给定一个无重复元素的有序整数数组，返回数组区间范围的汇总。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [0,1,2,4,5,7]\n<strong>输出:</strong> [&quot;0-&gt;2&quot;,&quot;4-&gt;5&quot;,&quot;7&quot;]\n<strong>解释: </strong>0,1,2 可组成一个连续的区间;&nbsp;4,5 可组成一个连续的区间。</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [0,2,3,4,6,8,9]\n<strong>输出:</strong> [&quot;0&quot;,&quot;2-&gt;4&quot;,&quot;6&quot;,&quot;8-&gt;9&quot;]\n<strong>解释: </strong>2,3,4 可组成一个连续的区间;&nbsp;8,9 可组成一个连续的区间。</pre>\n","rectangle-area":"<p>在<strong>二维</strong>平面上计算出两个<strong>由直线构成的</strong>矩形重叠后形成的总面积。</p>\n\n<p>每个矩形由其左下顶点和右上顶点坐标表示，如图所示。</p>\n\n<p><img alt=\"Rectangle Area\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rectangle_area.png\"></p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> -3, 0, 3, 4, 0, -1, 9, 2\n<strong>输出:</strong> 45</pre>\n\n<p><strong>说明:</strong> 假设矩形面积不会超出&nbsp;<strong>int&nbsp;</strong>的范围。</p>\n","combination-sum-iii":"<p>找出所有相加之和为&nbsp;<em><strong>n</strong> </em>的&nbsp;<strong><em>k&nbsp;</em></strong>个数的组合<strong><em>。</em></strong>组合中只允许含有 1 -&nbsp;9 的正整数，并且每种组合中不存在重复的数字。</p>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>所有数字都是正整数。</li>\n\t<li>解集不能包含重复的组合。&nbsp;</li>\n</ul>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> <em><strong>k</strong></em> = 3, <em><strong>n</strong></em> = 7\n<strong>输出:</strong> [[1,2,4]]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> <em><strong>k</strong></em> = 3, <em><strong>n</strong></em> = 9\n<strong>输出:</strong> [[1,2,6], [1,3,5], [2,3,4]]\n</pre>\n","the-skyline-problem":"<p>城市的天际线是从远处观看该城市中所有建筑物形成的轮廓的外部轮廓。现在，假设您获得了城市风光照片（图A）上<strong>显示的所有建筑物的位置和高度</strong>，请编写一个程序以输出由这些建筑物<strong>形成的天际线</strong>（图B）。</p>\r\n\r\n\r\n<a href=\"/static/images/problemset/skyline1.jpg\" target=\"_blank\"><img alt=\"Buildings\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/skyline1.png\" style=\"max-width: 45%; border-width: 0px; border-style: solid;\" /> </a>  <a href=\"/static/images/problemset/skyline2.jpg\" target=\"_blank\"> <img alt=\"Skyline Contour\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/skyline2.png\" style=\"max-width: 45%; border-width: 0px; border-style: solid;\" /> </a> \r\n\r\n<p>每个建筑物的几何信息用三元组&nbsp;<code>[Li，Ri，Hi]</code> 表示，其中 <code>Li</code> 和 <code>Ri</code> 分别是第 i 座建筑物左右边缘的 x 坐标，<code>Hi</code> 是其高度。可以保证&nbsp;<code>0 &le; Li, Ri &le; INT_MAX</code>,&nbsp;<code>0 &lt; Hi &le; INT_MAX</code> 和 <code>Ri - Li &gt; 0</code>。您可以假设所有建筑物都是在绝对平坦且高度为 0 的表面上的完美矩形。</p>\r\n\r\n<p>例如，图A中所有建筑物的尺寸记录为：<code>[ [2 9 10], [3 7 15], [5 12 12], [15 20 10], [19 24 8] ] </code>。</p>\r\n\r\n<p>输出是以&nbsp;<code>[ [x1,y1], [x2, y2], [x3, y3], ... ]</code> 格式的&ldquo;<strong>关键点</strong>&rdquo;（图B中的红点）的列表，它们唯一地定义了天际线。<strong>关键点是水平线段的左端点</strong>。请注意，最右侧建筑物的最后一个关键点仅用于标记天际线的终点，并始终为零高度。此外，任何两个相邻建筑物之间的地面都应被视为天际线轮廓的一部分。</p>\r\n\r\n<p>例如，图B中的天际线应该表示为：<code>[ [2 10], [3 15], [7 12], [12 0], [15 10], [20 8], [24, 0] ]</code>。</p>\r\n\r\n<p><strong>说明:</strong></p>\r\n\r\n<ul>\r\n\t<li>任何输入列表中的建筑物数量保证在 <code>[0, 10000]</code>&nbsp;范围内。</li>\r\n\t<li>输入列表已经按升序排列在左边的 x 位置 <code>Li</code> 。</li>\r\n\t<li>输出列表必须按 x 位排序。</li>\r\n\t<li>输出天际线中不得有连续的相同高度的水平线。例如 <code>[...[2 3], [4 5], [7 5], [11 5], [12 7]...]</code> 是不正确的答案；三条高度为 5 的线应该在最终输出中合并为一个：<code>[...[2 3], [4 5], [12 7], ...]</code></li>\r\n</ul>","reverse-linked-list":"<p>反转一个单链表。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL\n<strong>输出:</strong> 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</pre>\n\n<p><strong>进阶:</strong><br>\n你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p>\n","excel-sheet-column-number":"<p>给定一个Excel表格中的列名称，返回其相应的列序号。</p>\n\n<p>例如，</p>\n\n<pre>    A -&gt; 1\n    B -&gt; 2\n    C -&gt; 3\n    ...\n    Z -&gt; 26\n    AA -&gt; 27\n    AB -&gt; 28 \n    ...\n</pre>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> &quot;A&quot;\n<strong>输出:</strong> 1\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入: </strong>&quot;AB&quot;\n<strong>输出:</strong> 28\n</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre><strong>输入: </strong>&quot;ZY&quot;\n<strong>输出:</strong> 701</pre>\n\n<p><strong>致谢：</strong><br>\n特别感谢&nbsp;<a href=\"http://leetcode.com/discuss/user/ts\">@ts</a>&nbsp;添加此问题并创建所有测试用例。</p>\n","course-schedule-ii":"<p>现在你总共有 <em>n</em> 门课需要选，记为&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n-1</code>。</p>\n\n<p>在选修某些课程之前需要一些先修课程。&nbsp;例如，想要学习课程 0 ，你需要先完成课程&nbsp;1 ，我们用一个匹配来表示他们: <code>[0,1]</code></p>\n\n<p>给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。</p>\n\n<p>可能会有多个正确的顺序，你只要返回一种就可以了。如果不可能完成所有课程，返回一个空数组。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> 2, [[1,0]] \n<strong>输出: </strong><code>[0,1]</code>\n<strong>解释:</strong>&nbsp;总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 <code>[0,1] 。</code></pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> 4, [[1,0],[2,0],[3,1],[3,2]]\n<strong>输出: </strong><code>[0,1,2,3] or [0,2,1,3]</code>\n<strong>解释:</strong>&nbsp;总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。\n&nbsp;    因此，一个正确的课程顺序是&nbsp;<code>[0,1,2,3]</code> 。另一个正确的排序是&nbsp;<code>[0,2,1,3]</code> 。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>输入的先决条件是由<strong>边缘列表</strong>表示的图形，而不是邻接矩阵。详情请参见<a href=\"http://blog.csdn.net/woaidapaopao/article/details/51732947\" target=\"_blank\">图的表示法</a>。</li>\n\t<li>你可以假定输入的先决条件中没有重复的边。</li>\n</ol>\n\n<p><strong>提示:</strong></p>\n\n<ol>\n\t<li>这个问题相当于查找一个循环是否存在于有向图中。如果存在循环，则不存在拓扑排序，因此不可能选取所有课程进行学习。</li>\n\t<li><a href=\"https://www.coursera.org/specializations/algorithms\" target=\"_blank\">通过 DFS 进行拓扑排序</a> - 一个关于Coursera的精彩视频教程（21分钟），介绍拓扑排序的基本概念。</li>\n\t<li>\n\t<p>拓扑排序也可以通过&nbsp;<a href=\"https://baike.baidu.com/item/%E5%AE%BD%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/5224802?fr=aladdin&amp;fromid=2148012&amp;fromtitle=%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2\" target=\"_blank\">BFS</a>&nbsp;完成。</p>\n\t</li>\n</ol>\n","rotate-array":"<p>给定一个数组，将数组中的元素向右移动&nbsp;<em>k&nbsp;</em>个位置，其中&nbsp;<em>k&nbsp;</em>是非负数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> <code>[1,2,3,4,5,6,7]</code> 和 <em>k</em> = 3\n<strong>输出:</strong> <code>[5,6,7,1,2,3,4]</code>\n<strong>解释:</strong>\n向右旋转 1 步: <code>[7,1,2,3,4,5,6]</code>\n向右旋转 2 步: <code>[6,7,1,2,3,4,5]\n</code>向右旋转 3 步: <code>[5,6,7,1,2,3,4]</code>\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> <code>[-1,-100,3,99]</code> 和 <em>k</em> = 2\n<strong>输出:</strong> [3,99,-1,-100]\n<strong>解释:</strong> \n向右旋转 1 步: [99,-1,-100,3]\n向右旋转 2 步: [3,99,-1,-100]</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。</li>\n\t<li>要求使用空间复杂度为&nbsp;O(1) 的原地算法。</li>\n</ul>\n","tenth-line":"<p>给定一个文本文件&nbsp;<code>file.txt</code>，请只打印这个文件中的第十行。</p>\n\n<p><strong>示例:</strong></p>\n\n<p>假设&nbsp;<code>file.txt</code> 有如下内容：</p>\n\n<pre>Line 1\nLine 2\nLine 3\nLine 4\nLine 5\nLine 6\nLine 7\nLine 8\nLine 9\nLine 10\n</pre>\n\n<p>你的脚本应当显示第十行：</p>\n\n<pre>Line 10\n</pre>\n\n<p><strong>说明:</strong><br>\n1. 如果文件少于十行，你应当输出什么？<br>\n2. 至少有三种不同的解法，请尝试尽可能多的方法来解题。</p>\n","isomorphic-strings":"<p>给定两个字符串&nbsp;<em><strong>s&nbsp;</strong></em>和&nbsp;<strong><em>t</em></strong>，判断它们是否是同构的。</p>\n\n<p>如果&nbsp;<em><strong>s&nbsp;</strong></em>中的字符可以被替换得到&nbsp;<strong><em>t&nbsp;</em></strong>，那么这两个字符串是同构的。</p>\n\n<p>所有出现的字符都必须用另一个字符替换，同时保留字符的顺序。两个字符不能映射到同一个字符上，但字符可以映射自己本身。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> <strong><em>s</em></strong> = <code>&quot;egg&quot;, </code><strong><em>t = </em></strong><code>&quot;add&quot;</code>\n<strong>输出:</strong> true\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> <strong><em>s</em></strong> = <code>&quot;foo&quot;, </code><strong><em>t = </em></strong><code>&quot;bar&quot;</code>\n<strong>输出:</strong> false</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> <strong><em>s</em></strong> = <code>&quot;paper&quot;, </code><strong><em>t = </em></strong><code>&quot;title&quot;</code>\n<strong>输出:</strong> true</pre>\n\n<p><strong>说明:</strong><br>\n你可以假设&nbsp;<em><strong>s&nbsp;</strong></em>和 <strong><em>t </em></strong>具有相同的长度。</p>\n","course-schedule":"<p>现在你总共有 <em>n</em> 门课需要选，记为&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n-1</code>。</p>\n\n<p>在选修某些课程之前需要一些先修课程。&nbsp;例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: <code>[0,1]</code></p>\n\n<p>给定课程总量以及它们的先决条件，判断是否可能完成所有课程的学习？</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> 2, [[1,0]] \n<strong>输出: </strong>true\n<strong>解释:</strong>&nbsp;总共有 2 门课程。学习课程 1 之前，你需要完成课程 0。所以这是可能的。</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> 2, [[1,0],[0,1]]\n<strong>输出: </strong>false\n<strong>解释:</strong>&nbsp;总共有 2 门课程。学习课程 1 之前，你需要先完成​课程 0；并且学习课程 0 之前，你还应先完成课程 1。这是不可能的。</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>输入的先决条件是由<strong>边缘列表</strong>表示的图形，而不是邻接矩阵。详情请参见<a href=\"http://blog.csdn.net/woaidapaopao/article/details/51732947\" target=\"_blank\">图的表示法</a>。</li>\n\t<li>你可以假定输入的先决条件中没有重复的边。</li>\n</ol>\n\n<p><strong>提示:</strong></p>\n\n<ol>\n\t<li>这个问题相当于查找一个循环是否存在于有向图中。如果存在循环，则不存在拓扑排序，因此不可能选取所有课程进行学习。</li>\n\t<li><a href=\"https://www.coursera.org/specializations/algorithms\" target=\"_blank\">通过 DFS 进行拓扑排序</a> - 一个关于Coursera的精彩视频教程（21分钟），介绍拓扑排序的基本概念。</li>\n\t<li>\n\t<p>拓扑排序也可以通过&nbsp;<a href=\"https://baike.baidu.com/item/%E5%AE%BD%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/5224802?fr=aladdin&amp;fromid=2148012&amp;fromtitle=%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2\" target=\"_blank\">BFS</a>&nbsp;完成。</p>\n\t</li>\n</ol>\n","house-robber":"<p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong>。</p>\n\n<p>给定一个代表每个房屋存放金额的非负整数数组，计算你<strong>在不触动警报装置的情况下，</strong>能够偷窃到的最高金额。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [1,2,3,1]\n<strong>输出:</strong> 4\n<strong>解释:</strong> 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。\n&nbsp;    偷窃到的最高金额 = 1 + 3 = 4 。</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [2,7,9,3,1]\n<strong>输出:</strong> 12\n<strong>解释:</strong> 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。\n&nbsp;    偷窃到的最高金额 = 2 + 9 + 1 = 12 。\n</pre>\n","reverse-bits":"<p>颠倒给定的 32 位无符号整数的二进制位。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入:</strong> 00000010100101000001111010011100\n<strong>输出:</strong> 00111001011110000010100101000000\n<strong>解释: </strong>输入的二进制串 <strong>00000010100101000001111010011100 </strong>表示无符号整数<strong> 43261596</strong><strong>，\n</strong>      因此返回 964176192，其二进制表示形式为 <strong>00111001011110000010100101000000</strong>。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>11111111111111111111111111111101\n<strong>输出：</strong>10111111111111111111111111111111\n<strong>解释：</strong>输入的二进制串 <strong>11111111111111111111111111111101</strong> 表示无符号整数 4294967293，\n&nbsp;     因此返回 3221225471 其二进制表示形式为 <strong>10101111110010110010011101101001。</strong></pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</li>\n\t<li>在 Java 中，编译器使用<a href=\"https://baike.baidu.com/item/二进制补码/5295284\" target=\"_blank\">二进制补码</a>记法来表示有符号整数。因此，在上面的&nbsp;<strong>示例 2</strong>&nbsp;中，输入表示有符号整数 <code>-3</code>，输出表示有符号整数 <code>-1073741825</code>。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶</strong>:<br>\n如果多次调用这个函数，你将如何优化你的算法？</p>\n","employees-earning-more-than-their-managers":"<p><code>Employee</code>&nbsp;表包含所有员工，他们的经理也属于员工。每个员工都有一个 Id，此外还有一列对应员工的经理的 Id。</p>\n\n<pre>+----+-------+--------+-----------+\n| Id | Name  | Salary | ManagerId |\n+----+-------+--------+-----------+\n| 1  | Joe   | 70000  | 3         |\n| 2  | Henry | 80000  | 4         |\n| 3  | Sam   | 60000  | NULL      |\n| 4  | Max   | 90000  | NULL      |\n+----+-------+--------+-----------+\n</pre>\n\n<p>给定&nbsp;<code>Employee</code>&nbsp;表，编写一个 SQL 查询，该查询可以获取收入超过他们经理的员工的姓名。在上面的表格中，Joe 是唯一一个收入超过他的经理的员工。</p>\n\n<pre>+----------+\n| Employee |\n+----------+\n| Joe      |\n+----------+\n</pre>\n","combine-two-tables":"<p>表1: <code>Person</code></p>\n\n<pre>+-------------+---------+\n| 列名         | 类型     |\n+-------------+---------+\n| PersonId    | int     |\n| FirstName   | varchar |\n| LastName    | varchar |\n+-------------+---------+\nPersonId 是上表主键\n</pre>\n\n<p>表2: <code>Address</code></p>\n\n<pre>+-------------+---------+\n| 列名         | 类型    |\n+-------------+---------+\n| AddressId   | int     |\n| PersonId    | int     |\n| City        | varchar |\n| State       | varchar |\n+-------------+---------+\nAddressId 是上表主键\n</pre>\n\n<p>&nbsp;</p>\n\n<p>编写一个 SQL 查询，满足条件：无论 person 是否有地址信息，都需要基于上述两表提供&nbsp;person 的以下信息：</p>\n\n<p>&nbsp;</p>\n\n<pre>FirstName, LastName, City, State\n</pre>\n","department-highest-salary":"<p><code>Employee</code> 表包含所有员工信息，每个员工有其对应的&nbsp;Id, salary 和 department Id。</p>\n\n<pre>+----+-------+--------+--------------+\n| Id | Name  | Salary | DepartmentId |\n+----+-------+--------+--------------+\n| 1  | Joe   | 70000  | 1            |\n| 2  | Henry | 80000  | 2            |\n| 3  | Sam   | 60000  | 2            |\n| 4  | Max   | 90000  | 1            |\n+----+-------+--------+--------------+\n</pre>\n\n<p><code>Department</code>&nbsp;表包含公司所有部门的信息。</p>\n\n<pre>+----+----------+\n| Id | Name     |\n+----+----------+\n| 1  | IT       |\n| 2  | Sales    |\n+----+----------+\n</pre>\n\n<p>编写一个 SQL 查询，找出每个部门工资最高的员工。例如，根据上述给定的表格，Max 在 IT 部门有最高工资，Henry 在 Sales 部门有最高工资。</p>\n\n<pre>+------------+----------+--------+\n| Department | Employee | Salary |\n+------------+----------+--------+\n| IT         | Max      | 90000  |\n| Sales      | Henry    | 80000  |\n+------------+----------+--------+\n</pre>\n","add-and-search-word-data-structure-design":"<p>设计一个支持以下两种操作的数据结构：</p>\n\n<pre>void addWord(word)\nbool search(word)\n</pre>\n\n<p>search(word)&nbsp;可以搜索文字或正则表达式字符串，字符串只包含字母&nbsp;<code>.</code>&nbsp;或&nbsp;<code>a-z</code>&nbsp;。&nbsp;<code>.</code> 可以表示任何一个字母。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>addWord(&quot;bad&quot;)\naddWord(&quot;dad&quot;)\naddWord(&quot;mad&quot;)\nsearch(&quot;pad&quot;) -&gt; false\nsearch(&quot;bad&quot;) -&gt; true\nsearch(&quot;.ad&quot;) -&gt; true\nsearch(&quot;b..&quot;) -&gt; true\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<p>你可以假设所有单词都是由小写字母 <code>a-z</code>&nbsp;组成的。</p>\n","word-frequency":"<p>写一个 bash 脚本以统计一个文本文件&nbsp;<code>words.txt</code>&nbsp;中每个单词出现的频率。</p>\n\n<p>为了简单起见，你可以假设：</p>\n\n<ul>\n\t<li><code>words.txt</code>只包括小写字母和&nbsp;<code>&#39; &#39;</code>&nbsp;。</li>\n\t<li>每个单词只由小写字母组成。</li>\n\t<li>单词间由一个或多个空格字符分隔。</li>\n</ul>\n\n<p><strong>示例:</strong></p>\n\n<p>假设 <code>words.txt</code> 内容如下：</p>\n\n<pre>the day is sunny the the\nthe sunny is is\n</pre>\n\n<p>你的脚本应当输出（以词频降序排列）：</p>\n\n<pre>the 4\nis 3\nsunny 2\nday 1\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>不要担心词频相同的单词的排序问题，每个单词出现的频率都是唯一的。</li>\n\t<li>你可以使用一行&nbsp;<a href=\"http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-4.html\">Unix pipes</a>&nbsp;实现吗？</li>\n</ul>\n","best-time-to-buy-and-sell-stock-iv":"<p>给定一个数组，它的第<em> i</em> 个元素是一支给定的股票在第 <em>i </em>天的价格。</p>\n\n<p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 <strong>k</strong> 笔交易。</p>\n\n<p><strong>注意:</strong>&nbsp;你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> [2,4,1], k = 2\n<strong>输出:</strong> 2\n<strong>解释:</strong> 在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [3,2,6,5,0,3], k = 2\n<strong>输出:</strong> 7\n<strong>解释:</strong> 在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。\n&nbsp;    随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。\n</pre>\n","duplicate-emails":"<p>编写一个 SQL 查询，查找&nbsp;<code>Person</code> 表中所有重复的电子邮箱。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>+----+---------+\n| Id | Email   |\n+----+---------+\n| 1  | a@b.com |\n| 2  | c@d.com |\n| 3  | a@b.com |\n+----+---------+\n</pre>\n\n<p>根据以上输入，你的查询应返回以下结果：</p>\n\n<pre>+---------+\n| Email   |\n+---------+\n| a@b.com |\n+---------+\n</pre>\n\n<p><strong>说明：</strong>所有电子邮箱都是小写字母。</p>\n","remove-linked-list-elements":"<p>删除链表中等于给定值&nbsp;<strong><em>val&nbsp;</em></strong>的所有节点。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> 1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, <em><strong>val</strong></em> = 6\n<strong>输出:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5\n</pre>\n","largest-number":"<p>给定一组非负整数，重新排列它们的顺序使之组成一个最大的整数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> <code>[10,2]</code>\n<strong>输出:</strong> <code>210</code></pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> <code>[3,30,34,5,9]</code>\n<strong>输出:</strong> <code>9534330</code></pre>\n\n<p><strong>说明: </strong>输出结果可能非常大，所以你需要返回一个字符串而不是整数。</p>\n","number-of-islands":"<p>给定一个由&nbsp;<code>&#39;1&#39;</code>（陆地）和 <code>&#39;0&#39;</code>（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong>\n11110\n11010\n11000\n00000\n\n<strong>输出:</strong>&nbsp;1\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong>\n11000\n11000\n00100\n00011\n\n<strong>输出: </strong>3\n</pre>\n","valid-phone-numbers":"<p>给定一个包含电话号码列表（一行一个电话号码）的文本文件 <code>file.txt</code>，写一个 bash 脚本输出所有有效的电话号码。</p>\n\n<p>你可以假设一个有效的电话号码必须满足以下两种格式： (xxx) xxx-xxxx 或&nbsp;xxx-xxx-xxxx。（x 表示一个数字）</p>\n\n<p>你也可以假设每行前后没有多余的空格字符。</p>\n\n<p><strong>示例:</strong></p>\n\n<p>假设&nbsp;<code>file.txt</code>&nbsp;内容如下：</p>\n\n<pre>987-123-4567\n123 456 7890\n(123) 456-7890\n</pre>\n\n<p>你的脚本应当输出下列有效的电话号码：</p>\n\n<pre>987-123-4567\n(123) 456-7890\n</pre>\n","count-primes":"<p>统计所有小于非负整数&nbsp;<em>n&nbsp;</em>的质数的数量。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> 10\n<strong>输出:</strong> 4\n<strong>解释:</strong> 小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。\n</pre>\n","repeated-dna-sequences":"<p>所有 DNA 由一系列缩写为 A，C，G 和 T 的核苷酸组成，例如：&ldquo;ACGAATTCCG&rdquo;。在研究 DNA 时，识别 DNA 中的重复序列有时会对研究非常有帮助。</p>\n\n<p>编写一个函数来查找 DNA 分子中所有出现超多一次的10个字母长的序列（子串）。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> s = &quot;AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT&quot;\n\n<strong>输出:</strong> [&quot;AAAAACCCCC&quot;, &quot;CCCCCAAAAA&quot;]</pre>\n","excel-sheet-column-title":"<p>给定一个正整数，返回它在 Excel 表中相对应的列名称。</p>\n\n<p>例如，</p>\n\n<pre>    1 -&gt; A\n    2 -&gt; B\n    3 -&gt; C\n    ...\n    26 -&gt; Z\n    27 -&gt; AA\n    28 -&gt; AB \n    ...\n</pre>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> 1\n<strong>输出:</strong> &quot;A&quot;\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> 28\n<strong>输出:</strong> &quot;AB&quot;\n</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre><strong>输入:</strong> 701\n<strong>输出:</strong> &quot;ZY&quot;\n</pre>\n","number-of-1-bits":"<p>编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 &lsquo;1&rsquo;&nbsp;的个数（也被称为<a href=\"https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E9%87%8D%E9%87%8F\" target=\"_blank\">汉明重量</a>）。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>00000000000000000000000000001011\n<strong>输出：</strong>3\n<strong>解释：</strong>输入的二进制串 <code><strong>00000000000000000000000000001011</strong>&nbsp;中，共有三位为 &#39;1&#39;。</code>\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>00000000000000000000000010000000\n<strong>输出：</strong>1\n<strong>解释：</strong>输入的二进制串 <strong>00000000000000000000000010000000</strong>&nbsp;中，共有一位为 &#39;1&#39;。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>11111111111111111111111111111101\n<strong>输出：</strong>31\n<strong>解释：</strong>输入的二进制串 <strong>11111111111111111111111111111101</strong> 中，共有 31 位为 &#39;1&#39;。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</li>\n\t<li>在 Java 中，编译器使用<a href=\"https://baike.baidu.com/item/二进制补码/5295284\" target=\"_blank\">二进制补码</a>记法来表示有符号整数。因此，在上面的&nbsp;<strong>示例 3</strong>&nbsp;中，输入表示有符号整数 <code>-3</code>。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶</strong>:<br>\n如果多次调用这个函数，你将如何优化你的算法？</p>\n","fraction-to-recurring-decimal":"<p>给定两个整数，分别表示分数的分子&nbsp;numerator 和分母 denominator，以字符串形式返回小数。</p>\n\n<p>如果小数部分为循环小数，则将循环的部分括在括号内。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> numerator = 1, denominator = 2\n<strong>输出:</strong> &quot;0.5&quot;\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> numerator = 2, denominator = 1\n<strong>输出:</strong> &quot;2&quot;</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre><strong>输入:</strong> numerator = 2, denominator = 3\n<strong>输出: </strong>&quot;0.(6)&quot;\n</pre>\n","minimum-size-subarray-sum":"<p>给定一个含有&nbsp;<strong>n&nbsp;</strong>个正整数的数组和一个正整数&nbsp;<strong>s ，</strong>找出该数组中满足其和<strong> &ge; s </strong>的长度最小的连续子数组<strong>。</strong>如果不存在符合条件的连续子数组，返回 0。</p>\n\n<p><strong>示例:&nbsp;</strong></p>\n\n<pre><strong>输入:</strong> <code>s = 7, nums = [2,3,1,2,4,3]</code>\n<strong>输出:</strong> 2\n<strong>解释: </strong>子数组&nbsp;<code>[4,3]</code>&nbsp;是该条件下的长度最小的连续子数组。\n</pre>\n\n<p><strong>进阶:</strong></p>\n\n<p>如果你已经完成了<em>O</em>(<em>n</em>) 时间复杂度的解法, 请尝试&nbsp;<em>O</em>(<em>n</em> log <em>n</em>) 时间复杂度的解法。</p>\n","implement-trie-prefix-tree":"<p>实现一个 Trie (前缀树)，包含&nbsp;<code>insert</code>,&nbsp;<code>search</code>, 和&nbsp;<code>startsWith</code>&nbsp;这三个操作。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>Trie trie = new Trie();\n\ntrie.insert(&quot;apple&quot;);\ntrie.search(&quot;apple&quot;);   // 返回 true\ntrie.search(&quot;app&quot;);     // 返回 false\ntrie.startsWith(&quot;app&quot;); // 返回 true\ntrie.insert(&quot;app&quot;);   \ntrie.search(&quot;app&quot;);     // 返回 true</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>你可以假设所有的输入都是由小写字母&nbsp;<code>a-z</code>&nbsp;构成的。</li>\n\t<li>保证所有输入均为非空字符串。</li>\n</ul>\n","two-sum-ii-input-array-is-sorted":"<p>给定一个已按照<strong><em>升序排列</em>&nbsp;</strong>的有序数组，找到两个数使得它们相加之和等于目标数。</p>\n\n<p>函数应该返回这两个下标值<em> </em>index1 和 index2，其中 index1&nbsp;必须小于&nbsp;index2<em>。</em></p>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>返回的下标值（index1 和 index2）不是从零开始的。</li>\n\t<li>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</li>\n</ul>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> numbers = [2, 7, 11, 15], target = 9\n<strong>输出:</strong> [1,2]\n<strong>解释:</strong> 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。</pre>\n","binary-tree-right-side-view":"<p>给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong>&nbsp;[1,2,3,null,5,null,4]\n<strong>输出:</strong>&nbsp;[1, 3, 4]\n<strong>解释:\n</strong>\n   1            &lt;---\n /   \\\n2     3         &lt;---\n \\     \\\n  5     4       &lt;---\n</pre>\n","compare-version-numbers":"<p>比较两个版本号 <em>version1&nbsp;</em>和 <em>version2</em>。<br>\n如果&nbsp;<code><em>version1&nbsp;</em>&gt;&nbsp;<em>version2</em></code>&nbsp;返回&nbsp;<code>1</code>，如果&nbsp;<code><em>version1&nbsp;</em>&lt;&nbsp;<em>version2</em></code> 返回 <code>-1</code>， 除此之外返回 <code>0</code>。</p>\n\n<p>你可以假设版本字符串非空，并且只包含数字和&nbsp;<code>.</code> 字符。</p>\n\n<p>&nbsp;<code>.</code> 字符不代表小数点，而是用于分隔数字序列。</p>\n\n<p>例如，<code>2.5</code> 不是&ldquo;两个半&rdquo;，也不是&ldquo;差一半到三&rdquo;，而是第二版中的第五个小版本。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> <code><em>version1</em></code> = &quot;0.1&quot;, <code><em>version2</em></code> = &quot;1.1&quot;\n<strong>输出:</strong> -1</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong><code><em>version1</em></code> = &quot;1.0.1&quot;, <code><em>version2</em></code> = &quot;1&quot;\n<strong>输出:</strong> 1</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> <code><em>version1</em></code> = &quot;7.5.2.4&quot;, <code><em>version2</em></code> = &quot;7.5.3&quot;\n<strong>输出:</strong> -1</pre>\n","majority-element":"<p>给定一个大小为 <em>n </em>的数组，找到其中的众数。众数是指在数组中出现次数<strong>大于</strong>&nbsp;<code>&lfloor; n/2 &rfloor;</code>&nbsp;的元素。</p>\n\n<p>你可以假设数组是非空的，并且给定的数组总是存在众数。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> [3,2,3]\n<strong>输出:</strong> 3</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> [2,2,1,1,1,2,2]\n<strong>输出:</strong> 2\n</pre>\n","delete-duplicate-emails":"<p>编写一个 SQL 查询，来删除&nbsp;<code>Person</code>&nbsp;表中所有重复的电子邮箱，重复的邮箱里只保留&nbsp;<strong>Id&nbsp;</strong><em>最小&nbsp;</em>的那个。</p>\n\n<pre>+----+------------------+\n| Id | Email            |\n+----+------------------+\n| 1  | john@example.com |\n| 2  | bob@example.com  |\n| 3  | john@example.com |\n+----+------------------+\nId 是这个表的主键。\n</pre>\n\n<p>例如，在运行你的查询语句之后，上面的 <code>Person</code> 表应返回以下几行:</p>\n\n<pre>+----+------------------+\n| Id | Email            |\n+----+------------------+\n| 1  | john@example.com |\n| 2  | bob@example.com  |\n+----+------------------+\n</pre>\n","reverse-words-in-a-string-ii":null,"dungeon-game":"<style>\r\ntable.dungeon, .dungeon th, .dungeon td {\r\n  border:3px solid black;\r\n}\r\n\r\n .dungeon th, .dungeon td {\r\n    text-align: center;\r\n    height: 70px;\r\n    width: 70px;\r\n}\r\n</style>\r\n\r\n<p>一些恶魔抓住了公主（<strong>P</strong>）并将她关在了地下城的右下角。地下城是由&nbsp;M x N 个房间组成的二维网格。我们英勇的骑士（<strong>K</strong>）最初被安置在左上角的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主。</p>\r\n\r\n<p>骑士的初始健康点数为一个正整数。如果他的健康点数在某一时刻降至 0 或以下，他会立即死亡。</p>\r\n\r\n<p>有些房间由恶魔守卫，因此骑士在进入这些房间时会失去健康点数（若房间里的值为<em>负整数</em>，则表示骑士将损失健康点数）；其他房间要么是空的（房间里的值为 <em>0</em>），要么包含增加骑士健康点数的魔法球（若房间里的值为<em>正整数</em>，则表示骑士将增加健康点数）。</p>\r\n\r\n<p>为了尽快到达公主，骑士决定每次只向右或向下移动一步。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>编写一个函数来计算确保骑士能够拯救到公主所需的最低初始健康点数。</strong></p>\r\n\r\n<p>例如，考虑到如下布局的地下城，如果骑士遵循最佳路径 <code>右 -&gt; 右 -&gt; 下 -&gt; 下</code>，则骑士的初始健康点数至少为 <strong>7</strong>。</p>\r\n\r\n<table class=\"dungeon\">\r\n<tr> \r\n<td>-2 (K)</td> \r\n<td>-3</td> \r\n<td>3</td> \r\n</tr> \r\n<tr> \r\n<td>-5</td> \r\n<td>-10</td> \r\n<td>1</td> \r\n</tr> \r\n<tr> \r\n<td>10</td> \r\n<td>30</td> \r\n<td>-5 (P)</td> \r\n</tr> \r\n</table>\r\n<!---2K   -3  3\r\n-5   -10   1\r\n10 30   5P-->\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>说明:</strong></p>\r\n\r\n<ul>\r\n\t<li>\r\n\t<p>骑士的健康点数没有上限。</p>\r\n\t</li>\r\n\t<li>任何房间都可能对骑士的健康点数造成威胁，也可能增加骑士的健康点数，包括骑士进入的左上角房间以及公主被监禁的右下角房间。</li>\r\n</ul>","bitwise-and-of-numbers-range":"<p>给定范围 [m, n]，其中 0 &lt;= m &lt;= n &lt;= 2147483647，返回此范围内所有数字的按位与（包含 m, n 两端点）。</p>\n\n<p><strong>示例 1:&nbsp;</strong></p>\n\n<pre><strong>输入:</strong> [5,7]\n<strong>输出:</strong> 4</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [0,1]\n<strong>输出:</strong> 0</pre>\n","happy-number":"<p>编写一个算法来判断一个数是不是&ldquo;快乐数&rdquo;。</p>\n\n<p>一个&ldquo;快乐数&rdquo;定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。</p>\n\n<p><strong>示例:&nbsp;</strong></p>\n\n<pre><strong>输入:</strong> 19\n<strong>输出:</strong> true\n<strong>解释: \n</strong>1<sup>2</sup> + 9<sup>2</sup> = 82\n8<sup>2</sup> + 2<sup>2</sup> = 68\n6<sup>2</sup> + 8<sup>2</sup> = 100\n1<sup>2</sup> + 0<sup>2</sup> + 0<sup>2</sup> = 1\n</pre>\n","consecutive-numbers":"<p>编写一个 SQL 查询，查找所有至少连续出现三次的数字。</p>\n\n<pre>+----+-----+\n| Id | Num |\n+----+-----+\n| 1  |  1  |\n| 2  |  1  |\n| 3  |  1  |\n| 4  |  2  |\n| 5  |  1  |\n| 6  |  2  |\n| 7  |  2  |\n+----+-----+\n</pre>\n\n<p>例如，给定上面的 <code>Logs</code> 表， <code>1</code> 是唯一连续出现至少三次的数字。</p>\n\n<pre>+-----------------+\n| ConsecutiveNums |\n+-----------------+\n| 1               |\n+-----------------+\n</pre>\n","rank-scores":"<p>编写一个 SQL 查询来实现分数排名。如果两个分数相同，则两个分数排名（Rank）相同。请注意，平分后的下一个名次应该是下一个连续的整数值。换句话说，名次之间不应该有&ldquo;间隔&rdquo;。</p>\n\n<pre>+----+-------+\n| Id | Score |\n+----+-------+\n| 1  | 3.50  |\n| 2  | 3.65  |\n| 3  | 4.00  |\n| 4  | 3.85  |\n| 5  | 4.00  |\n| 6  | 3.65  |\n+----+-------+\n</pre>\n\n<p>例如，根据上述给定的&nbsp;<code>Scores</code> 表，你的查询应该返回（按分数从高到低排列）：</p>\n\n<pre>+-------+------+\n| Score | Rank |\n+-------+------+\n| 4.00  | 1    |\n| 4.00  | 1    |\n| 3.85  | 2    |\n|&nbsp;3.65  | 3    |\n| 3.65  | 3    |\n| 3.50  | 4    |\n+-------+------+\n</pre>\n","department-top-three-salaries":"<p><code>Employee</code> 表包含所有员工信息，每个员工有其对应的&nbsp;Id, salary 和 department Id 。</p>\n\n<pre>+----+-------+--------+--------------+\n| Id | Name  | Salary | DepartmentId |\n+----+-------+--------+--------------+\n| 1  | Joe   | 70000  | 1            |\n| 2  | Henry | 80000  | 2            |\n| 3  | Sam   | 60000  | 2            |\n| 4  | Max   | 90000  | 1            |\n| 5  | Janet | 69000  | 1            |\n| 6  | Randy | 85000  | 1            |\n+----+-------+--------+--------------+\n</pre>\n\n<p><code>Department</code> 表包含公司所有部门的信息。</p>\n\n<pre>+----+----------+\n| Id | Name     |\n+----+----------+\n| 1  | IT       |\n| 2  | Sales    |\n+----+----------+\n</pre>\n\n<p>编写一个&nbsp;SQL 查询，找出每个部门工资前三高的员工。例如，根据上述给定的表格，查询结果应返回：</p>\n\n<pre>+------------+----------+--------+\n| Department | Employee | Salary |\n+------------+----------+--------+\n| IT         | Max      | 90000  |\n| IT         | Randy    | 85000  |\n| IT         | Joe      | 70000  |\n| Sales      | Henry    | 80000  |\n| Sales      | Sam      | 60000  |\n+------------+----------+--------+\n</pre>\n","second-highest-salary":"<p>编写一个 SQL 查询，获取 <code>Employee</code>&nbsp;表中第二高的薪水（Salary）&nbsp;。</p>\n\n<pre>+----+--------+\n| Id | Salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+\n</pre>\n\n<p>例如上述&nbsp;<code>Employee</code>&nbsp;表，SQL查询应该返回&nbsp;<code>200</code> 作为第二高的薪水。如果不存在第二高的薪水，那么查询应返回 <code>null</code>。</p>\n\n<pre>+---------------------+\n| SecondHighestSalary |\n+---------------------+\n| 200                 |\n+---------------------+\n</pre>\n","two-sum-iii-data-structure-design":null,"find-peak-element":"<p>峰值元素是指其值大于左右相邻值的元素。</p>\n\n<p>给定一个输入数组&nbsp;<code>nums</code>，其中 <code>nums[i] &ne; nums[i+1]</code>，找到峰值元素并返回其索引。</p>\n\n<p>数组可能包含多个峰值，在这种情况下，返回任何一个峰值所在位置即可。</p>\n\n<p>你可以假设&nbsp;<code>nums[-1] = nums[n] = -&infin;</code>。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> <strong>nums</strong> = <code>[1,2,3,1]</code>\n<strong>输出:</strong> 2\n<strong>解释: </strong>3 是峰值元素，你的函数应该返回其索引 2。</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> <strong>nums</strong> = <code>[</code>1,2,1,3,5,6,4]\n<strong>输出:</strong> 1 或 5 \n<strong>解释:</strong> 你的函数可以返回索引 1，其峰值元素为 2；\n&nbsp;    或者返回索引 5， 其峰值元素为 6。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<p>你的解法应该是&nbsp;<em>O</em>(<em>logN</em>)<em>&nbsp;</em>时间复杂度的。</p>\n","rising-temperature":"<p>给定一个 <code>Weather</code> 表，编写一个 SQL 查询，来查找与之前（昨天的）日期相比温度更高的所有日期的 Id。</p>\n\n<pre>+---------+------------------+------------------+\n| Id(INT) | RecordDate(DATE) | Temperature(INT) |\n+---------+------------------+------------------+\n|       1 |       2015-01-01 |               10 |\n|       2 |       2015-01-02 |               25 |\n|       3 |       2015-01-03 |               20 |\n|       4 |       2015-01-04 |               30 |\n+---------+------------------+------------------+</pre>\n\n<p>例如，根据上述给定的 <code>Weather</code> 表格，返回如下 Id:</p>\n\n<pre>+----+\n| Id |\n+----+\n|  2 |\n|  4 |\n+----+</pre>\n","missing-ranges":null,"customers-who-never-order":"<p>某网站包含两个表，<code>Customers</code> 表和 <code>Orders</code> 表。编写一个 SQL 查询，找出所有从不订购任何东西的客户。</p>\n\n<p><code>Customers</code> 表：</p>\n\n<pre>+----+-------+\n| Id | Name  |\n+----+-------+\n| 1  | Joe   |\n| 2  | Henry |\n| 3  | Sam   |\n| 4  | Max   |\n+----+-------+\n</pre>\n\n<p><code>Orders</code> 表：</p>\n\n<pre>+----+------------+\n| Id | CustomerId |\n+----+------------+\n| 1  | 3          |\n| 2  | 1          |\n+----+------------+\n</pre>\n\n<p>例如给定上述表格，你的查询应返回：</p>\n\n<pre>+-----------+\n| Customers |\n+-----------+\n| Henry     |\n| Max       |\n+-----------+\n</pre>\n","factorial-trailing-zeroes":"<p>给定一个整数 <em>n</em>，返回 <em>n</em>! 结果尾数中零的数量。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> 3\n<strong>输出:</strong> 0\n<strong>解释:</strong>&nbsp;3! = 6, 尾数中没有零。</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> 5\n<strong>输出:</strong> 1\n<strong>解释:</strong>&nbsp;5! = 120, 尾数中有 1 个零.</pre>\n\n<p><strong>说明: </strong>你算法的时间复杂度应为&nbsp;<em>O</em>(log&nbsp;<em>n</em>)<em>&nbsp;</em>。</p>\n","maximum-gap":"<p>给定一个无序的数组，找出数组在排序之后，相邻元素之间最大的差值。</p>\n\n<p>如果数组元素个数小于 2，则返回 0。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> [3,6,9,1]\n<strong>输出:</strong> 3\n<strong>解释:</strong> 排序后的数组是 [1,3,6,9]<strong><em>, </em></strong>其中相邻元素 (3,6) 和 (6,9) 之间都存在最大差值 3。</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> [10]\n<strong>输出:</strong> 0\n<strong>解释:</strong> 数组元素个数小于 2，因此返回 0。</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>你可以假设数组中所有元素都是非负整数，且数值在 32 位有符号整数范围内。</li>\n\t<li>请尝试在线性时间复杂度和空间复杂度的条件下解决此问题。</li>\n</ul>\n","transpose-file":"<p>给定一个文件&nbsp;<code>file.txt</code>，转置它的内容。</p>\n\n<p>你可以假设每行列数相同，并且每个字段由&nbsp;<code>&#39; &#39;</code> 分隔.</p>\n\n<p><strong>示例:</strong></p>\n\n<p>假设&nbsp;<code>file.txt</code>&nbsp;文件内容如下：</p>\n\n<pre>name age\nalice 21\nryan 30\n</pre>\n\n<p>应当输出：</p>\n\n<pre>name alice ryan\nage 21 30\n</pre>\n","binary-search-tree-iterator":"<p>实现一个二叉搜索树迭代器。你将使用二叉搜索树的根节点初始化迭代器。</p>\n\n<p>调用 <code>next()</code> 将返回二叉搜索树中的下一个最小的数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/25/bst-tree.png\" style=\"height: 178px; width: 189px;\"></strong></p>\n\n<pre>BSTIterator iterator = new BSTIterator(root);\niterator.next();    // 返回 3\niterator.next();    // 返回 7\niterator.hasNext(); // 返回 true\niterator.next();    // 返回 9\niterator.hasNext(); // 返回 true\niterator.next();    // 返回 15\niterator.hasNext(); // 返回 true\niterator.next();    // 返回 20\niterator.hasNext(); // 返回 false</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>next()</code>&nbsp;和&nbsp;<code>hasNext()</code>&nbsp;操作的时间复杂度是&nbsp;O(1)，并使用&nbsp;O(<em>h</em>) 内存，其中&nbsp;<em>h&nbsp;</em>是树的高度。</li>\n\t<li>你可以假设&nbsp;<code>next()</code>&nbsp;调用总是有效的，也就是说，当调用 <code>next()</code>&nbsp;时，BST 中至少存在一个下一个最小的数。</li>\n</ul>\n","nth-highest-salary":"<p>编写一个 SQL 查询，获取 <code>Employee</code> 表中第&nbsp;<em>n&nbsp;</em>高的薪水（Salary）。</p>\n\n<pre>+----+--------+\n| Id | Salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+\n</pre>\n\n<p>例如上述&nbsp;<code>Employee</code>&nbsp;表，<em>n = 2&nbsp;</em>时，应返回第二高的薪水&nbsp;<code>200</code>。如果不存在第&nbsp;<em>n&nbsp;</em>高的薪水，那么查询应返回&nbsp;<code>null</code>。</p>\n\n<pre>+------------------------+\n| getNthHighestSalary(2) |\n+------------------------+\n| 200                    |\n+------------------------+\n</pre>\n","insertion-sort-list":"<p>对链表进行插入排序。</p>\n\n<p><img alt=\"\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0f/Insertion-sort-example-300px.gif\"><br>\n<small>插入排序的动画演示如上。从第一个元素开始，该链表可以被认为已经部分排序（用黑色表示）。<br>\n每次迭代时，从输入数据中移除一个元素（用红色表示），并原地将其插入到已排好序的链表中。</small></p>\n\n<p>&nbsp;</p>\n\n<p><strong>插入排序算法：</strong></p>\n\n<ol>\n\t<li>插入排序是迭代的，每次只移动一个元素，直到所有元素可以形成一个有序的输出列表。</li>\n\t<li>每次迭代中，插入排序只从输入数据中移除一个待排序的元素，找到它在序列中适当的位置，并将其插入。</li>\n\t<li>重复直到所有输入数据插入完为止。</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入:</strong> 4-&gt;2-&gt;1-&gt;3\n<strong>输出:</strong> 1-&gt;2-&gt;3-&gt;4\n</pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre><strong>输入:</strong> -1-&gt;5-&gt;3-&gt;4-&gt;0\n<strong>输出:</strong> -1-&gt;0-&gt;3-&gt;4-&gt;5\n</pre>\n","maximum-product-subarray":"<p>给定一个整数数组 <code>nums</code>&nbsp;，找出一个序列中乘积最大的连续子序列（该序列至少包含一个数）。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [2,3,-2,4]\n<strong>输出:</strong> <code>6</code>\n<strong>解释:</strong>&nbsp;子数组 [2,3] 有最大乘积 6。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [-2,0,-1]\n<strong>输出:</strong> 0\n<strong>解释:</strong>&nbsp;结果不能为 2, 因为 [-2,-1] 不是子数组。</pre>\n","binary-tree-preorder-traversal":"<p>给定一个二叉树，返回它的&nbsp;<em>前序&nbsp;</em>遍历。</p>\n\n<p>&nbsp;<strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [1,null,2,3]  \n   1\n    \\\n     2\n    /\n   3 \n\n<strong>输出:</strong> [1,2,3]\n</pre>\n\n<p><strong>进阶:</strong>&nbsp;递归算法很简单，你可以通过迭代算法完成吗？</p>\n","find-minimum-in-rotated-sorted-array":"<p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p>\n\n<p>( 例如，数组&nbsp;<code>[0,1,2,4,5,6,7]</code> <strong> </strong>可能变为&nbsp;<code>[4,5,6,7,0,1,2]</code>&nbsp;)。</p>\n\n<p>请找出其中最小的元素。</p>\n\n<p>你可以假设数组中不存在重复元素。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [3,4,5,1,2]\n<strong>输出:</strong> 1</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [4,5,6,7,0,1,2]\n<strong>输出:</strong> 0</pre>\n","intersection-of-two-linked-lists":"<p>编写一个程序，找到两个单链表相交的起始节点。</p>\n\n<p>如下面的两个链表<strong>：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png\" style=\"height: 130px; width: 400px;\"></p>\n\n<p>在节点 c1 开始相交。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><a href=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png\" target=\"_blank\"><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_1.png\" style=\"height: 130px; width: 400px;\"></a></p>\n\n<pre><strong>输入：</strong>intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3\n<strong>输出：</strong>Reference of the node with value = 8\n<strong>输入解释：</strong>相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<p><a href=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png\" target=\"_blank\"><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_2.png\" style=\"height: 136px; width: 350px;\"></a></p>\n\n<pre><strong>输入：</strong>intersectVal&nbsp;= 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\n<strong>输出：</strong>Reference of the node with value = 2\n<strong>输入解释：</strong>相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;3：</strong></p>\n\n<p><a href=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png\" target=\"_blank\"><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_3.png\" style=\"height: 126px; width: 200px;\"></a></p>\n\n<pre><strong>输入：</strong>intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\n<strong>输出：</strong>null\n<strong>输入解释：</strong>从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。\n<strong>解释：</strong>这两个链表不相交，因此返回 null。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li>如果两个链表没有交点，返回 <code>null</code>.</li>\n\t<li>在返回结果后，两个链表仍须保持原有的结构。</li>\n\t<li>可假定整个链表结构中没有循环。</li>\n\t<li>程序尽量满足 O(<em>n</em>) 时间复杂度，且仅用 O(<em>1</em>) 内存。</li>\n</ul>\n","linked-list-cycle":"<p>给定一个链表，判断链表中是否有环。</p>\n\n<p>为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>head = [3,2,0,-4], pos = 1\n<strong>输出：</strong>true\n<strong>解释：</strong>链表中有一个环，其尾部连接到第二个节点。\n</pre>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png\" style=\"height: 97px; width: 300px;\"></p>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre><strong>输入：</strong>head = [1,2], pos = 0\n<strong>输出：</strong>true\n<strong>解释：</strong>链表中有一个环，其尾部连接到第一个节点。\n</pre>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png\" style=\"height: 74px; width: 141px;\"></p>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>head = [1], pos = -1\n<strong>输出：</strong>false\n<strong>解释：</strong>链表中没有环。\n</pre>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png\" style=\"height: 45px; width: 45px;\"></p>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶：</strong></p>\n\n<p>你能用 <em>O(1)</em>（即，常量）内存解决此问题吗？</p>\n","find-minimum-in-rotated-sorted-array-ii":"<p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p>\n\n<p>( 例如，数组&nbsp;<code>[0,1,2,4,5,6,7]</code> <strong> </strong>可能变为&nbsp;<code>[4,5,6,7,0,1,2]</code>&nbsp;)。</p>\n\n<p>请找出其中最小的元素。</p>\n\n<p>注意数组中可能存在重复的元素。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入:</strong> [1,3,5]\n<strong>输出:</strong> 1</pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre><strong>输入:</strong> [2,2,2,0,1]\n<strong>输出:</strong> 0</pre>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>这道题是&nbsp;<a href=\"https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/description/\">寻找旋转排序数组中的最小值</a>&nbsp;的延伸题目。</li>\n\t<li>允许重复会影响算法的时间复杂度吗？会如何影响，为什么？</li>\n</ul>\n","word-break":"<p>给定一个<strong>非空</strong>字符串 <em>s</em> 和一个包含<strong>非空</strong>单词列表的字典 <em>wordDict</em>，判定&nbsp;<em>s</em> 是否可以被空格拆分为一个或多个在字典中出现的单词。</p>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>拆分时可以重复使用字典中的单词。</li>\n\t<li>你可以假设字典中没有重复的单词。</li>\n</ul>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入:</strong> s = &quot;leetcode&quot;, wordDict = [&quot;leet&quot;, &quot;code&quot;]\n<strong>输出:</strong> true\n<strong>解释:</strong> 返回 true 因为 &quot;leetcode&quot; 可以被拆分成 &quot;leet code&quot;。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入:</strong> s = &quot;applepenapple&quot;, wordDict = [&quot;apple&quot;, &quot;pen&quot;]\n<strong>输出:</strong> true\n<strong>解释:</strong> 返回 true 因为 <code>&quot;</code>applepenapple<code>&quot;</code> 可以被拆分成 <code>&quot;</code>apple pen apple<code>&quot;</code>。\n&nbsp;    注意你可以重复使用字典中的单词。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入:</strong> s = &quot;catsandog&quot;, wordDict = [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]\n<strong>输出:</strong> false\n</pre>\n","sort-list":"<p>在&nbsp;<em>O</em>(<em>n</em>&nbsp;log&nbsp;<em>n</em>) 时间复杂度和常数级空间复杂度下，对链表进行排序。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> 4-&gt;2-&gt;1-&gt;3\n<strong>输出:</strong> 1-&gt;2-&gt;3-&gt;4\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> -1-&gt;5-&gt;3-&gt;4-&gt;0\n<strong>输出:</strong> -1-&gt;0-&gt;3-&gt;4-&gt;5</pre>\n","linked-list-cycle-ii":"<p>给定一个链表，返回链表开始入环的第一个节点。&nbsp;如果链表无环，则返回&nbsp;<code>null</code>。</p>\n\n<p>为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。</p>\n\n<p><strong>说明：</strong>不允许修改给定的链表。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>head = [3,2,0,-4], pos = 1\n<strong>输出：</strong>tail connects to node index 1\n<strong>解释：</strong>链表中有一个环，其尾部连接到第二个节点。\n</pre>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png\" style=\"height: 97px; width: 300px;\"></p>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre><strong>输入：</strong>head = [1,2], pos = 0\n<strong>输出：</strong>tail connects to node index 0\n<strong>解释：</strong>链表中有一个环，其尾部连接到第一个节点。\n</pre>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png\" style=\"height: 74px; width: 141px;\"></p>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>head = [1], pos = -1\n<strong>输出：</strong>no cycle\n<strong>解释：</strong>链表中没有环。\n</pre>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png\" style=\"height: 45px; width: 45px;\"></p>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶：</strong><br>\n你是否可以不用额外空间解决此题？</p>\n","populating-next-right-pointers-in-each-node-ii":"<p>给定一个二叉树</p>\n\n<pre>struct TreeLinkNode {\n  TreeLinkNode *left;\n  TreeLinkNode *right;\n  TreeLinkNode *next;\n}\n</pre>\n\n<p>填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 <code>NULL</code>。</p>\n\n<p>初始状态下，所有&nbsp;next 指针都被设置为 <code>NULL</code>。</p>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>你只能使用额外常数空间。</li>\n\t<li>使用递归解题也符合要求，本题中递归程序占用的栈空间不算做额外的空间复杂度。</li>\n</ul>\n\n<p><strong>示例:</strong></p>\n\n<p>给定二叉树，</p>\n\n<pre>     1\n   /  \\\n  2    3\n / \\    \\\n4   5    7\n</pre>\n\n<p>调用你的函数后，该二叉树变为：</p>\n\n<pre>     1 -&gt; NULL\n   /  \\\n  2 -&gt; 3 -&gt; NULL\n / \\    \\\n4-&gt; 5 -&gt; 7 -&gt; NULL</pre>\n","word-break-ii":"<p>给定一个<strong>非空</strong>字符串 <em>s</em> 和一个包含<strong>非空</strong>单词列表的字典 <em>wordDict</em>，在字符串中增加空格来构建一个句子，使得句子中所有的单词都在词典中。返回所有这些可能的句子。</p>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>分隔时可以重复使用字典中的单词。</li>\n\t<li>你可以假设字典中没有重复的单词。</li>\n</ul>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入:\n</strong>s = &quot;<code>catsanddog</code>&quot;\nwordDict = <code>[&quot;cat&quot;, &quot;cats&quot;, &quot;and&quot;, &quot;sand&quot;, &quot;dog&quot;]</code>\n<strong>输出:\n</strong><code>[\n&nbsp; &quot;cats and dog&quot;,\n&nbsp; &quot;cat sand dog&quot;\n]</code>\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入:\n</strong>s = &quot;pineapplepenapple&quot;\nwordDict = [&quot;apple&quot;, &quot;pen&quot;, &quot;applepen&quot;, &quot;pine&quot;, &quot;pineapple&quot;]\n<strong>输出:\n</strong>[\n&nbsp; &quot;pine apple pen apple&quot;,\n&nbsp; &quot;pineapple pen apple&quot;,\n&nbsp; &quot;pine applepen apple&quot;\n]\n<strong>解释:</strong> 注意你可以重复使用字典中的单词。\n</pre>\n\n<p><strong>示例&nbsp;3：</strong></p>\n\n<pre><strong>输入:\n</strong>s = &quot;catsandog&quot;\nwordDict = [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]\n<strong>输出:\n</strong>[]\n</pre>\n","copy-list-with-random-pointer":"<p>给定一个链表，每个节点包含一个额外增加的随机指针，该指针可以指向链表中的任何节点或空节点。</p>\n\n<p>要求返回这个链表的深度拷贝。&nbsp;</p>\n","longest-consecutive-sequence":"<p>给定一个未排序的整数数组，找出最长连续序列的长度。</p>\n\n<p>要求算法的时间复杂度为&nbsp;<em>O(n)</em>。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong>&nbsp;[100, 4, 200, 1, 3, 2]\n<strong>输出:</strong> 4\n<strong>解释:</strong> 最长连续序列是 <code>[1, 2, 3, 4]。它的长度为 4。</code></pre>\n","gas-station":"<p>在一条环路上有&nbsp;<em>N</em>&nbsp;个加油站，其中第&nbsp;<em>i</em>&nbsp;个加油站有汽油&nbsp;<code>gas[i]</code><em>&nbsp;</em>升。</p>\n\n<p>你有一辆油箱容量无限的的汽车，从第<em> i </em>个加油站开往第<em> i+1&nbsp;</em>个加油站需要消耗汽油&nbsp;<code>cost[i]</code><em>&nbsp;</em>升。你从其中的一个加油站出发，开始时油箱为空。</p>\n\n<p>如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1。</p>\n\n<p><strong>说明:</strong>&nbsp;</p>\n\n<ul>\n\t<li>如果题目有解，该答案即为唯一答案。</li>\n\t<li>输入数组均为非空数组，且长度相同。</li>\n\t<li>输入数组中的元素均为非负数。</li>\n</ul>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> \ngas  = [1,2,3,4,5]\ncost = [3,4,5,1,2]\n\n<strong>输出:</strong> 3\n\n<strong>解释:\n</strong>从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油\n开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油\n开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油\n开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油\n开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油\n开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。\n因此，3 可为起始索引。</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> \ngas  = [2,3,4]\ncost = [3,4,3]\n\n<strong>输出:</strong> -1\n\n<strong>解释:\n</strong>你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。\n我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油\n开往 0 号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油\n开往 1 号加油站，此时油箱有 3 - 3 + 3 = 3 升汽油\n你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。\n因此，无论怎样，你都不可能绕环路行驶一周。</pre>\n","binary-tree-upside-down":null,"palindrome-partitioning":"<p>给定一个字符串 <em>s</em>，将<em> s </em>分割成一些子串，使每个子串都是回文串。</p>\n\n<p>返回 <em>s</em> 所有可能的分割方案。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong>&nbsp;&quot;aab&quot;\n<strong>输出:</strong>\n[\n  [&quot;aa&quot;,&quot;b&quot;],\n  [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;]\n]</pre>\n","read-n-characters-given-read4-ii-call-multiple-times":null,"path-sum":"<p>给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。</p>\n\n<p><strong>说明:</strong>&nbsp;叶子节点是指没有子节点的节点。</p>\n\n<p><strong>示例:</strong>&nbsp;<br>\n给定如下二叉树，以及目标和 <code>sum = 22</code>，</p>\n\n<pre>              <strong>5</strong>\n             / \\\n            <strong>4 </strong>  8\n           /   / \\\n          <strong>11 </strong> 13  4\n         /  \\      \\\n        7    <strong>2</strong>      1\n</pre>\n\n<p>返回 <code>true</code>, 因为存在目标和为 22 的根节点到叶子节点的路径 <code>5-&gt;4-&gt;11-&gt;2</code>。</p>\n","binary-tree-postorder-traversal":"<p>给定一个二叉树，返回它的 <em>后序&nbsp;</em>遍历。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [1,null,2,3]  \n   1\n    \\\n     2\n    /\n   3 \n\n<strong>输出:</strong> [3,2,1]</pre>\n\n<p><strong>进阶:</strong>&nbsp;递归算法很简单，你可以通过迭代算法完成吗？</p>\n","reverse-words-in-a-string":"<p>给定一个字符串，逐个翻转字符串中的每个单词。</p>\n\n<p><strong>示例:&nbsp;&nbsp;</strong></p>\n\n<pre><strong>输入:</strong> &quot;<code>the sky is blue</code>&quot;,\n<strong>输出:&nbsp;</strong>&quot;<code>blue is sky the</code>&quot;.\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>无空格字符构成一个单词。</li>\n\t<li>输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。</li>\n\t<li>如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。</li>\n</ul>\n\n<p><strong>进阶:&nbsp;</strong>请选用C语言的用户尝试使用&nbsp;<em>O</em>(1) 空间复杂度的原地解法。</p>\n","single-number-ii":"<p>给定一个<strong>非空</strong>整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。</p>\n\n<p><strong>说明：</strong></p>\n\n<p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [2,2,3,2]\n<strong>输出:</strong> 3\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> [0,1,0,1,0,1,99]\n<strong>输出:</strong> 99</pre>\n","populating-next-right-pointers-in-each-node":"<p>给定一个二叉树</p>\n\n<pre>struct TreeLinkNode {\n  TreeLinkNode *left;\n  TreeLinkNode *right;\n  TreeLinkNode *next;\n}</pre>\n\n<p>填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 <code>NULL</code>。</p>\n\n<p>初始状态下，所有&nbsp;next 指针都被设置为 <code>NULL</code>。</p>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>你只能使用额外常数空间。</li>\n\t<li>使用递归解题也符合要求，本题中递归程序占用的栈空间不算做额外的空间复杂度。</li>\n\t<li>你可以假设它是一个完美二叉树（即所有叶子节点都在同一层，每个父节点都有两个子节点）。</li>\n</ul>\n\n<p><strong>示例:</strong></p>\n\n<p>给定完美二叉树，</p>\n\n<pre>     1\n   /  \\\n  2    3\n / \\  / \\\n4  5  6  7</pre>\n\n<p>调用你的函数后，该完美二叉树变为：</p>\n\n<pre>     1 -&gt; NULL\n   /  \\\n  2 -&gt; 3 -&gt; NULL\n / \\  / \\\n4-&gt;5-&gt;6-&gt;7 -&gt; NULL</pre>\n","valid-palindrome":"<p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</p>\n\n<p><strong>说明：</strong>本题中，我们将空字符串定义为有效的回文串。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> &quot;A man, a plan, a canal: Panama&quot;\n<strong>输出:</strong> true\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> &quot;race a car&quot;\n<strong>输出:</strong> false\n</pre>\n","read-n-characters-given-read4":null,"one-edit-distance":null,"palindrome-partitioning-ii":"<p>给定一个字符串 <em>s</em>，将 <em>s</em> 分割成一些子串，使每个子串都是回文串。</p>\n\n<p>返回符合要求的最少分割次数。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong>&nbsp;&quot;aab&quot;\n<strong>输出:</strong> 1\n<strong>解释: </strong>进行一次分割就可将&nbsp;<em>s </em>分割成 [&quot;aa&quot;,&quot;b&quot;] 这样两个回文子串。\n</pre>\n","clone-graph":"<p>克隆一张无向图，图中的每个节点包含一个&nbsp;<code>label</code>&nbsp;（标签）和一个&nbsp;<code>neighbors</code>&nbsp;（邻接点）列表 。</p>\n\n<p><strong>OJ的无向图序列化：</strong></p>\n\n<p>节点被唯一标记。</p>\n\n<p>我们用 <code>#</code> 作为每个节点的分隔符，用&nbsp;<code>,</code>&nbsp;作为节点标签和邻接点的分隔符。</p>\n\n<p>例如，序列化无向图 <code>{0,1,2#1,2#2,2}</code>。</p>\n\n<p>该图总共有三个节点, 被两个分隔符&nbsp; <code>#</code>&nbsp;分为三部分。&nbsp;</p>\n\n<ol>\n\t<li>第一个节点的标签为 <code>0</code>，存在从节点 <code>0</code> 到节点 <code>1</code> 和节点 <code>2</code> 的两条边。</li>\n\t<li>第二个节点的标签为 <code>1</code>，存在从节点 <code>1</code> 到节点 <code>2</code> 的一条边。</li>\n\t<li>第三个节点的标签为 <code>2</code>，存在从节点 <code>2</code> 到节点 <code>2</code> (本身) 的一条边，从而形成自环。</li>\n</ol>\n\n<p>我们将图形可视化如下：</p>\n\n<pre>       1\n      / \\\n     /   \\\n    0 --- 2\n         / \\\n         \\_/\n</pre>\n","path-sum-ii":"<p>给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。</p>\n\n<p><strong>说明:</strong>&nbsp;叶子节点是指没有子节点的节点。</p>\n\n<p><strong>示例:</strong><br>\n给定如下二叉树，以及目标和&nbsp;<code>sum = 22</code>，</p>\n\n<pre>              <strong>5</strong>\n             / \\\n            <strong>4</strong>   <strong>8</strong>\n           /   / \\\n          <strong>11</strong>  13  <strong>4</strong>\n         /  \\    / \\\n        7    <strong>2</strong>  <strong>5</strong>   1\n</pre>\n\n<p>返回:</p>\n\n<pre>[\n   [5,4,11,2],\n   [5,8,4,5]\n]\n</pre>\n","lru-cache":"<p>运用你所掌握的数据结构，设计和实现一个&nbsp; <a href=\"https://baike.baidu.com/item/LRU\" target=\"_blank\">LRU (最近最少使用) 缓存机制</a>。它应该支持以下操作： 获取数据 <code>get</code> 和 写入数据 <code>put</code> 。</p>\n\n<p>获取数据 <code>get(key)</code> - 如果密钥 (key) 存在于缓存中，则获取密钥的值（总是正数），否则返回 -1。<br>\n写入数据 <code>put(key, value)</code> - 如果密钥不存在，则写入其数据值。当缓存容量达到上限时，它应该在写入新数据之前删除最近最少使用的数据值，从而为新的数据值留出空间。</p>\n\n<p><strong>进阶:</strong></p>\n\n<p>你是否可以在&nbsp;<strong>O(1)</strong> 时间复杂度内完成这两种操作？</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>LRUCache cache = new LRUCache( 2 /* 缓存容量 */ );\n\ncache.put(1, 1);\ncache.put(2, 2);\ncache.get(1);       // 返回  1\ncache.put(3, 3);    // 该操作会使得密钥 2 作废\ncache.get(2);       // 返回 -1 (未找到)\ncache.put(4, 4);    // 该操作会使得密钥 1 作废\ncache.get(1);       // 返回 -1 (未找到)\ncache.get(3);       // 返回  3\ncache.get(4);       // 返回  4\n</pre>\n","evaluate-reverse-polish-notation":"<p>根据<a href=\"https://baike.baidu.com/item/%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/128437\" target=\"_blank\">逆波兰表示法</a>，求表达式的值。</p>\n\n<p>有效的运算符包括&nbsp;<code>+</code>,&nbsp;<code>-</code>,&nbsp;<code>*</code>,&nbsp;<code>/</code>&nbsp;。每个运算对象可以是整数，也可以是另一个逆波兰表达式。</p>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>整数除法只保留整数部分。</li>\n\t<li>给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。</li>\n</ul>\n\n<p><strong>示例&nbsp;1：</strong></p>\n\n<pre><strong>输入:</strong> [&quot;2&quot;, &quot;1&quot;, &quot;+&quot;, &quot;3&quot;, &quot;*&quot;]\n<strong>输出:</strong> 9\n<strong>解释:</strong> ((2 + 1) * 3) = 9\n</pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre><strong>输入:</strong> [&quot;4&quot;, &quot;13&quot;, &quot;5&quot;, &quot;/&quot;, &quot;+&quot;]\n<strong>输出:</strong> 6\n<strong>解释:</strong> (4 + (13 / 5)) = 6\n</pre>\n\n<p><strong>示例&nbsp;3：</strong></p>\n\n<pre><strong>输入:</strong> [&quot;10&quot;, &quot;6&quot;, &quot;9&quot;, &quot;3&quot;, &quot;+&quot;, &quot;-11&quot;, &quot;*&quot;, &quot;/&quot;, &quot;*&quot;, &quot;17&quot;, &quot;+&quot;, &quot;5&quot;, &quot;+&quot;]\n<strong>输出:</strong> 22\n<strong>解释:</strong> \n  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22</pre>\n","flatten-binary-tree-to-linked-list":"<p>给定一个二叉树，<a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95/8010757\" target=\"_blank\">原地</a>将它展开为链表。</p>\n\n<p>例如，给定二叉树</p>\n\n<pre>    1\n   / \\\n  2   5\n / \\   \\\n3   4   6</pre>\n\n<p>将其展开为：</p>\n\n<pre>1\n \\\n  2\n   \\\n    3\n     \\\n      4\n       \\\n        5\n         \\\n          6</pre>\n","longest-substring-with-at-most-two-distinct-characters":null,"triangle":"<p>给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。</p>\n\n<p>例如，给定三角形：</p>\n\n<pre>[\n     [<strong>2</strong>],\n    [<strong>3</strong>,4],\n   [6,<strong>5</strong>,7],\n  [4,<strong>1</strong>,8,3]\n]\n</pre>\n\n<p>自顶向下的最小路径和为&nbsp;<code>11</code>（即，<strong>2&nbsp;</strong>+&nbsp;<strong>3</strong>&nbsp;+&nbsp;<strong>5&nbsp;</strong>+&nbsp;<strong>1</strong>&nbsp;= 11）。</p>\n\n<p><strong>说明：</strong></p>\n\n<p>如果你可以只使用 <em>O</em>(<em>n</em>)&nbsp;的额外空间（<em>n</em> 为三角形的总行数）来解决这个问题，那么你的算法会很加分。</p>\n","candy":"<p>老师想给孩子们分发糖果，有 <em>N</em>&nbsp;个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。</p>\n\n<p>你需要按照以下要求，帮助老师给这些孩子分发糖果：</p>\n\n<ul>\n\t<li>每个孩子至少分配到 1 个糖果。</li>\n\t<li>相邻的孩子中，评分高的孩子必须获得更多的糖果。</li>\n</ul>\n\n<p>那么这样下来，老师至少需要准备多少颗糖果呢？</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> [1,0,2]\n<strong>输出:</strong> 5\n<strong>解释:</strong> 你可以分别给这三个孩子分发 2、1、2 颗糖果。\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> [1,2,2]\n<strong>输出:</strong> 4\n<strong>解释:</strong> 你可以分别给这三个孩子分发 1、2、1 颗糖果。\n     第三个孩子只得到 1 颗糖果，这已满足上述两个条件。</pre>\n","min-stack":"<p>设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。</p>\n\n<ul>\n\t<li>push(x)&nbsp;-- 将元素 x 推入栈中。</li>\n\t<li>pop()&nbsp;-- 删除栈顶的元素。</li>\n\t<li>top()&nbsp;-- 获取栈顶元素。</li>\n\t<li>getMin() -- 检索栈中的最小元素。</li>\n</ul>\n\n<p><strong>示例:</strong></p>\n\n<pre>MinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin();   --&gt; 返回 -3.\nminStack.pop();\nminStack.top();      --&gt; 返回 0.\nminStack.getMin();   --&gt; 返回 -2.\n</pre>\n","distinct-subsequences":"<p>给定一个字符串&nbsp;<strong>S&nbsp;</strong>和一个字符串&nbsp;<strong>T</strong>，计算在 <strong>S</strong> 的子序列中 <strong>T</strong> 出现的个数。</p>\n\n<p>一个字符串的一个子序列是指，通过删除一些（也可以不删除）字符且不干扰剩余字符相对位置所组成的新字符串。（例如，<code>&quot;ACE&quot;</code>&nbsp;是&nbsp;<code>&quot;ABCDE&quot;</code>&nbsp;的一个子序列，而&nbsp;<code>&quot;AEC&quot;</code>&nbsp;不是）</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入: </strong>S = <code>&quot;rabbbit&quot;</code>, T = <code>&quot;rabbit&quot;\n<strong>输出:</strong>&nbsp;3\n</code><strong>解释:\n</strong>\n如下图所示, 有 3 种可以从 S 中得到 <code>&quot;rabbit&quot; 的方案</code>。\n(上箭头符号 ^ 表示选取的字母)\n\n<code>rabbbit</code>\n^^^^ ^^\n<code>rabbbit</code>\n^^ ^^^^\n<code>rabbbit</code>\n^^^ ^^^\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入: </strong>S = <code>&quot;babgbag&quot;</code>, T = <code>&quot;bag&quot;\n<strong>输出:</strong>&nbsp;5\n</code><strong>解释:\n</strong>\n如下图所示, 有 5 种可以从 S 中得到 <code>&quot;bag&quot; 的方案</code>。 \n(上箭头符号 ^ 表示选取的字母)\n\n<code>babgbag</code>\n^^ ^\n<code>babgbag</code>\n^^    ^\n<code>babgbag</code>\n^    ^^\n<code>babgbag</code>\n  ^  ^^\n<code>babgbag</code>\n    ^^^</pre>\n","best-time-to-buy-and-sell-stock-ii":"<p>给定一个数组，它的第&nbsp;<em>i</em> 个元素是一支给定股票第 <em>i</em> 天的价格。</p>\n\n<p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p>\n\n<p><strong>注意：</strong>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [7,1,5,3,6,4]\n<strong>输出:</strong> 7\n<strong>解释:</strong> 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。\n&nbsp;    随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [1,2,3,4,5]\n<strong>输出:</strong> 4\n<strong>解释:</strong> 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。\n&nbsp;    注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。\n&nbsp;    因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。\n</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre><strong>输入:</strong> [7,6,4,3,1]\n<strong>输出:</strong> 0\n<strong>解释:</strong> 在这种情况下, 没有交易完成, 所以最大利润为 0。</pre>\n","single-number":"<p>给定一个<strong>非空</strong>整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>\n\n<p><strong>说明：</strong></p>\n\n<p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [2,2,1]\n<strong>输出:</strong> 1\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> [4,1,2,1,2]\n<strong>输出:</strong> 4</pre>\n","max-points-on-a-line":"<p>给定一个二维平面，平面上有&nbsp;<em>n&nbsp;</em>个点，求最多有多少个点在同一条直线上。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [[1,1],[2,2],[3,3]]\n<strong>输出:</strong> 3\n<strong>解释:</strong>\n^\n|\n| &nbsp; &nbsp; &nbsp; &nbsp;o\n| &nbsp; &nbsp; o\n| &nbsp;o &nbsp;\n+-------------&gt;\n0 &nbsp;1 &nbsp;2 &nbsp;3  4\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\n<strong>输出:</strong> 4\n<strong>解释:</strong>\n^\n|\n|  o\n| &nbsp;&nbsp;&nbsp;&nbsp;o&nbsp;&nbsp;      o\n| &nbsp;&nbsp;&nbsp;&nbsp;   o\n| &nbsp;o &nbsp;      o\n+-------------------&gt;\n0 &nbsp;1 &nbsp;2 &nbsp;3 &nbsp;4 &nbsp;5 &nbsp;6</pre>\n","best-time-to-buy-and-sell-stock":"<p>给定一个数组，它的第&nbsp;<em>i</em> 个元素是一支给定股票第 <em>i</em> 天的价格。</p>\n\n<p>如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</p>\n\n<p>注意你不能在买入股票前卖出股票。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [7,1,5,3,6,4]\n<strong>输出:</strong> 5\n<strong>解释: </strong>在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。\n     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [7,6,4,3,1]\n<strong>输出:</strong> 0\n<strong>解释: </strong>在这种情况下, 没有交易完成, 所以最大利润为 0。\n</pre>\n","pascals-triangle":"<p>给定一个非负整数&nbsp;<em>numRows，</em>生成杨辉三角的前&nbsp;<em>numRows&nbsp;</em>行。</p>\n\n<p><img alt=\"\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif\"></p>\n\n<p><small>在杨辉三角中，每个数是它左上方和右上方的数的和。</small></p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> 5\n<strong>输出:</strong>\n[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]</pre>\n","best-time-to-buy-and-sell-stock-iii":"<p>给定一个数组，它的第<em> i</em> 个元素是一支给定的股票在第 <em>i </em>天的价格。</p>\n\n<p>设计一个算法来计算你所能获取的最大利润。你最多可以完成&nbsp;<em>两笔&nbsp;</em>交易。</p>\n\n<p><strong>注意:</strong>&nbsp;你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> [3,3,5,0,0,3,1,4]\n<strong>输出:</strong> 6\n<strong>解释:</strong> 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。\n&nbsp;    随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [1,2,3,4,5]\n<strong>输出:</strong> 4\n<strong>解释:</strong> 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。 &nbsp; \n&nbsp;    注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。 &nbsp; \n&nbsp;    因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> [7,6,4,3,1] \n<strong>输出:</strong> 0 \n<strong>解释:</strong> 在这个情况下, 没有交易完成, 所以最大利润为 0。</pre>\n","reorder-list":"<p>给定一个单链表&nbsp;<em>L</em>：<em>L</em><sub>0</sub>&rarr;<em>L</em><sub>1</sub>&rarr;&hellip;&rarr;<em>L</em><sub><em>n</em>-1</sub>&rarr;<em>L</em><sub>n ，</sub><br>\n将其重新排列后变为： <em>L</em><sub>0</sub>&rarr;<em>L</em><sub><em>n</em></sub>&rarr;<em>L</em><sub>1</sub>&rarr;<em>L</em><sub><em>n</em>-1</sub>&rarr;<em>L</em><sub>2</sub>&rarr;<em>L</em><sub><em>n</em>-2</sub>&rarr;&hellip;</p>\n\n<p>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>给定链表 1-&gt;2-&gt;3-&gt;4, 重新排列为 1-&gt;4-&gt;2-&gt;3.</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>给定链表 1-&gt;2-&gt;3-&gt;4-&gt;5, 重新排列为 1-&gt;5-&gt;2-&gt;4-&gt;3.</pre>\n","binary-tree-maximum-path-sum":"<p>给定一个<strong>非空</strong>二叉树，返回其最大路径和。</p>\n\n<p>本题中，路径被定义为一条从树中任意节点出发，达到任意节点的序列。该路径<strong>至少包含一个</strong>节点，且不一定经过根节点。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [1,2,3]\n\n       <strong>1</strong>\n      <strong>/ \\</strong>\n     <strong>2</strong>   <strong>3</strong>\n\n<strong>输出:</strong> 6\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> [-10,9,20,null,null,15,7]\n\n&nbsp;  -10\n&nbsp; &nbsp;/ \\\n&nbsp; 9 &nbsp;<strong>20</strong>\n&nbsp; &nbsp; <strong>/ &nbsp;\\</strong>\n&nbsp; &nbsp;<strong>15 &nbsp; 7</strong>\n\n<strong>输出:</strong> 42</pre>\n","surrounded-regions":"<p>给定一个二维的矩阵，包含&nbsp;<code>&#39;X&#39;</code>&nbsp;和&nbsp;<code>&#39;O&#39;</code>（<strong>字母 O</strong>）。</p>\n\n<p>找到所有被 <code>&#39;X&#39;</code> 围绕的区域，并将这些区域里所有的&nbsp;<code>&#39;O&#39;</code> 用 <code>&#39;X&#39;</code> 填充。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>X X X X\nX O O X\nX X O X\nX O X X\n</pre>\n\n<p>运行你的函数后，矩阵变为：</p>\n\n<pre>X X X X\nX X X X\nX X X X\nX O X X\n</pre>\n\n<p><strong>解释:</strong></p>\n\n<p>被围绕的区间不会存在于边界上，换句话说，任何边界上的&nbsp;<code>&#39;O&#39;</code>&nbsp;都不会被填充为&nbsp;<code>&#39;X&#39;</code>。 任何不在边界上，或不与边界上的&nbsp;<code>&#39;O&#39;</code>&nbsp;相连的&nbsp;<code>&#39;O&#39;</code>&nbsp;最终都会被填充为&nbsp;<code>&#39;X&#39;</code>。如果两个元素在水平或垂直方向相邻，则称它们是&ldquo;相连&rdquo;的。</p>\n","pascals-triangle-ii":"<p>给定一个非负索引&nbsp;<em>k</em>，其中 <em>k</em>&nbsp;&le;&nbsp;33，返回杨辉三角的第 <em>k </em>行。</p>\n\n<p><img alt=\"\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif\"></p>\n\n<p><small>在杨辉三角中，每个数是它左上方和右上方的数的和。</small></p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> 3\n<strong>输出:</strong> [1,3,3,1]\n</pre>\n\n<p><strong>进阶：</strong></p>\n\n<p>你可以优化你的算法到 <em>O</em>(<em>k</em>) 空间复杂度吗？</p>\n","sum-root-to-leaf-numbers":"<p>给定一个二叉树，它的每个结点都存放一个&nbsp;<code>0-9</code>&nbsp;的数字，每条从根到叶子节点的路径都代表一个数字。</p>\n\n<p>例如，从根到叶子节点路径 <code>1-&gt;2-&gt;3</code> 代表数字 <code>123</code>。</p>\n\n<p>计算从根到叶子节点生成的所有数字之和。</p>\n\n<p><strong>说明:</strong>&nbsp;叶子节点是指没有子节点的节点。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [1,2,3]\n    1\n   / \\\n  2   3\n<strong>输出:</strong> 25\n<strong>解释:</strong>\n从根到叶子节点路径 <code>1-&gt;2</code> 代表数字 <code>12</code>.\n从根到叶子节点路径 <code>1-&gt;3</code> 代表数字 <code>13</code>.\n因此，数字总和 = 12 + 13 = <code>25</code>.</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [4,9,0,5,1]\n    4\n   / \\\n  9   0\n&nbsp;/ \\\n5   1\n<strong>输出:</strong> 1026\n<strong>解释:</strong>\n从根到叶子节点路径 <code>4-&gt;9-&gt;5</code> 代表数字 495.\n从根到叶子节点路径 <code>4-&gt;9-&gt;1</code> 代表数字 491.\n从根到叶子节点路径 <code>4-&gt;0</code> 代表数字 40.\n因此，数字总和 = 495 + 491 + 40 = <code>1026</code>.</pre>\n","word-ladder-ii":"<p>给定两个单词（<em>beginWord</em> 和 <em>endWord</em>）和一个字典 <em>wordList</em>，找出所有从 <em>beginWord </em>到 <em>endWord </em>的最短转换序列。转换需遵循如下规则：</p>\n\n<ol>\n\t<li>每次转换只能改变一个字母。</li>\n\t<li>转换过程中的中间单词必须是字典中的单词。</li>\n</ol>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>如果不存在这样的转换序列，返回一个空列表。</li>\n\t<li>所有单词具有相同的长度。</li>\n\t<li>所有单词只由小写字母组成。</li>\n\t<li>字典中不存在重复的单词。</li>\n\t<li>你可以假设 <em>beginWord</em> 和 <em>endWord </em>是非空的，且二者不相同。</li>\n</ul>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong>\nbeginWord = &quot;hit&quot;,\nendWord = &quot;cog&quot;,\nwordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]\n\n<strong>输出:</strong>\n[\n  [&quot;hit&quot;,&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;cog&quot;],\n&nbsp; [&quot;hit&quot;,&quot;hot&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]\n]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong>\nbeginWord = &quot;hit&quot;\nendWord = &quot;cog&quot;\nwordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]\n\n<strong>输出: </strong>[]\n\n<strong>解释:</strong>&nbsp;<em>endWord</em> &quot;cog&quot; 不在字典中，所以不存在符合要求的转换序列。</pre>\n","word-ladder":"<p>给定两个单词（<em>beginWord&nbsp;</em>和 <em>endWord</em>）和一个字典，找到从&nbsp;<em>beginWord</em> 到&nbsp;<em>endWord</em> 的最短转换序列的长度。转换需遵循如下规则：</p>\n\n<ol>\n\t<li>每次转换只能改变一个字母。</li>\n\t<li>转换过程中的中间单词必须是字典中的单词。</li>\n</ol>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>如果不存在这样的转换序列，返回 0。</li>\n\t<li>所有单词具有相同的长度。</li>\n\t<li>所有单词只由小写字母组成。</li>\n\t<li>字典中不存在重复的单词。</li>\n\t<li>你可以假设 <em>beginWord</em> 和 <em>endWord </em>是非空的，且二者不相同。</li>\n</ul>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong>\nbeginWord = &quot;hit&quot;,\nendWord = &quot;cog&quot;,\nwordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]\n\n<strong>输出: </strong>5\n\n<strong>解释: </strong>一个最短转换序列是 &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; &quot;cog&quot;,\n     返回它的长度 5。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong>\nbeginWord = &quot;hit&quot;\nendWord = &quot;cog&quot;\nwordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]\n\n<strong>输出:</strong>&nbsp;0\n\n<strong>解释:</strong>&nbsp;<em>endWord</em> &quot;cog&quot; 不在字典中，所以无法进行转换。</pre>\n","balanced-binary-tree":"<p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p>\n\n<p>本题中，一棵高度平衡二叉树定义为：</p>\n\n<blockquote>\n<p>一个二叉树<em>每个节点&nbsp;</em>的左右两个子树的高度差的绝对值不超过1。</p>\n</blockquote>\n\n<p><strong>示例 1:</strong></p>\n\n<p>给定二叉树 <code>[3,9,20,null,null,15,7]</code></p>\n\n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7</pre>\n\n<p>返回 <code>true</code> 。<br>\n<br>\n<strong>示例 2:</strong></p>\n\n<p>给定二叉树 <code>[1,2,2,3,3,null,null,4,4]</code></p>\n\n<pre>       1\n      / \\\n     2   2\n    / \\\n   3   3\n  / \\\n 4   4\n</pre>\n\n<p>返回&nbsp;<code>false</code> 。</p>\n","decode-ways":"<p>一条包含字母&nbsp;<code>A-Z</code> 的消息通过以下方式进行了编码：</p>\n\n<pre>&#39;A&#39; -&gt; 1\n&#39;B&#39; -&gt; 2\n...\n&#39;Z&#39; -&gt; 26\n</pre>\n\n<p>给定一个只包含数字的<strong>非空</strong>字符串，请计算解码方法的总数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> &quot;12&quot;\n<strong>输出:</strong> 2\n<strong>解释:</strong>&nbsp;它可以解码为 &quot;AB&quot;（1 2）或者 &quot;L&quot;（12）。\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> &quot;226&quot;\n<strong>输出:</strong> 3\n<strong>解释:</strong>&nbsp;它可以解码为 &quot;BZ&quot; (2 26), &quot;VF&quot; (22 6), 或者 &quot;BBF&quot; (2 2 6) 。\n</pre>\n","maximum-depth-of-binary-tree":"<p>给定一个二叉树，找出其最大深度。</p>\n\n<p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p>\n\n<p><strong>说明:</strong>&nbsp;叶子节点是指没有子节点的节点。</p>\n\n<p><strong>示例：</strong><br>\n给定二叉树 <code>[3,9,20,null,null,15,7]</code>，</p>\n\n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7</pre>\n\n<p>返回它的最大深度&nbsp;3 。</p>\n","merge-sorted-array":"<p>给定两个有序整数数组&nbsp;<em>nums1 </em>和 <em>nums2</em>，将 <em>nums2 </em>合并到&nbsp;<em>nums1&nbsp;</em>中<em>，</em>使得&nbsp;<em>num1 </em>成为一个有序数组。</p>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>初始化&nbsp;<em>nums1</em> 和 <em>nums2</em> 的元素数量分别为&nbsp;<em>m</em> 和 <em>n</em>。</li>\n\t<li>你可以假设&nbsp;<em>nums1&nbsp;</em>有足够的空间（空间大小大于或等于&nbsp;<em>m + n</em>）来保存 <em>nums2</em> 中的元素。</li>\n</ul>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong>\nnums1 = [1,2,3,0,0,0], m = 3\nnums2 = [2,5,6],       n = 3\n\n<strong>输出:</strong>&nbsp;[1,2,2,3,5,6]</pre>\n","same-tree":"<p>给定两个二叉树，编写一个函数来检验它们是否相同。</p>\n\n<p>如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入: </strong>      1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\n<strong>输出:</strong> true</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:  </strong>    1          1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\n<strong>输出:</strong> false\n</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre><strong>输入:</strong>       1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\n<strong>输出:</strong> false\n</pre>\n","convert-sorted-array-to-binary-search-tree":"<p>将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。</p>\n\n<p>本题中，一个高度平衡二叉树是指一个二叉树<em>每个节点&nbsp;</em>的左右两个子树的高度差的绝对值不超过 1。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>给定有序数组: [-10,-3,0,5,9],\n\n一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：\n\n      0\n     / \\\n   -3   9\n   /   /\n -10  5\n</pre>\n","symmetric-tree":"<p>给定一个二叉树，检查它是否是镜像对称的。</p>\n\n<p>例如，二叉树&nbsp;<code>[1,2,2,3,4,4,3]</code> 是对称的。</p>\n\n<pre>    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\n</pre>\n\n<p>但是下面这个&nbsp;<code>[1,2,2,null,3,null,3]</code> 则不是镜像对称的:</p>\n\n<pre>    1\n   / \\\n  2   2\n   \\   \\\n   3    3\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<p>如果你可以运用递归和迭代两种方法解决这个问题，会很加分。</p>\n","binary-tree-level-order-traversal-ii":"<p>给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）</p>\n\n<p>例如：<br>\n给定二叉树 <code>[3,9,20,null,null,15,7]</code>,</p>\n\n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre>\n\n<p>返回其自底向上的层次遍历为：</p>\n\n<pre>[\n  [15,7],\n  [9,20],\n  [3]\n]\n</pre>\n","subsets":"<p>给定一组<strong>不含重复元素</strong>的整数数组&nbsp;<em>nums</em>，返回该数组所有可能的子集（幂集）。</p>\n\n<p><strong>说明：</strong>解集不能包含重复的子集。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> nums = [1,2,3]\n<strong>输出:</strong>\n[\n  [3],\n&nbsp; [1],\n&nbsp; [2],\n&nbsp; [1,2,3],\n&nbsp; [1,3],\n&nbsp; [2,3],\n&nbsp; [1,2],\n&nbsp; []\n]</pre>\n","remove-duplicates-from-sorted-list":"<p>给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> 1-&gt;1-&gt;2\n<strong>输出:</strong> 1-&gt;2\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> 1-&gt;1-&gt;2-&gt;3-&gt;3\n<strong>输出:</strong> 1-&gt;2-&gt;3</pre>\n","binary-tree-level-order-traversal":"<p>给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。</p>\n\n<p>例如:<br>\n给定二叉树:&nbsp;<code>[3,9,20,null,null,15,7]</code>,</p>\n\n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre>\n\n<p>返回其层次遍历结果：</p>\n\n<pre>[\n  [3],\n  [9,20],\n  [15,7]\n]\n</pre>\n","validate-binary-search-tree":"<p>给定一个二叉树，判断其是否是一个有效的二叉搜索树。</p>\n\n<p>假设一个二叉搜索树具有如下特征：</p>\n\n<ul>\n\t<li>节点的左子树只包含<strong>小于</strong>当前节点的数。</li>\n\t<li>节点的右子树只包含<strong>大于</strong>当前节点的数。</li>\n\t<li>所有左子树和右子树自身必须也是二叉搜索树。</li>\n</ul>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong>\n    2\n   / \\\n  1   3\n<strong>输出:</strong> true\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:\n</strong>    5\n   / \\\n  1   4\n&nbsp;    / \\\n&nbsp;   3   6\n<strong>输出:</strong> false\n<strong>解释:</strong> 输入为: [5,1,4,null,null,3,6]。\n&nbsp;    根节点的值为 5 ，但是其右子节点值为 4 。\n</pre>\n","gray-code":"<p>格雷编码是一个二进制数字系统，在该系统中，两个连续的数值仅有一个位数的差异。</p>\n\n<p>给定一个代表编码总位数的非负整数<em> n</em>，打印其格雷编码序列。格雷编码序列必须以 0 开头。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong>&nbsp;2\n<strong>输出:</strong>&nbsp;<code>[0,1,3,2]</code>\n<strong>解释:</strong>\n00 - 0\n01 - 1\n11 - 3\n10 - 2\n\n对于给定的&nbsp;<em>n</em>，其格雷编码序列并不唯一。\n例如，<code>[0,2,3,1]</code>&nbsp;也是一个有效的格雷编码序列。\n\n00 - 0\n10 - 2\n11 - 3\n01 - 1</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong>&nbsp;0\n<strong>输出:</strong>&nbsp;<code>[0]\n<strong>解释:</strong> 我们定义</code>格雷编码序列必须以 0 开头。<code>\n&nbsp;    给定</code>编码总位数为<code> <em>n</em> 的格雷编码序列，其长度为 2<sup>n</sup></code>。<code>当 <em>n</em> = 0 时，长度为 2<sup>0</sup> = 1。\n&nbsp;    因此，当 <em>n</em> = 0 时，其格雷编码序列为 [0]。</code>\n</pre>\n","simplify-path":"<p>给定一个文档 (Unix-style) 的完全路径，请进行路径简化。</p>\n\n<p>例如，<br>\n<strong>path</strong> = <code>&quot;/home/&quot;</code>, =&gt; <code>&quot;/home&quot;</code><br>\n<strong>path</strong> = <code>&quot;/a/./b/../../c/&quot;</code>, =&gt; <code>&quot;/c&quot;</code></p>\n\n<p><strong>边界情况:</strong></p>\n\n<ul>\n\t<li>你是否考虑了 路径 =&nbsp;<code>&quot;/../&quot;</code>&nbsp;的情况？<br>\n\t在这种情况下，你需返回&nbsp;<code>&quot;/&quot;</code>&nbsp;。</li>\n\t<li>此外，路径中也可能包含多个斜杠&nbsp;<code>&#39;/&#39;</code>&nbsp;，如&nbsp;<code>&quot;/home//foo/&quot;</code>&nbsp;。<br>\n\t在这种情况下，你可忽略多余的斜杠，返回&nbsp;<code>&quot;/home/foo&quot;</code>&nbsp;。</li>\n</ul>\n","binary-tree-zigzag-level-order-traversal":"<p>给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。</p>\n\n<p>例如：<br>\n给定二叉树&nbsp;<code>[3,9,20,null,null,15,7]</code>,</p>\n\n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre>\n\n<p>返回锯齿形层次遍历如下：</p>\n\n<pre>[\n  [3],\n  [20,9],\n  [15,7]\n]\n</pre>\n","binary-tree-inorder-traversal":"<p>给定一个二叉树，返回它的<em>中序&nbsp;</em>遍历。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [1,null,2,3]\n   1\n    \\\n     2\n    /\n   3\n\n<strong>输出:</strong> [1,3,2]</pre>\n\n<p><strong>进阶:</strong>&nbsp;递归算法很简单，你可以通过迭代算法完成吗？</p>\n","restore-ip-addresses":"<p>给定一个只包含数字的字符串，复原它并返回所有可能的 IP 地址格式。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> &quot;25525511135&quot;\n<strong>输出:</strong> <code>[&quot;255.255.11.135&quot;, &quot;255.255.111.35&quot;]</code></pre>\n","sort-colors":"<p>给定一个包含红色、白色和蓝色，一共&nbsp;<em>n </em>个元素的数组，<strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">原地</a></strong>对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p>\n\n<p>此题中，我们使用整数 0、&nbsp;1 和 2 分别表示红色、白色和蓝色。</p>\n\n<p><strong>注意:</strong><br>\n不能使用代码库中的排序函数来解决这道题。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [2,0,2,1,1,0]\n<strong>输出:</strong> [0,0,1,1,2,2]</pre>\n\n<p><strong>进阶：</strong></p>\n\n<ul>\n\t<li>一个直观的解决方案是使用计数排序的两趟扫描算法。<br>\n\t首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。</li>\n\t<li>你能想出一个仅使用常数空间的一趟扫描算法吗？</li>\n</ul>\n","maximal-rectangle":"<p>给定一个仅包含&nbsp;0 和 1 的二维二进制矩阵，找出只包含 1 的最大矩形，并返回其面积。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong>\n[\n  [&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;1&quot;,&quot;0&quot;,&quot;<strong>1</strong>&quot;,&quot;<strong>1</strong>&quot;,&quot;<strong>1</strong>&quot;],\n  [&quot;1&quot;,&quot;1&quot;,&quot;<strong>1</strong>&quot;,&quot;<strong>1</strong>&quot;,&quot;<strong>1</strong>&quot;],\n  [&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;]\n]\n<strong>输出:</strong> 6</pre>\n","valid-number":"<p>验证给定的字符串是否为数字。</p>\n\n<p>例如:<br>\n<code>&quot;0&quot;</code> =&gt; <code>true</code><br>\n<code>&quot; 0.1 &quot;</code> =&gt; <code>true</code><br>\n<code>&quot;abc&quot;</code> =&gt; <code>false</code><br>\n<code>&quot;1 a&quot;</code> =&gt; <code>false</code><br>\n<code>&quot;2e10&quot;</code> =&gt; <code>true</code></p>\n\n<p><strong>说明:</strong>&nbsp;我们有意将问题陈述地比较模糊。在实现代码之前，你应当事先思考所有可能的情况。</p>\n\n<p><strong>更新于 2015-02-10:</strong><br>\n<code>C++</code>函数的形式已经更新了。如果你仍然看见你的函数接收&nbsp;<code>const char *</code> 类型的参数，请点击重载按钮重置你的代码。</p>\n","interleaving-string":"<p>给定三个字符串&nbsp;<em>s1</em>, <em>s2</em>, <em>s3</em>, 验证&nbsp;<em>s3</em>&nbsp;是否是由&nbsp;<em>s1</em>&nbsp;和&nbsp;<em>s2 </em>交错组成的。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> s1 = &quot;aabcc&quot;, s2 = &quot;dbbca&quot;, <em>s3</em> = &quot;aadbbcbcac&quot;\n<strong>输出:</strong> true\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> s1 = &quot;aabcc&quot;, s2 = &quot;dbbca&quot;, <em>s3</em> = &quot;aadbbbaccc&quot;\n<strong>输出:</strong> false</pre>\n","search-in-rotated-sorted-array-ii":"<p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p>\n\n<p>( 例如，数组&nbsp;<code>[0,0,1,2,2,5,6]</code>&nbsp;可能变为&nbsp;<code>[2,5,6,0,0,1,2]</code>&nbsp;)。</p>\n\n<p>编写一个函数来判断给定的目标值是否存在于数组中。若存在返回&nbsp;<code>true</code>，否则返回&nbsp;<code>false</code>。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> nums = [2<code>,5,6,0,0,1,2]</code>, target = 0\n<strong>输出:</strong> true\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> nums = [2<code>,5,6,0,0,1,2]</code>, target = 3\n<strong>输出:</strong> false</pre>\n\n<p><strong>进阶:</strong></p>\n\n<ul>\n\t<li>这是 <a href=\"https://leetcode-cn.com/problems/search-in-rotated-sorted-array/description/\">搜索旋转排序数组</a>&nbsp;的延伸题目，本题中的&nbsp;<code>nums</code>&nbsp; 可能包含重复元素。</li>\n\t<li>这会影响到程序的时间复杂度吗？会有怎样的影响，为什么？</li>\n</ul>\n","subsets-ii":"<p>给定一个可能包含重复元素的整数数组 <em><strong>nums</strong></em>，返回该数组所有可能的子集（幂集）。</p>\n\n<p><strong>说明：</strong>解集不能包含重复的子集。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [1,2,2]\n<strong>输出:</strong>\n[\n  [2],\n  [1],\n  [1,2,2],\n  [2,2],\n  [1,2],\n  []\n]</pre>\n","partition-list":"<p>给定一个链表和一个特定值<em> x</em>，对链表进行分隔，使得所有小于 <em>x</em> 的节点都在大于或等于 <em>x</em> 的节点之前。</p>\n\n<p>你应当保留两个分区中每个节点的初始相对位置。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> head = 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2, <em>x</em> = 3\n<strong>输出:</strong> 1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5\n</pre>\n","construct-binary-tree-from-inorder-and-postorder-traversal":"<p>根据一棵树的中序遍历与后序遍历构造二叉树。</p>\n\n<p><strong>注意:</strong><br>\n你可以假设树中没有重复的元素。</p>\n\n<p>例如，给出</p>\n\n<pre>中序遍历 inorder =&nbsp;[9,3,15,20,7]\n后序遍历 postorder = [9,15,7,20,3]</pre>\n\n<p>返回如下的二叉树：</p>\n\n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre>\n","minimum-depth-of-binary-tree":"<p>给定一个二叉树，找出其最小深度。</p>\n\n<p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p>\n\n<p><strong>说明:</strong>&nbsp;叶子节点是指没有子节点的节点。</p>\n\n<p><strong>示例:</strong></p>\n\n<p>给定二叉树&nbsp;<code>[3,9,20,null,null,15,7]</code>,</p>\n\n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7</pre>\n\n<p>返回它的最小深度 &nbsp;2.</p>\n","remove-duplicates-from-sorted-array-ii":"<p>给定一个排序数组，你需要在<strong><a href=\"http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">原地</a></strong>删除重复出现的元素，使得每个元素最多出现两次，返回移除后数组的新长度。</p>\n\n<p>不要使用额外的数组空间，你必须在<strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">原地</a>修改输入数组</strong>并在使用 O(1) 额外空间的条件下完成。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>给定 <em>nums</em> = <strong>[1,1,1,2,2,3]</strong>,\n\n函数应返回新长度 length = <strong><code>5</code></strong>, 并且原数组的前五个元素被修改为 <strong><code>1, 1, 2, 2,</code></strong> <strong>3 </strong>。\n\n你不需要考虑数组中超出新长度后面的元素。</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre>给定 <em>nums</em> = <strong>[0,0,1,1,1,1,2,3,3]</strong>,\n\n函数应返回新长度 length = <strong><code>7</code></strong>, 并且原数组的前五个元素被修改为&nbsp;<strong><code>0</code></strong>, <strong>0</strong>, <strong>1</strong>, <strong>1</strong>, <strong>2</strong>, <strong>3</strong>, <strong>3 。</strong>\n\n你不需要考虑数组中超出新长度后面的元素。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<p>为什么返回数值是整数，但输出的答案是数组呢?</p>\n\n<p>请注意，输入数组是以<strong>&ldquo;引用&rdquo;</strong>方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p>\n\n<p>你可以想象内部操作如下:</p>\n\n<pre>// <strong>nums</strong> 是以&ldquo;引用&rdquo;方式传递的。也就是说，不对实参做任何拷贝\nint len = removeDuplicates(nums);\n\n// 在函数里修改输入数组对于调用者是可见的。\n// 根据你的函数返回的长度, 它会打印出数组中<strong>该长度范围内</strong>的所有元素。\nfor (int i = 0; i &lt; len; i++) {\n&nbsp; &nbsp; print(nums[i]);\n}</pre>\n","unique-paths":"<p>一个机器人位于一个 <em>m x n </em>网格的左上角 （起始点在下图中标记为&ldquo;Start&rdquo; ）。</p>\n\n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为&ldquo;Finish&rdquo;）。</p>\n\n<p>问总共有多少条不同的路径？</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png\"></p>\n\n<p><small>例如，上图是一个7 x 3 的网格。有多少可能的路径？</small></p>\n\n<p><strong>说明：</strong><em>m</em>&nbsp;和 <em>n </em>的值均不超过 100。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> m = 3, n = 2\n<strong>输出:</strong> 3\n<strong>解释:</strong>\n从左上角开始，总共有 3 条路径可以到达右下角。\n1. 向右 -&gt; 向右 -&gt; 向下\n2. 向右 -&gt; 向下 -&gt; 向右\n3. 向下 -&gt; 向右 -&gt; 向右\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> m = 7, n = 3\n<strong>输出:</strong> 28</pre>\n","remove-duplicates-from-sorted-list-ii":"<p>给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中&nbsp;<em>没有重复出现&nbsp;</em>的数字。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5\n<strong>输出:</strong> 1-&gt;2-&gt;5\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> 1-&gt;1-&gt;1-&gt;2-&gt;3\n<strong>输出:</strong> 2-&gt;3</pre>\n","reverse-linked-list-ii":"<p>反转从位置 <em>m</em> 到 <em>n</em> 的链表。请使用一趟扫描完成反转。</p>\n\n<p><strong>说明:</strong><br>\n1 &le;&nbsp;<em>m</em>&nbsp;&le;&nbsp;<em>n</em>&nbsp;&le; 链表长度。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, <em>m</em> = 2, <em>n</em> = 4\n<strong>输出:</strong> 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</pre>\n","edit-distance":"<p>给定两个单词&nbsp;<em>word1</em> 和&nbsp;<em>word2</em>，计算出将&nbsp;<em>word1</em>&nbsp;转换成&nbsp;<em>word2 </em>所使用的最少操作数&nbsp;。</p>\n\n<p>你可以对一个单词进行如下三种操作：</p>\n\n<ol>\n\t<li>插入一个字符</li>\n\t<li>删除一个字符</li>\n\t<li>替换一个字符</li>\n</ol>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> word1 = &quot;horse&quot;, word2 = &quot;ros&quot;\n<strong>输出:</strong> 3\n<strong>解释:</strong> \nhorse -&gt; rorse (将 &#39;h&#39; 替换为 &#39;r&#39;)\nrorse -&gt; rose (删除 &#39;r&#39;)\nrose -&gt; ros (删除 &#39;e&#39;)\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> word1 = &quot;intention&quot;, word2 = &quot;execution&quot;\n<strong>输出:</strong> 5\n<strong>解释:</strong> \nintention -&gt; inention (删除 &#39;t&#39;)\ninention -&gt; enention (将 &#39;i&#39; 替换为 &#39;e&#39;)\nenention -&gt; exention (将 &#39;n&#39; 替换为 &#39;x&#39;)\nexention -&gt; exection (将 &#39;n&#39; 替换为 &#39;c&#39;)\nexection -&gt; execution (插入 &#39;u&#39;)\n</pre>\n","climbing-stairs":"<p>假设你正在爬楼梯。需要 <em>n</em>&nbsp;阶你才能到达楼顶。</p>\n\n<p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>\n\n<p><strong>注意：</strong>给定 <em>n</em> 是一个正整数。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong> 2\n<strong>输出：</strong> 2\n<strong>解释：</strong> 有两种方法可以爬到楼顶。\n1.  1 阶 + 1 阶\n2.  2 阶</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong> 3\n<strong>输出：</strong> 3\n<strong>解释：</strong> 有三种方法可以爬到楼顶。\n1.  1 阶 + 1 阶 + 1 阶\n2.  1 阶 + 2 阶\n3.  2 阶 + 1 阶\n</pre>\n","convert-sorted-list-to-binary-search-tree":"<p>给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。</p>\n\n<p>本题中，一个高度平衡二叉树是指一个二叉树<em>每个节点&nbsp;</em>的左右两个子树的高度差的绝对值不超过 1。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>给定的有序链表： [-10, -3, 0, 5, 9],\n\n一个可能的答案是：[0, -3, 9, -10, null, 5], 它可以表示下面这个高度平衡二叉搜索树：\n\n      0\n     / \\\n   -3   9\n   /   /\n -10  5\n</pre>\n","unique-binary-search-trees":"<p>给定一个整数 <em>n</em>，求以&nbsp;1 ...&nbsp;<em>n</em>&nbsp;为节点组成的二叉搜索树有多少种？</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> 3\n<strong>输出:</strong> 5\n<strong>解释:\n</strong>给定 <em>n</em> = 3, 一共有 5 种不同结构的二叉搜索树:\n\n   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3</pre>\n","minimum-window-substring":"<p>给定一个字符串 S 和一个字符串 T，请在 S 中找出包含 T 所有字母的最小子串。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入: S</strong> = &quot;ADOBECODEBANC&quot;, <strong>T</strong> = &quot;ABC&quot;\n<strong>输出:</strong> &quot;BANC&quot;</pre>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>如果 S 中不存这样的子串，则返回空字符串 <code>&quot;&quot;</code>。</li>\n\t<li>如果 S 中存在这样的子串，我们保证它是唯一的答案。</li>\n</ul>\n","scramble-string":"<p>给定一个字符串&nbsp;<em>s1</em>，我们可以把它递归地分割成两个非空子字符串，从而将其表示为二叉树。</p>\n\n<p>下图是字符串&nbsp;<em>s1</em>&nbsp;=&nbsp;<code>&quot;great&quot;</code>&nbsp;的一种可能的表示形式。</p>\n\n<pre>    great\n   /    \\\n  gr    eat\n / \\    /  \\\ng   r  e   at\n           / \\\n          a   t\n</pre>\n\n<p>在扰乱这个字符串的过程中，我们可以挑选任何一个非叶节点，然后交换它的两个子节点。</p>\n\n<p>例如，如果我们挑选非叶节点&nbsp;<code>&quot;gr&quot;</code>&nbsp;，交换它的两个子节点，将会产生扰乱字符串&nbsp;<code>&quot;rgeat&quot;</code>&nbsp;。</p>\n\n<pre>    rgeat\n   /    \\\n  rg    eat\n / \\    /  \\\nr   g  e   at\n           / \\\n          a   t\n</pre>\n\n<p>我们将&nbsp;<code>&quot;rgeat&rdquo;</code>&nbsp;称作&nbsp;<code>&quot;great&quot;</code>&nbsp;的一个扰乱字符串。</p>\n\n<p>同样地，如果我们继续将其节点&nbsp;<code>&quot;eat&quot;</code>&nbsp;和&nbsp;<code>&quot;at&quot;</code>&nbsp;进行交换，将会产生另一个新的扰乱字符串&nbsp;<code>&quot;rgtae&quot;</code>&nbsp;。</p>\n\n<pre>    rgtae\n   /    \\\n  rg    tae\n / \\    /  \\\nr   g  ta  e\n       / \\\n      t   a\n</pre>\n\n<p>我们将&nbsp;<code>&quot;rgtae&rdquo;</code>&nbsp;称作&nbsp;<code>&quot;great&quot;</code>&nbsp;的一个扰乱字符串。</p>\n\n<p>给出两个长度相等的字符串 <em>s1 </em>和&nbsp;<em>s2</em>，判断&nbsp;<em>s2&nbsp;</em>是否是&nbsp;<em>s1&nbsp;</em>的扰乱字符串。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> s1 = &quot;great&quot;, s2 = &quot;rgeat&quot;\n<strong>输出:</strong> true\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> s1 = &quot;abcde&quot;, s2 = &quot;caebd&quot;\n<strong>输出:</strong> false</pre>\n","construct-binary-tree-from-preorder-and-inorder-traversal":"<p>根据一棵树的前序遍历与中序遍历构造二叉树。</p>\n\n<p><strong>注意:</strong><br>\n你可以假设树中没有重复的元素。</p>\n\n<p>例如，给出</p>\n\n<pre>前序遍历 preorder =&nbsp;[3,9,20,15,7]\n中序遍历 inorder = [9,3,15,20,7]</pre>\n\n<p>返回如下的二叉树：</p>\n\n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7</pre>\n","sqrtx":"<p>实现&nbsp;<code>int sqrt(int x)</code>&nbsp;函数。</p>\n\n<p>计算并返回&nbsp;<em>x</em>&nbsp;的平方根，其中&nbsp;<em>x </em>是非负整数。</p>\n\n<p>由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> 4\n<strong>输出:</strong> 2\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> 8\n<strong>输出:</strong> 2\n<strong>说明:</strong> 8 的平方根是 2.82842..., \n&nbsp;    由于返回类型是整数，小数部分将被舍去。\n</pre>\n","largest-rectangle-in-histogram":"<p>给定 <em>n</em> 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。</p>\n\n<p>求在该柱状图中，能够勾勒出来的矩形的最大面积。</p>\n\n<p>&nbsp;</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/histogram.png\"></p>\n\n<p><small>以上是柱状图的示例，其中每个柱子的宽度为 1，给定的高度为&nbsp;<code>[2,1,5,6,2,3]</code>。</small></p>\n\n<p>&nbsp;</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/histogram_area.png\"></p>\n\n<p><small>图中阴影部分为所能勾勒出的最大矩形面积，其面积为&nbsp;<code>10</code>&nbsp;个单位。</small></p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [2,1,5,6,2,3]\n<strong>输出:</strong> 10</pre>\n","unique-binary-search-trees-ii":"<p>给定一个整数 <em>n</em>，生成所有由 1 ...&nbsp;<em>n</em> 为节点所组成的<strong>二叉搜索树</strong>。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> 3\n<strong>输出:</strong>\n[\n&nbsp; [1,null,3,2],\n&nbsp; [3,2,null,1],\n&nbsp; [3,1,null,null,2],\n&nbsp; [2,1,3],\n&nbsp; [1,null,2,null,3]\n]\n<strong>解释:</strong>\n以上的输出对应以下 5 种不同结构的二叉搜索树：\n\n   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3\n</pre>\n","combinations":"<p>给定两个整数 <em>n</em> 和 <em>k</em>，返回 1 ... <em>n </em>中所有可能的 <em>k</em> 个数的组合。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong>&nbsp;n = 4, k = 2\n<strong>输出:</strong>\n[\n  [2,4],\n  [3,4],\n  [2,3],\n  [1,2],\n  [1,3],\n  [1,4],\n]</pre>\n","minimum-path-sum":"<p>给定一个包含非负整数的 <em>m</em>&nbsp;x&nbsp;<em>n</em>&nbsp;网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p>\n\n<p><strong>说明：</strong>每次只能向下或者向右移动一步。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong>\n[\n&nbsp; [1,3,1],\n  [1,5,1],\n  [4,2,1]\n]\n<strong>输出:</strong> 7\n<strong>解释:</strong> 因为路径 1&rarr;3&rarr;1&rarr;1&rarr;1 的总和最小。\n</pre>\n","recover-binary-search-tree":"<p>二叉搜索树中的两个节点被错误地交换。</p>\n\n<p>请在不改变其结构的情况下，恢复这棵树。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> [1,3,null,null,2]\n\n&nbsp;  1\n&nbsp; /\n&nbsp;3\n&nbsp; \\\n&nbsp;  2\n\n<strong>输出:</strong> [3,1,null,null,2]\n\n&nbsp;  3\n&nbsp; /\n&nbsp;1\n&nbsp; \\\n&nbsp;  2\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> [3,1,4,null,null,2]\n\n  3\n / \\\n1   4\n&nbsp;  /\n&nbsp; 2\n\n<strong>输出:</strong> [2,1,4,null,null,3]\n\n  2\n / \\\n1   4\n&nbsp;  /\n &nbsp;3</pre>\n\n<p><strong>进阶:</strong></p>\n\n<ul>\n\t<li>使用 O(<em>n</em>) 空间复杂度的解法很容易实现。</li>\n\t<li>你能想出一个只使用常数空间的解决方案吗？</li>\n</ul>\n","text-justification":"<p>给定一个单词数组和一个长度&nbsp;<em>maxWidth</em>，重新排版单词，使其成为每行恰好有&nbsp;<em>maxWidth</em>&nbsp;个字符，且左右两端对齐的文本。</p>\n\n<p>你应该使用&ldquo;贪心算法&rdquo;来放置给定的单词；也就是说，尽可能多地往每行中放置单词。必要时可用空格&nbsp;<code>&#39; &#39;</code>&nbsp;填充，使得每行恰好有 <em>maxWidth</em>&nbsp;个字符。</p>\n\n<p>要求尽可能均匀分配单词间的空格数量。如果某一行单词间的空格不能均匀分配，则左侧放置的空格数要多于右侧的空格数。</p>\n\n<p>文本的最后一行应为左对齐，且单词之间不插入<strong>额外的</strong>空格。</p>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>单词是指由非空格字符组成的字符序列。</li>\n\t<li>每个单词的长度大于 0，小于等于&nbsp;<em>maxWidth</em>。</li>\n\t<li>输入单词数组 <code>words</code>&nbsp;至少包含一个单词。</li>\n</ul>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong>\nwords = [&quot;This&quot;, &quot;is&quot;, &quot;an&quot;, &quot;example&quot;, &quot;of&quot;, &quot;text&quot;, &quot;justification.&quot;]\nmaxWidth = 16\n<strong>输出:</strong>\n[\n&nbsp; &nbsp;&quot;This &nbsp; &nbsp;is &nbsp; &nbsp;an&quot;,\n&nbsp; &nbsp;&quot;example &nbsp;of text&quot;,\n&nbsp; &nbsp;&quot;justification. &nbsp;&quot;\n]\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong>\nwords = [&quot;What&quot;,&quot;must&quot;,&quot;be&quot;,&quot;acknowledgment&quot;,&quot;shall&quot;,&quot;be&quot;]\nmaxWidth = 16\n<strong>输出:</strong>\n[\n&nbsp; &quot;What &nbsp; must &nbsp; be&quot;,\n&nbsp; &quot;acknowledgment &nbsp;&quot;,\n&nbsp; &quot;shall be &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n]\n<strong>解释: </strong>注意最后一行的格式应为 &quot;shall be    &quot; 而不是 &quot;shall     be&quot;,\n&nbsp;    因为最后一行应为左对齐，而不是左右两端对齐。       \n     第二行同样为左对齐，这是因为这行只包含一个单词。\n</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre><strong>输入:</strong>\nwords = [&quot;Science&quot;,&quot;is&quot;,&quot;what&quot;,&quot;we&quot;,&quot;understand&quot;,&quot;well&quot;,&quot;enough&quot;,&quot;to&quot;,&quot;explain&quot;,\n&nbsp;        &quot;to&quot;,&quot;a&quot;,&quot;computer.&quot;,&quot;Art&quot;,&quot;is&quot;,&quot;everything&quot;,&quot;else&quot;,&quot;we&quot;,&quot;do&quot;]\nmaxWidth = 20\n<strong>输出:</strong>\n[\n&nbsp; &quot;Science &nbsp;is &nbsp;what we&quot;,\n  &quot;understand &nbsp; &nbsp; &nbsp;well&quot;,\n&nbsp; &quot;enough to explain to&quot;,\n&nbsp; &quot;a &nbsp;computer. &nbsp;Art is&quot;,\n&nbsp; &quot;everything &nbsp;else &nbsp;we&quot;,\n&nbsp; &quot;do &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n]\n</pre>\n","word-search":"<p>给定一个二维网格和一个单词，找出该单词是否存在于网格中。</p>\n\n<p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中&ldquo;相邻&rdquo;单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>board =\n[\n  [&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;E&#39;],\n  [&#39;S&#39;,&#39;F&#39;,&#39;C&#39;,&#39;S&#39;],\n  [&#39;A&#39;,&#39;D&#39;,&#39;E&#39;,&#39;E&#39;]\n]\n\n给定 word = &quot;<strong>ABCCED</strong>&quot;, 返回 <strong>true</strong>.\n给定 word = &quot;<strong>SEE</strong>&quot;, 返回 <strong>true</strong>.\n给定 word = &quot;<strong>ABCB</strong>&quot;, 返回 <strong>false</strong>.</pre>\n","unique-paths-ii":"<p>一个机器人位于一个 <em>m x n </em>网格的左上角 （起始点在下图中标记为&ldquo;Start&rdquo; ）。</p>\n\n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为&ldquo;Finish&rdquo;）。</p>\n\n<p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png\" style=\"height: 183px; width: 400px;\"></p>\n\n<p>网格中的障碍物和空位置分别用 <code>1</code> 和 <code>0</code> 来表示。</p>\n\n<p><strong>说明：</strong><em>m</em>&nbsp;和 <em>n </em>的值均不超过 100。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:\n</strong>[\n&nbsp; [0,0,0],\n&nbsp; [0,1,0],\n&nbsp; [0,0,0]\n]\n<strong>输出:</strong> 2\n<strong>解释:</strong>\n3x3 网格的正中间有一个障碍物。\n从左上角到右下角一共有 <code>2</code> 条不同的路径：\n1. 向右 -&gt; 向右 -&gt; 向下 -&gt; 向下\n2. 向下 -&gt; 向下 -&gt; 向右 -&gt; 向右\n</pre>\n","plus-one":"<p>给定一个由<strong>整数</strong>组成的<strong>非空</strong>数组所表示的非负整数，在该数的基础上加一。</p>\n\n<p>最高位数字存放在数组的首位， 数组中每个元素只存储一个数字。</p>\n\n<p>你可以假设除了整数 0 之外，这个整数不会以零开头。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> [1,2,3]\n<strong>输出:</strong> [1,2,4]\n<strong>解释:</strong> 输入数组表示数字 123。\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> [4,3,2,1]\n<strong>输出:</strong> [4,3,2,2]\n<strong>解释:</strong> 输入数组表示数字 4321。\n</pre>\n","add-binary":"<p>给定两个二进制字符串，返回他们的和（用二进制表示）。</p>\n\n<p>输入为<strong>非空</strong>字符串且只包含数字&nbsp;<code>1</code>&nbsp;和&nbsp;<code>0</code>。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> a = &quot;11&quot;, b = &quot;1&quot;\n<strong>输出:</strong> &quot;100&quot;</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> a = &quot;1010&quot;, b = &quot;1011&quot;\n<strong>输出:</strong> &quot;10101&quot;</pre>\n","search-a-2d-matrix":"<p>编写一个高效的算法来判断&nbsp;<em>m</em> x <em>n</em>&nbsp;矩阵中，是否存在一个目标值。该矩阵具有如下特性：</p>\n\n<ul>\n\t<li>每行中的整数从左到右按升序排列。</li>\n\t<li>每行的第一个整数大于前一行的最后一个整数。</li>\n</ul>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong>\nmatrix = [\n  [1,   3,  5,  7],\n  [10, 11, 16, 20],\n  [23, 30, 34, 50]\n]\ntarget = 3\n<strong>输出:</strong> true\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong>\nmatrix = [\n  [1,   3,  5,  7],\n  [10, 11, 16, 20],\n  [23, 30, 34, 50]\n]\ntarget = 13\n<strong>输出:</strong> false</pre>\n","set-matrix-zeroes":"<p>给定一个&nbsp;<em>m</em> x <em>n</em> 的矩阵，如果一个元素为 0，则将其所在行和列的所有元素都设为 0。请使用<strong><a href=\"http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">原地</a></strong>算法<strong>。</strong></p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> \n[\n&nbsp; [1,1,1],\n&nbsp; [1,0,1],\n&nbsp; [1,1,1]\n]\n<strong>输出:</strong> \n[\n&nbsp; [1,0,1],\n&nbsp; [0,0,0],\n&nbsp; [1,0,1]\n]\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> \n[\n&nbsp; [0,1,2,0],\n&nbsp; [3,4,5,2],\n&nbsp; [1,3,1,5]\n]\n<strong>输出:</strong> \n[\n&nbsp; [0,0,0,0],\n&nbsp; [0,4,5,0],\n&nbsp; [0,3,1,0]\n]</pre>\n\n<p><strong>进阶:</strong></p>\n\n<ul>\n\t<li>一个直接的解决方案是使用 &nbsp;O(<em>m</em><em>n</em>)&nbsp;的额外空间，但这并不是一个好的解决方案。</li>\n\t<li>一个简单的改进方案是使用 O(<em>m</em>&nbsp;+&nbsp;<em>n</em>) 的额外空间，但这仍然不是最好的解决方案。</li>\n\t<li>你能想出一个常数空间的解决方案吗？</li>\n</ul>\n","powx-n":"<p>实现&nbsp;<a href=\"https://www.cplusplus.com/reference/valarray/pow/\" target=\"_blank\">pow(<em>x</em>, <em>n</em>)</a>&nbsp;，即计算 x 的 n 次幂函数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> 2.00000, 10\n<strong>输出:</strong> 1024.00000\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> 2.10000, 3\n<strong>输出:</strong> 9.26100\n</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre><strong>输入:</strong> 2.00000, -2\n<strong>输出:</strong> 0.25000\n<strong>解释:</strong> 2<sup>-2</sup> = 1/2<sup>2</sup> = 1/4 = 0.25</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>-100.0 &lt;&nbsp;<em>x</em>&nbsp;&lt; 100.0</li>\n\t<li><em>n</em>&nbsp;是 32 位有符号整数，其数值范围是&nbsp;[&minus;2<sup>31</sup>,&nbsp;2<sup>31&nbsp;</sup>&minus; 1] 。</li>\n</ul>\n","jump-game":"<p>给定一个非负整数数组，你最初位于数组的第一个位置。</p>\n\n<p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p>\n\n<p>判断你是否能够到达最后一个位置。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> [2,3,1,1,4]\n<strong>输出:</strong> true\n<strong>解释:</strong> 从位置 0 到 1 跳 1 步, 然后跳 3 步到达最后一个位置。\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> [3,2,1,0,4]\n<strong>输出:</strong> false\n<strong>解释:</strong> 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。\n</pre>\n","permutations-ii":"<p>给定一个可包含重复数字的序列，返回所有不重复的全排列。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [1,1,2]\n<strong>输出:</strong>\n[\n  [1,1,2],\n  [1,2,1],\n  [2,1,1]\n]</pre>\n","combination-sum":"<p>给定一个<strong>无重复元素</strong>的数组&nbsp;<code>candidates</code>&nbsp;和一个目标数&nbsp;<code>target</code>&nbsp;，找出&nbsp;<code>candidates</code>&nbsp;中所有可以使数字和为&nbsp;<code>target</code>&nbsp;的组合。</p>\n\n<p><code>candidates</code>&nbsp;中的数字可以无限制重复被选取。</p>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>所有数字（包括&nbsp;<code>target</code>）都是正整数。</li>\n\t<li>解集不能包含重复的组合。&nbsp;</li>\n</ul>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> candidates = <code>[2,3,6,7], </code>target = <code>7</code>,\n<strong>所求解集为:</strong>\n[\n  [7],\n  [2,2,3]\n]\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> candidates = [2,3,5]<code>, </code>target = 8,\n<strong>所求解集为:</strong>\n[\n&nbsp; [2,2,2,2],\n&nbsp; [2,3,3],\n&nbsp; [3,5]\n]</pre>\n","rotate-list":"<p>给定一个链表，旋转链表，将链表每个节点向右移动&nbsp;<em>k&nbsp;</em>个位置，其中&nbsp;<em>k&nbsp;</em>是非负数。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, k = 2\n<strong>输出:</strong> 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL\n<strong>解释:</strong>\n向右旋转 1 步: 5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;NULL\n向右旋转 2 步: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> 0-&gt;1-&gt;2-&gt;NULL, k = 4\n<strong>输出:</strong> <code>2-&gt;0-&gt;1-&gt;NULL</code>\n<strong>解释:</strong>\n向右旋转 1 步: 2-&gt;0-&gt;1-&gt;NULL\n向右旋转 2 步: 1-&gt;2-&gt;0-&gt;NULL\n向右旋转 3 步:&nbsp;<code>0-&gt;1-&gt;2-&gt;NULL</code>\n向右旋转 4 步:&nbsp;<code>2-&gt;0-&gt;1-&gt;NULL</code></pre>\n","rotate-image":"<p>给定一个 <em>n&nbsp;</em>&times;&nbsp;<em>n</em> 的二维矩阵表示一个图像。</p>\n\n<p>将图像顺时针旋转 90 度。</p>\n\n<p><strong>说明：</strong></p>\n\n<p>你必须在<strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">原地</a></strong>旋转图像，这意味着你需要直接修改输入的二维矩阵。<strong>请不要</strong>使用另一个矩阵来旋转图像。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>给定 <strong>matrix</strong> = \n[\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n],\n\n<strong>原地</strong>旋转输入矩阵，使其变为:\n[\n  [7,4,1],\n  [8,5,2],\n  [9,6,3]\n]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>给定 <strong>matrix</strong> =\n[\n  [ 5, 1, 9,11],\n  [ 2, 4, 8,10],\n  [13, 3, 6, 7],\n  [15,14,12,16]\n], \n\n<strong>原地</strong>旋转输入矩阵，使其变为:\n[\n  [15,13, 2, 5],\n  [14, 3, 4, 1],\n  [12, 6, 8, 9],\n  [16, 7,10,11]\n]\n</pre>\n","merge-intervals":"<p>给出一个区间的集合，请合并所有重叠的区间。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [[1,3],[2,6],[8,10],[15,18]]\n<strong>输出:</strong> [[1,6],[8,10],[15,18]]\n<strong>解释:</strong> 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> [[1,4],[4,5]]\n<strong>输出:</strong> [[1,5]]\n<strong>解释:</strong> 区间 [1,4] 和 [4,5] 可被视为重叠区间。</pre>\n","implement-strstr":"<p>实现&nbsp;<a href=\"https://baike.baidu.com/item/strstr/811469\" target=\"_blank\">strStr()</a>&nbsp;函数。</p>\n\n<p>给定一个&nbsp;haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回&nbsp; <strong>-1</strong>。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> haystack = &quot;hello&quot;, needle = &quot;ll&quot;\n<strong>输出:</strong> 2\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> haystack = &quot;aaaaa&quot;, needle = &quot;bba&quot;\n<strong>输出:</strong> -1\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<p>当&nbsp;<code>needle</code>&nbsp;是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。</p>\n\n<p>对于本题而言，当&nbsp;<code>needle</code>&nbsp;是空字符串时我们应当返回 0 。这与C语言的&nbsp;<a href=\"https://baike.baidu.com/item/strstr/811469\" target=\"_blank\">strstr()</a>&nbsp;以及 Java的&nbsp;<a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#indexOf(java.lang.String)\" target=\"_blank\">indexOf()</a>&nbsp;定义相符。</p>\n","combination-sum-ii":"<p>给定一个数组&nbsp;<code>candidates</code>&nbsp;和一个目标数&nbsp;<code>target</code>&nbsp;，找出&nbsp;<code>candidates</code>&nbsp;中所有可以使数字和为&nbsp;<code>target</code>&nbsp;的组合。</p>\n\n<p><code>candidates</code>&nbsp;中的每个数字在每个组合中只能使用一次。</p>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>所有数字（包括目标数）都是正整数。</li>\n\t<li>解集不能包含重复的组合。&nbsp;</li>\n</ul>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> candidates =&nbsp;<code>[10,1,2,7,6,1,5]</code>, target =&nbsp;<code>8</code>,\n<strong>所求解集为:</strong>\n[\n  [1, 7],\n  [1, 2, 5],\n  [2, 6],\n  [1, 1, 6]\n]\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> candidates =&nbsp;[2,5,2,1,2], target =&nbsp;5,\n<strong>所求解集为:</strong>\n[\n&nbsp; [1,2,2],\n&nbsp; [5]\n]</pre>\n","sudoku-solver":"<p>编写一个程序，通过已填充的空格来解决数独问题。</p>\n\n<p>一个数独的解法需<strong>遵循如下规则</strong>：</p>\n\n<ol>\n\t<li>数字&nbsp;<code>1-9</code>&nbsp;在每一行只能出现一次。</li>\n\t<li>数字&nbsp;<code>1-9</code>&nbsp;在每一列只能出现一次。</li>\n\t<li>数字&nbsp;<code>1-9</code>&nbsp;在每一个以粗实线分隔的&nbsp;<code>3x3</code>&nbsp;宫内只能出现一次。</li>\n</ol>\n\n<p>空白格用&nbsp;<code>&#39;.&#39;</code>&nbsp;表示。</p>\n\n<p><img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png\"></p>\n\n<p><small>一个数独。</small></p>\n\n<p><img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png\"></p>\n\n<p><small>答案被标成红色。</small></p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>给定的数独序列只包含数字&nbsp;<code>1-9</code>&nbsp;和字符&nbsp;<code>&#39;.&#39;</code>&nbsp;。</li>\n\t<li>你可以假设给定的数独只有唯一解。</li>\n\t<li>给定数独永远是&nbsp;<code>9x9</code>&nbsp;形式的。</li>\n</ul>\n","multiply-strings":"<p>给定两个以字符串形式表示的非负整数&nbsp;<code>num1</code>&nbsp;和&nbsp;<code>num2</code>，返回&nbsp;<code>num1</code>&nbsp;和&nbsp;<code>num2</code>&nbsp;的乘积，它们的乘积也表示为字符串形式。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> num1 = &quot;2&quot;, num2 = &quot;3&quot;\n<strong>输出:</strong> &quot;6&quot;</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> num1 = &quot;123&quot;, num2 = &quot;456&quot;\n<strong>输出:</strong> &quot;56088&quot;</pre>\n\n<p><strong>说明：</strong></p>\n\n<ol>\n\t<li><code>num1</code>&nbsp;和&nbsp;<code>num2</code>&nbsp;的长度小于110。</li>\n\t<li><code>num1</code> 和&nbsp;<code>num2</code> 只包含数字&nbsp;<code>0-9</code>。</li>\n\t<li><code>num1</code> 和&nbsp;<code>num2</code>&nbsp;均不以零开头，除非是数字 0 本身。</li>\n\t<li><strong>不能使用任何标准库的大数类型（比如 BigInteger）</strong>或<strong>直接将输入转换为整数来处理</strong>。</li>\n</ol>\n","spiral-matrix":"<p>给定一个包含&nbsp;<em>m</em> x <em>n</em>&nbsp;个元素的矩阵（<em>m</em> 行, <em>n</em> 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong>\n[\n [ 1, 2, 3 ],\n [ 4, 5, 6 ],\n [ 7, 8, 9 ]\n]\n<strong>输出:</strong> [1,2,3,6,9,8,7,4,5]\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong>\n[\n  [1, 2, 3, 4],\n  [5, 6, 7, 8],\n  [9,10,11,12]\n]\n<strong>输出:</strong> [1,2,3,4,8,12,11,10,9,5,6,7]\n</pre>\n","remove-nth-node-from-end-of-list":"<p>给定一个链表，删除链表的倒数第&nbsp;<em>n&nbsp;</em>个节点，并且返回链表的头结点。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>给定一个链表: <strong>1-&gt;2-&gt;3-&gt;4-&gt;5</strong>, 和 <strong><em>n</em> = 2</strong>.\n\n当删除了倒数第二个节点后，链表变为 <strong>1-&gt;2-&gt;3-&gt;5</strong>.\n</pre>\n\n<p><strong>说明：</strong></p>\n\n<p>给定的 <em>n</em>&nbsp;保证是有效的。</p>\n\n<p><strong>进阶：</strong></p>\n\n<p>你能尝试使用一趟扫描实现吗？</p>\n","3sum":"<p>给定一个包含 <em>n</em> 个整数的数组&nbsp;<code>nums</code>，判断&nbsp;<code>nums</code>&nbsp;中是否存在三个元素 <em>a，b，c ，</em>使得&nbsp;<em>a + b + c = </em>0 ？找出所有满足条件且不重复的三元组。</p>\n\n<p><strong>注意：</strong>答案中不可以包含重复的三元组。</p>\n\n<pre>例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，\n\n满足要求的三元组集合为：\n[\n  [-1, 0, 1],\n  [-1, -1, 2]\n]\n</pre>\n","insert-interval":"<p>给出一个<em>无重叠的 ，</em>按照区间起始端点排序的区间列表。</p>\n\n<p>在列表中插入一个新的区间，你需要确保列表中的区间仍然有序且不重叠（如果有必要的话，可以合并区间）。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> intervals = [[1,3],[6,9]], newInterval = [2,5]\n<strong>输出:</strong> [[1,5],[6,9]]\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> intervals = <code>[[1,2],[3,5],[6,7],[8,10],[12,16]]</code>, newInterval = <code>[4,8]</code>\n<strong>输出:</strong> [[1,2],[3,10],[12,16]]\n<strong>解释:</strong> 这是因为新的区间 <code>[4,8]</code> 与 <code>[3,5],[6,7],[8,10]</code>&nbsp;重叠。\n</pre>\n","find-first-and-last-position-of-element-in-sorted-array":"<p>给定一个按照升序排列的整数数组 <code>nums</code>，和一个目标值 <code>target</code>。找出给定目标值在数组中的开始位置和结束位置。</p>\n\n<p>你的算法时间复杂度必须是&nbsp;<em>O</em>(log <em>n</em>) 级别。</p>\n\n<p>如果数组中不存在目标值，返回&nbsp;<code>[-1, -1]</code>。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> nums = [<code>5,7,7,8,8,10]</code>, target = 8\n<strong>输出:</strong> [3,4]</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> nums = [<code>5,7,7,8,8,10]</code>, target = 6\n<strong>输出:</strong> [-1,-1]</pre>\n","reverse-nodes-in-k-group":"<p>给出一个链表，每&nbsp;<em>k&nbsp;</em>个节点一组进行翻转，并返回翻转后的链表。</p>\n\n<p><em>k&nbsp;</em>是一个正整数，它的值小于或等于链表的长度。如果节点总数不是&nbsp;<em>k&nbsp;</em>的整数倍，那么将最后剩余节点保持原有顺序。</p>\n\n<p><strong>示例 :</strong></p>\n\n<p>给定这个链表：<code>1-&gt;2-&gt;3-&gt;4-&gt;5</code></p>\n\n<p>当&nbsp;<em>k&nbsp;</em>= 2 时，应当返回: <code>2-&gt;1-&gt;4-&gt;3-&gt;5</code></p>\n\n<p>当&nbsp;<em>k&nbsp;</em>= 3 时，应当返回: <code>3-&gt;2-&gt;1-&gt;4-&gt;5</code></p>\n\n<p><strong>说明 :</strong></p>\n\n<ul>\n\t<li>你的算法只能使用常数的额外空间。</li>\n\t<li><strong>你不能只是单纯的改变节点内部的值</strong>，而是需要实际的进行节点交换。</li>\n</ul>\n","n-queens-ii":"<p><em>n&nbsp;</em>皇后问题研究的是如何将 <em>n</em>&nbsp;个皇后放置在 <em>n</em>&times;<em>n</em> 的棋盘上，并且使皇后彼此之间不能相互攻击。</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/8-queens.png\" style=\"height: 276px; width: 258px;\"></p>\n\n<p><small>上图为 8 皇后问题的一种解法。</small></p>\n\n<p>给定一个整数 <em>n</em>，返回 <em>n</em> 皇后不同的解决方案的数量。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> 4\n<strong>输出:</strong> 2\n<strong>解释:</strong> 4 皇后问题存在如下两个不同的解法。\n[\n&nbsp;[&quot;.Q..&quot;, &nbsp;// 解法 1\n&nbsp; &quot;...Q&quot;,\n&nbsp; &quot;Q...&quot;,\n&nbsp; &quot;..Q.&quot;],\n\n&nbsp;[&quot;..Q.&quot;, &nbsp;// 解法 2\n&nbsp; &quot;Q...&quot;,\n&nbsp; &quot;...Q&quot;,\n&nbsp; &quot;.Q..&quot;]\n]\n</pre>\n","length-of-last-word":"<p>给定一个仅包含大小写字母和空格&nbsp;<code>&#39; &#39;</code>&nbsp;的字符串，返回其最后一个单词的长度。</p>\n\n<p>如果不存在最后一个单词，请返回 0&nbsp;。</p>\n\n<p><strong>说明：</strong>一个单词是指由字母组成，但不包含任何空格的字符串。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> &quot;Hello World&quot;\n<strong>输出:</strong> 5\n</pre>\n","generate-parentheses":"<p>给出&nbsp;<em>n</em>&nbsp;代表生成括号的对数，请你写出一个函数，使其能够生成所有可能的并且<strong>有效的</strong>括号组合。</p>\n\n<p>例如，给出&nbsp;<em>n </em>=<em> </em>3，生成结果为：</p>\n\n<pre>[\n  &quot;((()))&quot;,\n  &quot;(()())&quot;,\n  &quot;(())()&quot;,\n  &quot;()(())&quot;,\n  &quot;()()()&quot;\n]\n</pre>\n","substring-with-concatenation-of-all-words":"<p>给定一个字符串&nbsp;<strong>s&nbsp;</strong>和一些长度相同的单词&nbsp;<strong>words。</strong>在<strong> s </strong>中找出可以恰好串联&nbsp;<strong>words&nbsp;</strong>中所有单词的子串的起始位置。</p>\n\n<p>注意子串要与&nbsp;<strong>words </strong>中的单词完全匹配，中间不能有其他字符，但不需要考虑&nbsp;<strong>words&nbsp;</strong>中单词串联的顺序。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:\n  s =</strong> &quot;barfoothefoobarman&quot;,\n<strong>  words = </strong>[&quot;foo&quot;,&quot;bar&quot;]\n<strong>输出:</strong> <code>[0,9]</code>\n<strong>解释:</strong> 从索引 0 和 9 开始的子串分别是 &quot;barfoor&quot; 和 &quot;foobar&quot; 。\n输出的顺序不重要, [9,0] 也是有效答案。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:\n  s =</strong> &quot;wordgoodstudentgoodword&quot;,\n<strong>  words = </strong>[&quot;word&quot;,&quot;student&quot;]\n<strong>输出:</strong> <code>[]</code>\n</pre>\n","merge-two-sorted-lists":"<p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>1-&gt;2-&gt;4, 1-&gt;3-&gt;4\n<strong>输出：</strong>1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4\n</pre>\n","n-queens":"<p><em>n&nbsp;</em>皇后问题研究的是如何将 <em>n</em>&nbsp;个皇后放置在 <em>n</em>&times;<em>n</em> 的棋盘上，并且使皇后彼此之间不能相互攻击。</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/8-queens.png\"></p>\n\n<p><small>上图为 8 皇后问题的一种解法。</small></p>\n\n<p>给定一个整数 <em>n</em>，返回所有不同的&nbsp;<em>n&nbsp;</em>皇后问题的解决方案。</p>\n\n<p>每一种解法包含一个明确的&nbsp;<em>n</em> 皇后问题的棋子放置方案，该方案中 <code>&#39;Q&#39;</code> 和 <code>&#39;.&#39;</code> 分别代表了皇后和空位。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> 4\n<strong>输出:</strong> [\n [&quot;.Q..&quot;,  // 解法 1\n  &quot;...Q&quot;,\n  &quot;Q...&quot;,\n  &quot;..Q.&quot;],\n\n [&quot;..Q.&quot;,  // 解法 2\n  &quot;Q...&quot;,\n  &quot;...Q&quot;,\n  &quot;.Q..&quot;]\n]\n<strong>解释:</strong> 4 皇后问题存在两个不同的解法。\n</pre>\n","wildcard-matching":"<p>给定一个字符串&nbsp;(<code>s</code>) 和一个字符模式&nbsp;(<code>p</code>) ，实现一个支持&nbsp;<code>&#39;?&#39;</code>&nbsp;和&nbsp;<code>&#39;*&#39;</code>&nbsp;的通配符匹配。</p>\n\n<pre>&#39;?&#39; 可以匹配任何单个字符。\n&#39;*&#39; 可以匹配任意字符串（包括空字符串）。\n</pre>\n\n<p>两个字符串<strong>完全匹配</strong>才算匹配成功。</p>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li><code>s</code>&nbsp;可能为空，且只包含从&nbsp;<code>a-z</code>&nbsp;的小写字母。</li>\n\t<li><code>p</code>&nbsp;可能为空，且只包含从&nbsp;<code>a-z</code>&nbsp;的小写字母，以及字符&nbsp;<code>?</code>&nbsp;和&nbsp;<code>*</code>。</li>\n</ul>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong>\ns = &quot;aa&quot;\np = &quot;a&quot;\n<strong>输出:</strong> false\n<strong>解释:</strong> &quot;a&quot; 无法匹配 &quot;aa&quot; 整个字符串。</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong>\ns = &quot;aa&quot;\np = &quot;*&quot;\n<strong>输出:</strong> true\n<strong>解释:</strong>&nbsp;&#39;*&#39; 可以匹配任意字符串。\n</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre><strong>输入:</strong>\ns = &quot;cb&quot;\np = &quot;?a&quot;\n<strong>输出:</strong> false\n<strong>解释:</strong>&nbsp;&#39;?&#39; 可以匹配 &#39;c&#39;, 但第二个 &#39;a&#39; 无法匹配 &#39;b&#39;。\n</pre>\n\n<p><strong>示例&nbsp;4:</strong></p>\n\n<pre><strong>输入:</strong>\ns = &quot;adceb&quot;\np = &quot;*a*b&quot;\n<strong>输出:</strong> true\n<strong>解释:</strong>&nbsp;第一个 &#39;*&#39; 可以匹配空字符串, 第二个 &#39;*&#39; 可以匹配字符串 &quot;dce&quot;.\n</pre>\n\n<p><strong>示例&nbsp;5:</strong></p>\n\n<pre><strong>输入:</strong>\ns = &quot;acdcb&quot;\np = &quot;a*c?b&quot;\n<strong>输入:</strong> false</pre>\n","permutation-sequence":"<p>给出集合&nbsp;<code>[1,2,3,&hellip;,<em>n</em>]</code>，其所有元素共有&nbsp;<em>n</em>! 种排列。</p>\n\n<p>按大小顺序列出所有排列情况，并一一标记，当&nbsp;<em>n </em>= 3 时, 所有排列如下：</p>\n\n<ol>\n\t<li><code>&quot;123&quot;</code></li>\n\t<li><code>&quot;132&quot;</code></li>\n\t<li><code>&quot;213&quot;</code></li>\n\t<li><code>&quot;231&quot;</code></li>\n\t<li><code>&quot;312&quot;</code></li>\n\t<li><code>&quot;321&quot;</code></li>\n</ol>\n\n<p>给定&nbsp;<em>n</em> 和&nbsp;<em>k</em>，返回第&nbsp;<em>k</em>&nbsp;个排列。</p>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>给定<em> n</em>&nbsp;的范围是 [1, 9]。</li>\n\t<li>给定 <em>k&nbsp;</em>的范围是[1, &nbsp;<em>n</em>!]。</li>\n</ul>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> n = 3, k = 3\n<strong>输出:</strong> &quot;213&quot;\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> n = 4, k = 9\n<strong>输出:</strong> &quot;2314&quot;\n</pre>\n","count-and-say":"<p>报数序列是一个整数序列，按照其中的整数的顺序进行报数，得到下一个数。其前五项如下：</p>\n\n<pre>1.     1\n2.     11\n3.     21\n4.     1211\n5.     111221\n</pre>\n\n<p><code>1</code>&nbsp;被读作&nbsp;&nbsp;<code>&quot;one 1&quot;</code>&nbsp;&nbsp;(<code>&quot;一个一&quot;</code>) , 即&nbsp;<code>11</code>。<br>\n<code>11</code> 被读作&nbsp;<code>&quot;two 1s&quot;</code>&nbsp;(<code>&quot;两个一&quot;</code>）, 即&nbsp;<code>21</code>。<br>\n<code>21</code> 被读作&nbsp;<code>&quot;one 2&quot;</code>, &nbsp;&quot;<code>one 1&quot;</code>&nbsp;（<code>&quot;一个二&quot;</code>&nbsp;,&nbsp;&nbsp;<code>&quot;一个一&quot;</code>)&nbsp;, 即&nbsp;<code>1211</code>。</p>\n\n<p>给定一个正整数 <em>n</em>（1 &le;&nbsp;<em>n</em>&nbsp;&le; 30），输出报数序列的第 <em>n</em> 项。</p>\n\n<p>注意：整数顺序将表示为一个字符串。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> 1\n<strong>输出:</strong> &quot;1&quot;\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> 4\n<strong>输出:</strong> &quot;1211&quot;\n</pre>\n","first-missing-positive":"<p>给定一个未排序的整数数组，找出其中没有出现的最小的正整数。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>输入: [1,2,0]\n输出: 3\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre>输入: [3,4,-1,1]\n输出: 2\n</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre>输入: [7,8,9,11,12]\n输出: 1\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<p>你的算法的时间复杂度应为O(<em>n</em>)，并且只能使用常数级别的空间。</p>\n","trapping-rain-water":"<p>给定&nbsp;<em>n</em> 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rainwatertrap.png\" style=\"height: 161px; width: 412px;\"></p>\n\n<p><small>上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。&nbsp;<strong>感谢 Marcos</strong> 贡献此图。</small></p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [0,1,0,2,1,0,1,3,2,1,2,1]\n<strong>输出:</strong> 6</pre>\n","longest-valid-parentheses":"<p>给定一个只包含 <code>&#39;(&#39;</code>&nbsp;和 <code>&#39;)&#39;</code>&nbsp;的字符串，找出最长的包含有效括号的子串的长度。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> &quot;(()&quot;\n<strong>输出:</strong> 2\n<strong>解释:</strong> 最长有效括号子串为 <code>&quot;()&quot;</code>\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> &quot;<code>)()())</code>&quot;\n<strong>输出:</strong> 4\n<strong>解释:</strong> 最长有效括号子串为 <code>&quot;()()&quot;</code>\n</pre>\n","3sum-closest":"<p>给定一个包括&nbsp;<em>n</em> 个整数的数组&nbsp;<code>nums</code><em>&nbsp;</em>和 一个目标值&nbsp;<code>target</code>。找出&nbsp;<code>nums</code><em>&nbsp;</em>中的三个整数，使得它们的和与&nbsp;<code>target</code>&nbsp;最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p>\n\n<pre>例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.\n\n与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).\n</pre>\n","group-anagrams":"<p>给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> <code>[&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;]</code>,\n<strong>输出:</strong>\n[\n  [&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],\n  [&quot;nat&quot;,&quot;tan&quot;],\n  [&quot;bat&quot;]\n]</pre>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>所有输入均为小写字母。</li>\n\t<li>不考虑答案输出的顺序。</li>\n</ul>\n","jump-game-ii":"<p>给定一个非负整数数组，你最初位于数组的第一个位置。</p>\n\n<p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p>\n\n<p>你的目标是使用最少的跳跃次数到达数组的最后一个位置。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [2,3,1,1,4]\n<strong>输出:</strong> 2\n<strong>解释:</strong> 跳到最后一个位置的最小跳跃数是 <code>2</code>。\n&nbsp;    从下标为 0 跳到下标为 1 的位置，跳&nbsp;<code>1</code>&nbsp;步，然后跳&nbsp;<code>3</code>&nbsp;步到达数组的最后一个位置。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<p>假设你总是可以到达数组的最后一个位置。</p>\n","search-in-rotated-sorted-array":"<p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p>\n\n<p>( 例如，数组&nbsp;<code>[0,1,2,4,5,6,7]</code>&nbsp;可能变为&nbsp;<code>[4,5,6,7,0,1,2]</code>&nbsp;)。</p>\n\n<p>搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回&nbsp;<code>-1</code>&nbsp;。</p>\n\n<p>你可以假设数组中不存在重复的元素。</p>\n\n<p>你的算法时间复杂度必须是&nbsp;<em>O</em>(log&nbsp;<em>n</em>) 级别。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> nums = [<code>4,5,6,7,0,1,2]</code>, target = 0\n<strong>输出:</strong> 4\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> nums = [<code>4,5,6,7,0,1,2]</code>, target = 3\n<strong>输出:</strong> -1</pre>\n","valid-sudoku":"<p>判断一个&nbsp;9x9 的数独是否有效。只需要<strong>根据以下规则</strong>，验证已经填入的数字是否有效即可。</p>\n\n<ol>\n\t<li>数字&nbsp;<code>1-9</code>&nbsp;在每一行只能出现一次。</li>\n\t<li>数字&nbsp;<code>1-9</code>&nbsp;在每一列只能出现一次。</li>\n\t<li>数字&nbsp;<code>1-9</code>&nbsp;在每一个以粗实线分隔的&nbsp;<code>3x3</code>&nbsp;宫内只能出现一次。</li>\n</ol>\n\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png\" style=\"height: 250px; width: 250px;\"></p>\n\n<p><small>上图是一个部分填充的有效的数独。</small></p>\n\n<p>数独部分空格内已填入了数字，空白格用&nbsp;<code>&#39;.&#39;</code>&nbsp;表示。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong>\n[\n  [&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],\n  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],\n  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],\n  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],\n  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],\n  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],\n  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],\n  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],\n  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]\n]\n<strong>输出:</strong> true\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong>\n[\n&nbsp; [&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],\n&nbsp; [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],\n&nbsp; [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],\n&nbsp; [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],\n&nbsp; [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],\n&nbsp; [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],\n&nbsp; [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],\n&nbsp; [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],\n&nbsp; [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]\n]\n<strong>输出:</strong> false\n<strong>解释:</strong> 除了第一行的第一个数字从<strong> 5</strong> 改为 <strong>8 </strong>以外，空格内其他数字均与 示例1 相同。\n     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>一个有效的数独（部分已被填充）不一定是可解的。</li>\n\t<li>只需要根据以上规则，验证已经填入的数字是否有效即可。</li>\n\t<li>给定数独序列只包含数字&nbsp;<code>1-9</code>&nbsp;和字符&nbsp;<code>&#39;.&#39;</code>&nbsp;。</li>\n\t<li>给定数独永远是&nbsp;<code>9x9</code>&nbsp;形式的。</li>\n</ul>\n","divide-two-integers":"<p>给定两个整数，被除数&nbsp;<code>dividend</code>&nbsp;和除数&nbsp;<code>divisor</code>。将两数相除，要求不使用乘法、除法和 mod 运算符。</p>\n\n<p>返回被除数&nbsp;<code>dividend</code>&nbsp;除以除数&nbsp;<code>divisor</code>&nbsp;得到的商。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> dividend = 10, divisor = 3\n<strong>输出:</strong> 3</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> dividend = 7, divisor = -3\n<strong>输出:</strong> -2</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>被除数和除数均为 32 位有符号整数。</li>\n\t<li>除数不为&nbsp;0。</li>\n\t<li>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [&minus;2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>&minus; 1]。本题中，如果除法结果溢出，则返回 2<sup>31&nbsp;</sup>&minus; 1。</li>\n</ul>\n","spiral-matrix-ii":"<p>给定一个正整数&nbsp;<em>n</em>，生成一个包含 1 到&nbsp;<em>n</em><sup>2</sup>&nbsp;所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> 3\n<strong>输出:</strong>\n[\n [ 1, 2, 3 ],\n [ 8, 9, 4 ],\n [ 7, 6, 5 ]\n]</pre>\n","next-permutation":"<p>实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。</p>\n\n<p>如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。</p>\n\n<p>必须<strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">原地</a></strong>修改，只允许使用额外常数空间。</p>\n\n<p>以下是一些例子，输入位于左侧列，其相应输出位于右侧列。<br>\n<code>1,2,3</code> &rarr; <code>1,3,2</code><br>\n<code>3,2,1</code> &rarr; <code>1,2,3</code><br>\n<code>1,1,5</code> &rarr; <code>1,5,1</code></p>\n","remove-element":"<p>给定一个数组 <em>nums&nbsp;</em>和一个值 <em>val</em>，你需要<strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">原地</a></strong>移除所有数值等于&nbsp;<em>val&nbsp;</em>的元素，返回移除后数组的新长度。</p>\n\n<p>不要使用额外的数组空间，你必须在<strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">原地</a>修改输入数组</strong>并在使用 O(1) 额外空间的条件下完成。</p>\n\n<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>给定 <em>nums</em> = <strong>[3,2,2,3]</strong>, <em>val</em> = <strong>3</strong>,\n\n函数应该返回新的长度 <strong>2</strong>, 并且 <em>nums </em>中的前两个元素均为 <strong>2</strong>。\n\n你不需要考虑数组中超出新长度后面的元素。\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre>给定 <em>nums</em> = <strong>[0,1,2,2,3,0,4,2]</strong>, <em>val</em> = <strong>2</strong>,\n\n函数应该返回新的长度 <strong><code>5</code></strong>, 并且 <em>nums </em>中的前五个元素为 <strong><code>0</code></strong>, <strong><code>1</code></strong>, <strong><code>3</code></strong>, <strong><code>0</code></strong>, <strong>4</strong>。\n\n注意这五个元素可为任意顺序。\n\n你不需要考虑数组中超出新长度后面的元素。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<p>为什么返回数值是整数，但输出的答案是数组呢?</p>\n\n<p>请注意，输入数组是以<strong>&ldquo;引用&rdquo;</strong>方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p>\n\n<p>你可以想象内部操作如下:</p>\n\n<pre>// <strong>nums</strong> 是以&ldquo;引用&rdquo;方式传递的。也就是说，不对实参作任何拷贝\nint len = removeElement(nums, val);\n\n// 在函数里修改输入数组对于调用者是可见的。\n// 根据你的函数返回的长度, 它会打印出数组中<strong>该长度范围内</strong>的所有元素。\nfor (int i = 0; i &lt; len; i++) {\n&nbsp; &nbsp; print(nums[i]);\n}\n</pre>\n","roman-to-integer":"<p>罗马数字包含以下七种字符:&nbsp;<code>I</code>，&nbsp;<code>V</code>，&nbsp;<code>X</code>，&nbsp;<code>L</code>，<code>C</code>，<code>D</code>&nbsp;和&nbsp;<code>M</code>。</p>\n\n<pre><strong>字符</strong>          <strong>数值</strong>\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000</pre>\n\n<p>例如， 罗马数字 2 写做&nbsp;<code>II</code>&nbsp;，即为两个并列的 1。12 写做&nbsp;<code>XII</code>&nbsp;，即为&nbsp;<code>X</code>&nbsp;+&nbsp;<code>II</code>&nbsp;。 27 写做&nbsp;&nbsp;<code>XXVII</code>, 即为&nbsp;<code>XX</code>&nbsp;+&nbsp;<code>V</code>&nbsp;+&nbsp;<code>II</code>&nbsp;。</p>\n\n<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做&nbsp;<code>IIII</code>，而是&nbsp;<code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为&nbsp;<code>IX</code>。这个特殊的规则只适用于以下六种情况：</p>\n\n<ul>\n\t<li><code>I</code>&nbsp;可以放在&nbsp;<code>V</code>&nbsp;(5) 和&nbsp;<code>X</code>&nbsp;(10) 的左边，来表示 4 和 9。</li>\n\t<li><code>X</code>&nbsp;可以放在&nbsp;<code>L</code>&nbsp;(50) 和&nbsp;<code>C</code>&nbsp;(100) 的左边，来表示 40 和&nbsp;90。&nbsp;</li>\n\t<li><code>C</code>&nbsp;可以放在&nbsp;<code>D</code>&nbsp;(500) 和&nbsp;<code>M</code>&nbsp;(1000) 的左边，来表示&nbsp;400 和&nbsp;900。</li>\n</ul>\n\n<p>给定一个罗马数字，将其转换成整数。输入确保在 1&nbsp;到 3999 的范围内。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong>&nbsp;&quot;III&quot;\n<strong>输出:</strong> 3</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong>&nbsp;&quot;IV&quot;\n<strong>输出:</strong> 4</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre><strong>输入:</strong>&nbsp;&quot;IX&quot;\n<strong>输出:</strong> 9</pre>\n\n<p><strong>示例&nbsp;4:</strong></p>\n\n<pre><strong>输入:</strong>&nbsp;&quot;LVIII&quot;\n<strong>输出:</strong> 58\n<strong>解释:</strong> L = 50, V= 5, III = 3.\n</pre>\n\n<p><strong>示例&nbsp;5:</strong></p>\n\n<pre><strong>输入:</strong>&nbsp;&quot;MCMXCIV&quot;\n<strong>输出:</strong> 1994\n<strong>解释:</strong> M = 1000, CM = 900, XC = 90, IV = 4.</pre>\n","search-insert-position":"<p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>\n\n<p>你可以假设数组中无重复元素。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [1,3,5,6], 5\n<strong>输出:</strong> 2\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> [1,3,5,6], 2\n<strong>输出:</strong> 1\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> [1,3,5,6], 7\n<strong>输出:</strong> 4\n</pre>\n\n<p><strong>示例 4:</strong></p>\n\n<pre><strong>输入:</strong> [1,3,5,6], 0\n<strong>输出:</strong> 0\n</pre>\n","4sum":"<p>给定一个包含&nbsp;<em>n</em> 个整数的数组&nbsp;<code>nums</code>&nbsp;和一个目标值&nbsp;<code>target</code>，判断&nbsp;<code>nums</code>&nbsp;中是否存在四个元素 <em>a，</em><em>b，c</em>&nbsp;和 <em>d</em>&nbsp;，使得&nbsp;<em>a</em> + <em>b</em> + <em>c</em> + <em>d</em>&nbsp;的值与&nbsp;<code>target</code>&nbsp;相等？找出所有满足条件且不重复的四元组。</p>\n\n<p><strong>注意：</strong></p>\n\n<p>答案中不可以包含重复的四元组。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。\n\n满足要求的四元组集合为：\n[\n  [-1,  0, 0, 1],\n  [-2, -1, 1, 2],\n  [-2,  0, 0, 2]\n]\n</pre>\n","swap-nodes-in-pairs":"<p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>给定 <code>1-&gt;2-&gt;3-&gt;4</code>, 你应该返回 <code>2-&gt;1-&gt;4-&gt;3</code>.</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>你的算法只能使用常数的额外空间。</li>\n\t<li><strong>你不能只是单纯的改变节点内部的值</strong>，而是需要实际的进行节点交换。</li>\n</ul>\n","permutations":"<p>给定一个<strong>没有重复</strong>数字的序列，返回其所有可能的全排列。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [1,2,3]\n<strong>输出:</strong>\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]</pre>\n","letter-combinations-of-a-phone-number":"<p>给定一个仅包含数字&nbsp;<code>2-9</code>&nbsp;的字符串，返回所有它能表示的字母组合。</p>\n\n<p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p>\n\n<p><img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png\"></p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入：</strong>&quot;23&quot;\n<strong>输出：</strong>[&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].\n</pre>\n\n<p><strong>说明:</strong><br>\n尽管上面的答案是按字典序排列的，但是你可以任意选择答案输出的顺序。</p>\n","longest-common-prefix":"<p>编写一个函数来查找字符串数组中的最长公共前缀。</p>\n\n<p>如果不存在公共前缀，返回空字符串&nbsp;<code>&quot;&quot;</code>。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入: </strong>[&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]\n<strong>输出:</strong> &quot;fl&quot;\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入: </strong>[&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]\n<strong>输出:</strong> &quot;&quot;\n<strong>解释:</strong> 输入不存在公共前缀。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<p>所有输入只包含小写字母&nbsp;<code>a-z</code>&nbsp;。</p>\n","remove-duplicates-from-sorted-array":"<p>给定一个排序数组，你需要在<strong><a href=\"http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">原地</a></strong>删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p>\n\n<p>不要使用额外的数组空间，你必须在<strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">原地</a>修改输入数组</strong>并在使用 O(1) 额外空间的条件下完成。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>给定数组 <em>nums</em> = <strong>[1,1,2]</strong>, \n\n函数应该返回新的长度 <strong>2</strong>, 并且原数组 <em>nums </em>的前两个元素被修改为 <strong><code>1</code></strong>, <strong><code>2</code></strong>。 \n\n你不需要考虑数组中超出新长度后面的元素。</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre>给定<em> nums </em>= <strong>[0,0,1,1,1,2,2,3,3,4]</strong>,\n\n函数应该返回新的长度 <strong>5</strong>, 并且原数组 <em>nums </em>的前五个元素被修改为 <strong><code>0</code></strong>, <strong><code>1</code></strong>, <strong><code>2</code></strong>, <strong><code>3</code></strong>, <strong><code>4</code></strong>。\n\n你不需要考虑数组中超出新长度后面的元素。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<p>为什么返回数值是整数，但输出的答案是数组呢?</p>\n\n<p>请注意，输入数组是以<strong>&ldquo;引用&rdquo;</strong>方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p>\n\n<p>你可以想象内部操作如下:</p>\n\n<pre>// <strong>nums</strong> 是以&ldquo;引用&rdquo;方式传递的。也就是说，不对实参做任何拷贝\nint len = removeDuplicates(nums);\n\n// 在函数里修改输入数组对于调用者是可见的。\n// 根据你的函数返回的长度, 它会打印出数组中<strong>该长度范围内</strong>的所有元素。\nfor (int i = 0; i &lt; len; i++) {\n&nbsp; &nbsp; print(nums[i]);\n}\n</pre>\n","merge-k-sorted-lists":"<p>合并&nbsp;<em>k&nbsp;</em>个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong>\n[\n&nbsp; 1-&gt;4-&gt;5,\n&nbsp; 1-&gt;3-&gt;4,\n&nbsp; 2-&gt;6\n]\n<strong>输出:</strong> 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</pre>\n","maximum-subarray":"<p>给定一个整数数组 <code>nums</code>&nbsp;，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [-2,1,-3,4,-1,2,1,-5,4],\n<strong>输出:</strong> 6\n<strong>解释:</strong>&nbsp;连续子数组&nbsp;[4,-1,2,1] 的和最大，为&nbsp;6。\n</pre>\n\n<p><strong>进阶:</strong></p>\n\n<p>如果你已经实现复杂度为 O(<em>n</em>) 的解法，尝试使用更为精妙的分治法求解。</p>\n","valid-parentheses":"<p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;{&#39;</code>，<code>&#39;}&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code>&nbsp;的字符串，判断字符串是否有效。</p>\n\n<p>有效字符串需满足：</p>\n\n<ol>\n\t<li>左括号必须用相同类型的右括号闭合。</li>\n\t<li>左括号必须以正确的顺序闭合。</li>\n</ol>\n\n<p>注意空字符串可被认为是有效字符串。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> &quot;()&quot;\n<strong>输出:</strong> true\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> &quot;()[]{}&quot;\n<strong>输出:</strong> true\n</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre><strong>输入:</strong> &quot;(]&quot;\n<strong>输出:</strong> false\n</pre>\n\n<p><strong>示例&nbsp;4:</strong></p>\n\n<pre><strong>输入:</strong> &quot;([)]&quot;\n<strong>输出:</strong> false\n</pre>\n\n<p><strong>示例&nbsp;5:</strong></p>\n\n<pre><strong>输入:</strong> &quot;{[]}&quot;\n<strong>输出:</strong> true</pre>\n","integer-to-roman":"<p>罗马数字包含以下七种字符：&nbsp;<code>I</code>，&nbsp;<code>V</code>，&nbsp;<code>X</code>，&nbsp;<code>L</code>，<code>C</code>，<code>D</code>&nbsp;和&nbsp;<code>M</code>。</p>\n\n<pre><strong>字符</strong>          <strong>数值</strong>\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000</pre>\n\n<p>例如， 罗马数字 2 写做&nbsp;<code>II</code>&nbsp;，即为两个并列的 1。12 写做&nbsp;<code>XII</code>&nbsp;，即为&nbsp;<code>X</code>&nbsp;+&nbsp;<code>II</code>&nbsp;。 27 写做&nbsp;&nbsp;<code>XXVII</code>, 即为&nbsp;<code>XX</code>&nbsp;+&nbsp;<code>V</code>&nbsp;+&nbsp;<code>II</code>&nbsp;。</p>\n\n<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做&nbsp;<code>IIII</code>，而是&nbsp;<code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为&nbsp;<code>IX</code>。这个特殊的规则只适用于以下六种情况：</p>\n\n<ul>\n\t<li><code>I</code>&nbsp;可以放在&nbsp;<code>V</code>&nbsp;(5) 和&nbsp;<code>X</code>&nbsp;(10) 的左边，来表示 4 和 9。</li>\n\t<li><code>X</code>&nbsp;可以放在&nbsp;<code>L</code>&nbsp;(50) 和&nbsp;<code>C</code>&nbsp;(100) 的左边，来表示 40 和&nbsp;90。&nbsp;</li>\n\t<li><code>C</code>&nbsp;可以放在&nbsp;<code>D</code>&nbsp;(500) 和&nbsp;<code>M</code>&nbsp;(1000) 的左边，来表示&nbsp;400 和&nbsp;900。</li>\n</ul>\n\n<p>给定一个整数，将其转为罗马数字。输入确保在 1&nbsp;到 3999 的范围内。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong>&nbsp;3\n<strong>输出:</strong> &quot;III&quot;</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong>&nbsp;4\n<strong>输出:</strong> &quot;IV&quot;</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre><strong>输入:</strong>&nbsp;9\n<strong>输出:</strong> &quot;IX&quot;</pre>\n\n<p><strong>示例&nbsp;4:</strong></p>\n\n<pre><strong>输入:</strong>&nbsp;58\n<strong>输出:</strong> &quot;LVIII&quot;\n<strong>解释:</strong> L = 50, V = 5, III = 3.\n</pre>\n\n<p><strong>示例&nbsp;5:</strong></p>\n\n<pre><strong>输入:</strong>&nbsp;1994\n<strong>输出:</strong> &quot;MCMXCIV&quot;\n<strong>解释:</strong> M = 1000, CM = 900, XC = 90, IV = 4.</pre>\n","longest-substring-without-repeating-characters":"<p>给定一个字符串，请你找出其中不含有重复字符的&nbsp;<strong>最长子串&nbsp;</strong>的长度。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入: </strong>&quot;abcabcbb&quot;\n<strong>输出: </strong>3 \n<strong>解释:</strong> 因为无重复字符的最长子串是 <code>&quot;abc&quot;，所以其</code>长度为 3。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>&quot;bbbbb&quot;\n<strong>输出: </strong>1\n<strong>解释: </strong>因为无重复字符的最长子串是 <code>&quot;b&quot;</code>，所以其长度为 1。\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入: </strong>&quot;pwwkew&quot;\n<strong>输出: </strong>3\n<strong>解释: </strong>因为无重复字符的最长子串是&nbsp;<code>&quot;wke&quot;</code>，所以其长度为 3。\n&nbsp;    请注意，你的答案必须是 <strong>子串 </strong>的长度，<code>&quot;pwke&quot;</code>&nbsp;是一个<em>子序列，</em>不是子串。\n</pre>\n","string-to-integer-atoi":"<p>请你来实现一个&nbsp;<code>atoi</code>&nbsp;函数，使其能将字符串转换成整数。</p>\n\n<p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。</p>\n\n<p>当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。</p>\n\n<p>该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。</p>\n\n<p>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。</p>\n\n<p>在任何情况下，若函数不能进行有效的转换时，请返回 0。</p>\n\n<p><strong>说明：</strong></p>\n\n<p>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为&nbsp;[&minus;2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>&minus; 1]。如果数值超过这个范围，qing返回 &nbsp;INT_MAX (2<sup>31&nbsp;</sup>&minus; 1) 或&nbsp;INT_MIN (&minus;2<sup>31</sup>) 。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> &quot;42&quot;\n<strong>输出:</strong> 42\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> &quot;   -42&quot;\n<strong>输出:</strong> -42\n<strong>解释: </strong>第一个非空白字符为 &#39;-&#39;, 它是一个负号。\n&nbsp;    我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。\n</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre><strong>输入:</strong> &quot;4193 with words&quot;\n<strong>输出:</strong> 4193\n<strong>解释:</strong> 转换截止于数字 &#39;3&#39; ，因为它的下一个字符不为数字。\n</pre>\n\n<p><strong>示例&nbsp;4:</strong></p>\n\n<pre><strong>输入:</strong> &quot;words and 987&quot;\n<strong>输出:</strong> 0\n<strong>解释:</strong> 第一个非空字符是 &#39;w&#39;, 但它不是数字或正、负号。\n     因此无法执行有效的转换。</pre>\n\n<p><strong>示例&nbsp;5:</strong></p>\n\n<pre><strong>输入:</strong> &quot;-91283472332&quot;\n<strong>输出:</strong> -2147483648\n<strong>解释:</strong> 数字 &quot;-91283472332&quot; 超过 32 位有符号整数范围。 \n&nbsp;    因此返回 INT_MIN (&minus;2<sup>31</sup>) 。\n</pre>\n","palindrome-number":"<p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> 121\n<strong>输出:</strong> true\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> -121\n<strong>输出:</strong> false\n<strong>解释:</strong> 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> 10\n<strong>输出:</strong> false\n<strong>解释:</strong> 从右向左读, 为 01 。因此它不是一个回文数。\n</pre>\n\n<p><strong>进阶:</strong></p>\n\n<p>你能不将整数转为字符串来解决这个问题吗？</p>\n","median-of-two-sorted-arrays":"<p>给定两个大小为 m 和 n 的有序数组&nbsp;<code>nums1</code> 和&nbsp;<code>nums2</code>。</p>\n\n<p>请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为&nbsp;O(log(m + n))。</p>\n\n<p>你可以假设&nbsp;<code>nums1</code>&nbsp;和&nbsp;<code>nums2</code>&nbsp;不会同时为空。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>nums1 = [1, 3]\nnums2 = [2]\n\n则中位数是 2.0\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>nums1 = [1, 2]\nnums2 = [3, 4]\n\n则中位数是 (2 + 3)/2 = 2.5\n</pre>\n","add-two-numbers":"<p>给出两个&nbsp;<strong>非空</strong> 的链表用来表示两个非负的整数。其中，它们各自的位数是按照&nbsp;<strong>逆序</strong>&nbsp;的方式存储的，并且它们的每个节点只能存储&nbsp;<strong>一位</strong>&nbsp;数字。</p>\n\n<p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p>\n\n<p>您可以假设除了数字 0 之外，这两个数都不会以 0&nbsp;开头。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\n<strong>输出：</strong>7 -&gt; 0 -&gt; 8\n<strong>原因：</strong>342 + 465 = 807\n</pre>\n","zigzag-conversion":"<p>将一个给定字符串根据给定的行数，以从上往下、从左到右进行&nbsp;Z 字形排列。</p>\n\n<p>比如输入字符串为 <code>&quot;LEETCODEISHIRING&quot;</code>&nbsp;行数为 3 时，排列如下：</p>\n\n<pre>L   C   I   R\nE T O E S I I G\nE   D   H   N\n</pre>\n\n<p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：<code>&quot;LCIRETOESIIGEDHN&quot;</code>。</p>\n\n<p>请你实现这个将字符串进行指定行数变换的函数：</p>\n\n<pre>string convert(string s, int numRows);</pre>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> s = &quot;LEETCODEISHIRING&quot;, numRows = 3\n<strong>输出:</strong> &quot;LCIRETOESIIGEDHN&quot;\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> s = &quot;LEETCODEISHIRING&quot;, numRows =&nbsp;4\n<strong>输出:</strong>&nbsp;&quot;LDREOEIIECIHNTSG&quot;\n<strong>解释:</strong>\n\nL     D     R\nE   O E   I I\nE C   I H   N\nT     S     G</pre>\n","two-sum":"<p>给定一个整数数组 <code>nums</code>&nbsp;和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那&nbsp;<strong>两个</strong>&nbsp;整数，并返回他们的数组下标。</p>\n\n<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>给定 nums = [2, 7, 11, 15], target = 9\n\n因为 nums[<strong>0</strong>] + nums[<strong>1</strong>] = 2 + 7 = 9\n所以返回 [<strong>0, 1</strong>]\n</pre>\n","longest-palindromic-substring":"<p>给定一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。你可以假设&nbsp;<code>s</code> 的最大长度为 1000。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入:</strong> &quot;babad&quot;\n<strong>输出:</strong> &quot;bab&quot;\n<strong>注意:</strong> &quot;aba&quot; 也是一个有效答案。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入:</strong> &quot;cbbd&quot;\n<strong>输出:</strong> &quot;bb&quot;\n</pre>\n","regular-expression-matching":"<p>给定一个字符串&nbsp;(<code>s</code>) 和一个字符模式&nbsp;(<code>p</code>)。实现支持 <code>&#39;.&#39;</code>&nbsp;和&nbsp;<code>&#39;*&#39;</code>&nbsp;的正则表达式匹配。</p>\n\n<pre>&#39;.&#39; 匹配任意单个字符。\n&#39;*&#39; 匹配零个或多个前面的元素。\n</pre>\n\n<p>匹配应该覆盖<strong>整个</strong>字符串&nbsp;(<code>s</code>) ，而不是部分字符串。</p>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li><code>s</code>&nbsp;可能为空，且只包含从&nbsp;<code>a-z</code>&nbsp;的小写字母。</li>\n\t<li><code>p</code>&nbsp;可能为空，且只包含从&nbsp;<code>a-z</code>&nbsp;的小写字母，以及字符&nbsp;<code>.</code>&nbsp;和&nbsp;<code>*</code>。</li>\n</ul>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong>\ns = &quot;aa&quot;\np = &quot;a&quot;\n<strong>输出:</strong> false\n<strong>解释:</strong> &quot;a&quot; 无法匹配 &quot;aa&quot; 整个字符串。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong>\ns = &quot;aa&quot;\np = &quot;a*&quot;\n<strong>输出:</strong> true\n<strong>解释:</strong>&nbsp;&#39;*&#39; 代表可匹配零个或多个前面的元素, 即可以匹配 &#39;a&#39; 。因此, 重复 &#39;a&#39; 一次, 字符串可变为 &quot;aa&quot;。\n</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre><strong>输入:</strong>\ns = &quot;ab&quot;\np = &quot;.*&quot;\n<strong>输出:</strong> true\n<strong>解释:</strong>&nbsp;&quot;.*&quot; 表示可匹配零个或多个(&#39;*&#39;)任意字符(&#39;.&#39;)。\n</pre>\n\n<p><strong>示例 4:</strong></p>\n\n<pre><strong>输入:</strong>\ns = &quot;aab&quot;\np = &quot;c*a*b&quot;\n<strong>输出:</strong> true\n<strong>解释:</strong>&nbsp;&#39;c&#39; 可以不被重复, &#39;a&#39; 可以被重复一次。因此可以匹配字符串 &quot;aab&quot;。\n</pre>\n\n<p><strong>示例 5:</strong></p>\n\n<pre><strong>输入:</strong>\ns = &quot;mississippi&quot;\np = &quot;mis*is*p*.&quot;\n<strong>输出:</strong> false</pre>\n","reverse-integer":"<p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> 123\n<strong>输出:</strong> 321\n</pre>\n\n<p><strong>&nbsp;示例 2:</strong></p>\n\n<pre><strong>输入:</strong> -123\n<strong>输出:</strong> -321\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> 120\n<strong>输出:</strong> 21\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为&nbsp;[&minus;2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>&minus; 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p>\n","container-with-most-water":"<p>给定 <em>n</em> 个非负整数 <em>a</em><sub>1</sub>，<em>a</em><sub>2，</sub>...，<em>a</em><sub>n，</sub>每个数代表坐标中的一个点&nbsp;(<em>i</em>,&nbsp;<em>a<sub>i</sub></em>) 。在坐标内画 <em>n</em> 条垂直线，垂直线 <em>i</em>&nbsp;的两个端点分别为&nbsp;(<em>i</em>,&nbsp;<em>a<sub>i</sub></em>) 和 (<em>i</em>, 0)。找出其中的两条线，使得它们与&nbsp;<em>x</em>&nbsp;轴共同构成的容器可以容纳最多的水。</p>\n\n<p><strong>说明：</strong>你不能倾斜容器，且&nbsp;<em>n</em>&nbsp;的值至少为 2。</p>\n\n<p><img alt=\"\" src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg\" style=\"height: 287px; width: 600px;\"></p>\n\n<p><small>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为&nbsp;49。</small></p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [1,8,6,2,5,4,8,3,7]\n<strong>输出:</strong> 49</pre>\n"}